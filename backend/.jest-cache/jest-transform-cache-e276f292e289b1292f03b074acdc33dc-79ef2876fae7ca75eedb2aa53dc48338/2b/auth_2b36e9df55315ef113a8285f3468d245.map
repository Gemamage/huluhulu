{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\auth.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\auth.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { body, validationResult } from 'express-validator';\nimport { logger } from '../utils/logger';\nimport { AppError } from '../utils/errors';\nimport { UserService } from '../services/userService';\nimport { EmailService } from '../services/emailService';\nimport { VerificationService } from '../services/verificationService';\nimport { authenticate } from '../middleware/auth';\nimport { requireActiveAccount, requireEmailVerification } from '../middleware/rbac';\nimport { IUser } from '../models/User';\n\nconst router = Router();\nconst userService = new UserService();\n\n// 用戶註冊\nrouter.post(\n  '/register',\n  [\n    body('email').isEmail().normalizeEmail(),\n    body('password').isLength({ min: 6 }),\n    body('name').trim().isLength({ min: 1 }),\n    body('phone').optional().isMobilePhone('zh-TW'),\n  ],\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        res.status(400).json({\n          success: false,\n          message: '輸入資料驗證失敗',\n          errors: errors.array(),\n        });\n        return;\n      }\n\n      const { email, password, name, phone } = req.body;\n      const userData = { email, password, name, phone };\n\n      // 註冊用戶（UserService 內部會檢查電子郵件是否已存在）\n      const result = await userService.registerUser(userData);\n\n      logger.info('用戶註冊成功', { email, name, userId: result.user._id });\n\n      res.status(201).json({\n        success: true,\n        message: '註冊成功，請檢查您的電子郵件以驗證帳號',\n        data: {\n          user: {\n            id: result.user._id,\n            email: result.user.email,\n            name: result.user.name,\n            isEmailVerified: result.user.isEmailVerified,\n          },\n        },\n      });\n    } catch (error) {\n      logger.error('用戶註冊失敗', { error });\n      \n      if (error instanceof AppError) {\n        res.status(error.statusCode).json({\n          success: false,\n          message: error.message,\n        });\n        return;\n      }\n\n      res.status(500).json({\n        success: false,\n        message: '註冊失敗，請稍後再試',\n      });\n    }\n  }\n);\n\n// 用戶登入\nrouter.post(\n  '/login',\n  [\n    body('email').isEmail().normalizeEmail(),\n    body('password').notEmpty(),\n  ],\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        res.status(400).json({\n          success: false,\n          message: '輸入資料驗證失敗',\n          errors: errors.array(),\n        });\n        return;\n      }\n\n      const { email, password } = req.body;\n      const loginData = { email, password };\n\n      // 用戶登入\n      const { user, token } = await userService.loginUser(loginData);\n\n      logger.info('用戶登入成功', { email, userId: user._id });\n\n      res.json({\n        success: true,\n        message: '登入成功',\n        data: {\n          user: {\n            id: user._id,\n            email: user.email,\n            name: user.name,\n            phone: user.phone,\n            avatar: user.avatar,\n            role: user.role,\n            isEmailVerified: user.isEmailVerified,\n            lastLoginAt: user.lastLoginAt,\n          },\n          token,\n        },\n      });\n    } catch (error) {\n      logger.error('用戶登入失敗', { error });\n      \n      if (error instanceof AppError) {\n        res.status(error.statusCode).json({\n          success: false,\n          message: error.message,\n        });\n        return;\n      }\n\n      res.status(500).json({\n        success: false,\n        message: '登入失敗，請稍後再試',\n      });\n    }\n  }\n);\n\n// 用戶登出\nrouter.post('/logout', authenticate, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const userId = (req.user as IUser)?._id?.toString();\n    \n    // TODO: 實作令牌黑名單機制（可選）\n    // 目前採用客戶端刪除令牌的方式\n\n    logger.info('用戶登出成功', { userId });\n\n    res.json({\n      success: true,\n      message: '登出成功',\n    });\n  } catch (error) {\n    logger.error('用戶登出失敗', { error });\n    res.status(500).json({\n      success: false,\n      message: '登出失敗，請稍後再試',\n    });\n  }\n});\n\n// 刷新令牌\nrouter.post('/refresh', authenticate, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const userId = (req.user as IUser)?._id?.toString();\n    \n    if (!userId) {\n      res.status(401).json({\n        success: false,\n        message: '無效的令牌',\n      });\n      return;\n    }\n\n    // 獲取用戶資料\n    const user = await userService.getUserById(userId);\n    if (!user) {\n      res.status(404).json({\n        success: false,\n        message: '用戶不存在',\n      });\n      return;\n    }\n\n    // 生成新令牌\n    const newToken = user.generateAuthToken();\n\n    logger.info('令牌刷新成功', { userId });\n\n    res.json({\n      success: true,\n      message: '令牌刷新成功',\n      data: {\n        token: newToken,\n        user: {\n          id: user._id,\n          email: user.email,\n          name: user.name,\n          phone: user.phone,\n          avatar: user.avatar,\n          role: user.role,\n          isEmailVerified: user.isEmailVerified,\n        },\n      },\n    });\n  } catch (error) {\n    logger.error('令牌刷新失敗', { error });\n    res.status(500).json({\n      success: false,\n      message: '令牌刷新失敗，請稍後再試',\n    });\n  }\n});\n\n// 忘記密碼\nrouter.post(\n  '/forgot-password',\n  [\n    body('email').isEmail().normalizeEmail(),\n  ],\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        res.status(400).json({\n          success: false,\n          message: '輸入資料驗證失敗',\n          errors: errors.array(),\n        });\n        return;\n      }\n\n      const { email } = req.body;\n\n      // 查找用戶\n      const user = await userService.getUserByEmail(email);\n      if (!user) {\n        // 為了安全考量，即使用戶不存在也返回成功訊息\n        res.json({\n          success: true,\n          message: '如果該電子郵件地址存在於我們的系統中，您將收到密碼重設郵件',\n        });\n        return;\n      }\n\n      // 生成密碼重設令牌\n      const resetToken = user.generatePasswordResetToken();\n      await user.save();\n\n      // 發送密碼重設郵件\n      await EmailService.sendPasswordResetEmail(\n        user.email,\n        resetToken,\n        user.name\n      );\n\n      logger.info('密碼重設郵件已發送', { email, userId: user._id });\n\n      res.json({\n        success: true,\n        message: '密碼重設郵件已發送，請檢查您的電子郵件',\n      });\n    } catch (error) {\n      logger.error('忘記密碼處理失敗', { error });\n      res.status(500).json({\n        success: false,\n        message: '處理失敗，請稍後再試',\n      });\n    }\n  }\n);\n\n// 重設密碼\nrouter.post(\n  '/reset-password',\n  [\n    body('token').notEmpty().withMessage('請提供重設令牌'),\n    body('newPassword').isLength({ min: 6 }).withMessage('密碼長度至少6個字符'),\n  ],\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        res.status(400).json({\n          success: false,\n          message: '輸入資料驗證失敗',\n          errors: errors.array(),\n        });\n        return;\n      }\n\n      const { token, newPassword } = req.body;\n\n      // 重設密碼\n      await userService.resetPassword(token, newPassword);\n\n      logger.info('密碼重設成功');\n\n      res.json({\n        success: true,\n        message: '密碼重設成功，請使用新密碼登入',\n      });\n    } catch (error) {\n      logger.error('密碼重設失敗', { error });\n      \n      if (error instanceof AppError) {\n        res.status(error.statusCode).json({\n          success: false,\n          message: error.message,\n        });\n        return;\n      }\n\n      res.status(500).json({\n        success: false,\n        message: '密碼重設失敗，請稍後再試',\n      });\n    }\n  }\n);\n\n// 獲取當前用戶資訊\nrouter.get('/me', authenticate, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const userId = (req.user as IUser)?._id.toString();\n    \n    if (!userId) {\n      res.status(401).json({\n        success: false,\n        message: '未授權的請求',\n      });\n      return;\n    }\n\n    // 獲取用戶資訊\n    const user = await userService.getUserById(userId);\n    if (!user) {\n      res.status(404).json({\n        success: false,\n        message: '用戶不存在',\n      });\n      return;\n    }\n\n    logger.info('獲取用戶資訊成功', { userId });\n\n    res.json({\n      success: true,\n      data: {\n        user: {\n          id: user._id,\n          email: user.email,\n          name: user.name,\n          phone: user.phone,\n          avatar: user.avatar,\n          role: user.role,\n          isEmailVerified: user.isEmailVerified,\n          createdAt: user.createdAt,\n          updatedAt: user.updatedAt,\n          lastLoginAt: user.lastLoginAt,\n        },\n      },\n    });\n  } catch (error) {\n    logger.error('獲取用戶資訊失敗', { error });\n    res.status(500).json({\n      success: false,\n      message: '獲取用戶資訊失敗，請稍後再試',\n    });\n  }\n});\n\n// 電子郵件驗證\nrouter.get('/verify-email/:token', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { token } = req.params;\n\n    if (!token) {\n      res.status(400).json({\n        success: false,\n        message: '請提供驗證令牌',\n      });\n      return;\n    }\n\n    // 使用新的驗證服務\n    const result = await VerificationService.verifyEmailToken(token);\n\n    if (result.success) {\n      logger.info('電子郵件驗證成功', { token });\n      res.json({\n        success: true,\n        message: result.message,\n        data: result.user ? {\n          user: {\n            id: result.user._id,\n            email: result.user.email,\n            name: result.user.name,\n            isEmailVerified: result.user.isEmailVerified,\n          },\n        } : undefined,\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        message: result.message,\n      });\n    }\n  } catch (error) {\n    logger.error('電子郵件驗證失敗', { error });\n    \n    if (error instanceof AppError) {\n      res.status(error.statusCode).json({\n        success: false,\n        message: error.message,\n      });\n      return;\n    }\n\n    res.status(500).json({\n      success: false,\n      message: '電子郵件驗證失敗，請稍後再試',\n    });\n  }\n});\n\n// 重新發送驗證郵件（需要登入）\nrouter.post('/resend-verification', authenticate, requireActiveAccount, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const user = req.user as IUser;\n    \n    // 使用新的驗證服務\n    const result = await VerificationService.resendVerificationEmail(user.email);\n\n    if (result.success) {\n      logger.info('重新發送驗證郵件成功', { userId: user._id, email: user.email });\n      res.json({\n        success: true,\n        message: result.message,\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        message: result.message,\n        cooldownRemaining: result.cooldownRemaining,\n      });\n    }\n  } catch (error) {\n    logger.error('重新發送驗證郵件失敗', { error });\n    \n    if (error instanceof AppError) {\n      res.status(error.statusCode).json({\n        success: false,\n        message: error.message,\n      });\n      return;\n    }\n\n    res.status(500).json({\n      success: false,\n      message: '發送失敗，請稍後再試',\n    });\n  }\n});\n\n// 重新發送驗證郵件（無需登入）\nrouter.post('/resend-verification-email', [\n  body('email').isEmail().normalizeEmail(),\n], async (req: Request, res: Response): Promise<void> => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      res.status(400).json({\n        success: false,\n        message: '輸入資料驗證失敗',\n        errors: errors.array(),\n      });\n      return;\n    }\n\n    const { email } = req.body;\n\n    // 使用新的驗證服務\n    const result = await VerificationService.resendVerificationEmail(email);\n\n    if (result.success) {\n      logger.info('重新發送驗證郵件成功', { email });\n      res.json({\n        success: true,\n        message: result.message,\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        message: result.message,\n        cooldownRemaining: result.cooldownRemaining,\n      });\n    }\n  } catch (error) {\n    logger.error('重新發送驗證郵件失敗', { error });\n    \n    if (error instanceof AppError) {\n      res.status(error.statusCode).json({\n        success: false,\n        message: error.message,\n      });\n      return;\n    }\n\n    res.status(500).json({\n      success: false,\n      message: '發送失敗，請稍後再試',\n    });\n  }\n});\n\n// 檢查驗證狀態\nrouter.get('/verification-status', authenticate, requireActiveAccount, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const user = req.user as IUser;\n    \n    const status = await VerificationService.checkVerificationStatus(user);\n\n    res.json({\n      success: true,\n      data: {\n        needsVerification: status.needsVerification,\n        hasValidToken: status.hasValidToken,\n        tokenExpiry: status.tokenExpiry,\n        isEmailVerified: user.isEmailVerified,\n      },\n    });\n  } catch (error) {\n    logger.error('檢查驗證狀態失敗', { error });\n    res.status(500).json({\n      success: false,\n      message: '檢查狀態失敗，請稍後再試',\n    });\n  }\n});\n\nexport { router as authRoutes };"],"version":3}