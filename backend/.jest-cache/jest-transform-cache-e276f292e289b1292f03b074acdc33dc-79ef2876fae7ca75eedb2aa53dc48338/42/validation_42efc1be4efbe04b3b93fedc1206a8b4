e2acb36d6a161d01fd0dd1b9c20220a9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFile = exports.validateParams = exports.validateQuery = exports.validateRequest = void 0;
const zod_1 = require("zod");
const errors_1 = require("./errors");
// 驗證中介軟體輔助函數
const validateRequest = (schema) => {
    return (req, res, next) => {
        try {
            const validatedData = schema.parse(req.body);
            req.validatedData = validatedData;
            next();
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                const validationError = errors_1.ErrorFactory.fromZodError(error);
                return next(validationError);
            }
            next(error);
        }
    };
};
exports.validateRequest = validateRequest;
// 查詢參數驗證中介軟體
const validateQuery = (schema) => {
    return (req, res, next) => {
        try {
            const validatedQuery = schema.parse(req.query);
            req.validatedQuery = validatedQuery;
            next();
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                const validationError = errors_1.ErrorFactory.fromZodError(error);
                validationError.message = "查詢參數驗證失敗";
                return next(validationError);
            }
            next(error);
        }
    };
};
exports.validateQuery = validateQuery;
// 路徑參數驗證中介軟體
const validateParams = (schema) => {
    return (req, res, next) => {
        try {
            const validatedParams = schema.parse(req.params);
            req.validatedParams = validatedParams;
            next();
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                const validationError = errors_1.ErrorFactory.fromZodError(error);
                validationError.message = "路徑參數驗證失敗";
                return next(validationError);
            }
            next(error);
        }
    };
};
exports.validateParams = validateParams;
// 檔案驗證中介軟體
const validateFile = (options = {}) => {
    return (req, res, next) => {
        const { required = false, maxSize = 5 * 1024 * 1024, // 5MB
        allowedTypes = ["image/jpeg", "image/png", "image/gif"], fieldName = "file", } = options;
        const file = req.file || req.files?.[fieldName];
        if (required && !file) {
            const error = errors_1.ErrorFactory.createValidationError("檔案為必填項目", fieldName, undefined, "required");
            return next(error);
        }
        if (file) {
            // 檢查檔案大小
            if (file.size > maxSize) {
                const error = errors_1.ErrorFactory.createValidationError(`檔案大小不能超過 ${Math.round(maxSize / 1024 / 1024)}MB`, fieldName, file.size, "maxSize");
                return next(error);
            }
            // 檢查檔案類型
            if (!allowedTypes.includes(file.mimetype)) {
                const error = errors_1.ErrorFactory.createValidationError(`不支援的檔案類型，僅支援: ${allowedTypes.join(", ")}`, fieldName, file.mimetype, "fileType");
                return next(error);
            }
        }
        next();
    };
};
exports.validateFile = validateFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,