6c9058b4181f7ff6b8011f15b72e75fe
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIMatchingService = void 0;
const notificationService_1 = require("../notificationService");
const matchingService_1 = require("../matchingService");
const Pet_1 = require("../../models/Pet");
const User_1 = require("../../models/User");
const Notification_1 = require("../../models/Notification");
const logger_1 = require("../../utils/logger");
class AIMatchingService {
    /**
     * ÂàùÂßãÂåñ AI ÈÖçÂ∞çÊúçÂãô
     */
    static initialize(config) {
        if (config) {
            this.config = { ...this.config, ...config };
        }
        this.start();
        logger_1.logger.info('AI ÈÖçÂ∞çÊúçÂãôÂ∑≤ÂàùÂßãÂåñ', { config: this.config });
    }
    /**
     * ÂïüÂãï AI ÈÖçÂ∞ç‰ªªÂãô
     */
    static start() {
        if (!this.config.enabled || this.interval)
            return;
        const intervalMs = this.config.checkInterval * 60 * 1000;
        this.interval = setInterval(async () => {
            try {
                await this.processAIMatching();
            }
            catch (error) {
                logger_1.logger.error('AI ÈÖçÂ∞çÈÄöÁü•‰ªªÂãôÂ§±Êïó', { error });
            }
        }, intervalMs);
        logger_1.logger.info('AI ÈÖçÂ∞çÈÄöÁü•‰ªªÂãôÂ∑≤ÂïüÂãï', {
            interval: this.config.checkInterval
        });
    }
    /**
     * ÂÅúÊ≠¢ AI ÈÖçÂ∞ç‰ªªÂãô
     */
    static stop() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
            logger_1.logger.info('AI ÈÖçÂ∞çÈÄöÁü•‰ªªÂãôÂ∑≤ÂÅúÊ≠¢');
        }
    }
    /**
     * ËôïÁêÜ AI ÈÖçÂ∞çÈÄöÁü•
     */
    static async processAIMatching() {
        try {
            this.lastRun = new Date();
            // Áç≤ÂèñÊúÄËøë 24 Â∞èÊôÇÂÖßÊñ∞Â¢ûÁöÑÂØµÁâ©
            const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
            const recentPets = await Pet_1.Pet.find({
                createdAt: { $gte: yesterday },
                status: { $in: ['lost', 'found'] },
                'aiData.features': { $exists: true, $ne: null }
            }).populate('owner');
            for (const pet of recentPets) {
                try {
                    await this.processSinglePetAIMatching(pet);
                }
                catch (error) {
                    logger_1.logger.error('ËôïÁêÜÂØµÁâ© AI ÈÖçÂ∞çÂ§±Êïó', {
                        petId: pet._id,
                        error
                    });
                }
            }
        }
        catch (error) {
            logger_1.logger.error('AI ÈÖçÂ∞çËôïÁêÜÂ§±Êïó', { error });
        }
    }
    /**
     * ËôïÁêÜÂñÆÂÄãÂØµÁâ©ÁöÑ AI ÈÖçÂ∞ç
     */
    static async processSinglePetAIMatching(pet) {
        try {
            const potentialMatches = await matchingService_1.MatchingService.findPotentialMatches(pet._id.toString(), {
                minSimilarity: this.config.minSimilarity,
                maxDistance: this.config.maxDistance,
                maxDays: 1 // Âè™Ê™¢Êü•ÊúÄËøë‰∏ÄÂ§©
            });
            if (potentialMatches.length > 0) {
                // ÁôºÈÄÅ AI ÈÖçÂ∞çÈÄöÁü•
                await this.sendAIMatchNotification(pet, potentialMatches);
                return {
                    matchesFound: potentialMatches.length,
                    notificationsSent: 1
                };
            }
            return {
                matchesFound: 0,
                notificationsSent: 0
            };
        }
        catch (error) {
            logger_1.logger.error('ËôïÁêÜÂØµÁâ© AI ÈÖçÂ∞çÂ§±Êïó', {
                petId: pet._id,
                error
            });
            throw error;
        }
    }
    /**
     * ÁôºÈÄÅ AI ÈÖçÂ∞çÈÄöÁü•
     */
    static async sendAIMatchNotification(pet, matches) {
        const owner = await User_1.User.findById(pet.userId);
        const bestMatch = matches[0];
        const similarity = Math.round(bestMatch.similarity * 100);
        await notificationService_1.NotificationService.sendNotification({
            userId: owner._id.toString(),
            type: 'AI_MATCH_SUGGESTION',
            title: 'ü§ñ AI ÁôºÁèæÊΩõÂú®ÈÖçÂ∞ç',
            message: `AI ÁÇ∫ÊÇ®ÁöÑ${pet.status === 'lost' ? 'Â§±Ëπ§' : 'ÊãæÁç≤'}ÂØµÁâ© ${pet.name} ÊâæÂà∞‰∫Ü ${matches.length} ÂÄãÊΩõÂú®ÈÖçÂ∞çÔºåÊúÄÈ´òÁõ∏‰ººÂ∫¶ ${similarity}%`,
            data: {
                petId: pet._id.toString(),
                matchCount: matches.length,
                bestSimilarity: similarity,
                matches: matches.slice(0, 3).map(m => ({
                    petId: pet.status === 'lost' ? m.foundPet._id : m.lostPet._id,
                    similarity: Math.round(m.similarity * 100),
                    distance: Math.round(m.distance || 0)
                }))
            },
            priority: Notification_1.NotificationPriority.HIGH
        });
    }
    /**
     * ÊâãÂãïËß∏Áôº AI ÈÖçÂ∞çÊ™¢Êü•
     */
    static async triggerAIMatching(userId, petId) {
        try {
            let pets;
            if (petId) {
                const pet = await Pet_1.Pet.findOne({ _id: petId, owner: userId });
                if (!pet) {
                    throw new Error('ÂØµÁâ©‰∏çÂ≠òÂú®ÊàñÁÑ°Ê¨äÈôê');
                }
                pets = [pet];
            }
            else {
                pets = await Pet_1.Pet.find({
                    owner: userId,
                    status: { $in: ['lost', 'found'] }
                }).populate('owner');
            }
            let totalMatches = 0;
            let totalNotifications = 0;
            for (const pet of pets) {
                const result = await this.processSinglePetAIMatching(pet);
                totalMatches += result.matchesFound;
                totalNotifications += result.notificationsSent;
            }
            return {
                matchesFound: totalMatches,
                notificationsSent: totalNotifications,
                message: `Â∑≤Ê™¢Êü• ${pets.length} ÈöªÂØµÁâ©ÔºåÊâæÂà∞ ${totalMatches} ÂÄãÊΩõÂú®ÈÖçÂ∞çÔºåÁôºÈÄÅ ${totalNotifications} ÂÄãÈÄöÁü•`
            };
        }
        catch (error) {
            logger_1.logger.error('ÊâãÂãïËß∏Áôº AI ÈÖçÂ∞çÂ§±Êïó', { userId, petId, error });
            throw error;
        }
    }
    /**
     * Áç≤ÂèñÈÖçÁΩÆ
     */
    static getConfig() {
        return { ...this.config };
    }
    /**
     * Êõ¥Êñ∞ÈÖçÁΩÆ
     */
    static updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        // Â¶ÇÊûúÂïüÁî®ÁãÄÊÖãÊîπËÆäÔºåÈáçÊñ∞ÂïüÂãïÊàñÂÅúÊ≠¢ÊúçÂãô
        if (newConfig.enabled !== undefined) {
            this.stop();
            if (newConfig.enabled) {
                this.start();
            }
        }
        logger_1.logger.info('AI ÈÖçÂ∞çÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞', { config: this.config });
        return { ...this.config };
    }
    /**
     * Áç≤ÂèñÊúÄÂæåÈÅãË°åÊôÇÈñì
     */
    static getLastRun() {
        return this.lastRun;
    }
    /**
     * Áç≤ÂèñÈÅãË°åÁãÄÊÖã
     */
    static getStatus() {
        return {
            enabled: this.config.enabled,
            running: this.interval !== null,
            lastRun: this.lastRun,
            config: { ...this.config }
        };
    }
}
exports.AIMatchingService = AIMatchingService;
AIMatchingService.config = {
    enabled: true,
    minSimilarity: 0.75,
    checkInterval: 30, // 30 minutes
    maxDistance: 50 // 50km
};
AIMatchingService.interval = null;
AIMatchingService.lastRun = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,