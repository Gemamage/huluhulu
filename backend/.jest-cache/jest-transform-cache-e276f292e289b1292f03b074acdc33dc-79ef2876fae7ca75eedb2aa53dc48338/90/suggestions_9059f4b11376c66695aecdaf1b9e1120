9429f9cefa880b59b6cf7710876e6004
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchSuggestionsService = exports.SearchSuggestionsService = void 0;
const elasticsearchService_1 = require("../elasticsearchService");
const logger_1 = require("../../utils/logger");
const indexing_1 = require("./indexing");
/**
 * 搜尋建議服務
 * 負責處理自動完成、搜尋建議和相關推薦功能
 */
class SearchSuggestionsService {
    /**
     * 獲取搜尋建議
     */
    async getSearchSuggestions(query, limit = 5) {
        try {
            const response = await elasticsearchService_1.elasticsearchService.getClient().search({
                index: indexing_1.indexingService.getPetIndexName(),
                body: {
                    suggest: {
                        name_suggest: {
                            prefix: query,
                            completion: {
                                field: 'name.suggest',
                                size: limit
                            }
                        },
                        breed_suggest: {
                            prefix: query,
                            completion: {
                                field: 'breed.suggest',
                                size: limit
                            }
                        },
                        location_suggest: {
                            prefix: query,
                            completion: {
                                field: 'lastSeenLocation.suggest',
                                size: limit
                            }
                        }
                    }
                }
            });
            const suggestions = [];
            const suggest = response.body.suggest;
            // 處理名稱建議
            if (suggest.name_suggest && suggest.name_suggest[0]) {
                suggest.name_suggest[0].options.forEach((option) => {
                    suggestions.push({
                        text: option.text,
                        score: option._score,
                        type: 'name'
                    });
                });
            }
            // 處理品種建議
            if (suggest.breed_suggest && suggest.breed_suggest[0]) {
                suggest.breed_suggest[0].options.forEach((option) => {
                    suggestions.push({
                        text: option.text,
                        score: option._score,
                        type: 'breed'
                    });
                });
            }
            // 處理地點建議
            if (suggest.location_suggest && suggest.location_suggest[0]) {
                suggest.location_suggest[0].options.forEach((option) => {
                    suggestions.push({
                        text: option.text,
                        score: option._score,
                        type: 'location'
                    });
                });
            }
            // 去重並排序
            const uniqueSuggestions = suggestions
                .filter((suggestion, index, self) => index === self.findIndex(s => s.text === suggestion.text))
                .sort((a, b) => b.score - a.score)
                .slice(0, limit);
            return uniqueSuggestions;
        }
        catch (error) {
            logger_1.logger.error('獲取搜尋建議失敗:', error);
            return [];
        }
    }
    /**
     * 獲取分類建議
     */
    async getCategorySuggestions(category, query, limit = 10) {
        try {
            let field;
            switch (category) {
                case 'breed':
                    field = 'breed.suggest';
                    break;
                case 'location':
                    field = 'lastSeenLocation.suggest';
                    break;
                case 'type':
                    field = 'type';
                    break;
                default:
                    field = 'name.suggest';
            }
            const response = await elasticsearchService_1.elasticsearchService.getClient().search({
                index: indexing_1.indexingService.getPetIndexName(),
                body: {
                    suggest: {
                        category_suggest: {
                            prefix: query,
                            completion: {
                                field: field,
                                size: limit
                            }
                        }
                    }
                }
            });
            const suggestions = [];
            const suggest = response.body.suggest;
            if (suggest.category_suggest && suggest.category_suggest[0]) {
                suggest.category_suggest[0].options.forEach((option) => {
                    suggestions.push({
                        text: option.text,
                        score: option._score,
                        type: category
                    });
                });
            }
            return suggestions.sort((a, b) => b.score - a.score);
        }
        catch (error) {
            logger_1.logger.error(`獲取 ${category} 建議失敗:`, error);
            return [];
        }
    }
    /**
     * 獲取熱門搜尋詞
     */
    async getPopularSearches(limit = 10, category) {
        try {
            const query = {
                size: 0,
                aggs: {
                    popular_queries: {
                        terms: {
                            field: 'query.keyword',
                            size: limit,
                            order: { _count: 'desc' }
                        }
                    }
                }
            };
            // 如果指定了分類，添加篩選條件
            if (category) {
                query.query = {
                    bool: {
                        filter: [
                            { term: { 'filters.type': category } }
                        ]
                    }
                };
            }
            const response = await elasticsearchService_1.elasticsearchService.getClient().search({
                index: indexing_1.indexingService.getSearchAnalyticsIndexName(),
                body: query
            });
            const popularSearches = [];
            const aggs = response.body.aggregations;
            if (aggs && aggs.popular_queries) {
                aggs.popular_queries.buckets.forEach((bucket) => {
                    popularSearches.push({
                        query: bucket.key,
                        count: bucket.doc_count,
                        category
                    });
                });
            }
            return popularSearches;
        }
        catch (error) {
            logger_1.logger.error('獲取熱門搜尋詞失敗:', error);
            return [];
        }
    }
    /**
     * 獲取相關搜尋詞
     */
    async getRelatedSearches(query, limit = 5) {
        try {
            // 使用 more_like_this 查詢找到相關的搜尋記錄
            const response = await elasticsearchService_1.elasticsearchService.getClient().search({
                index: indexing_1.indexingService.getSearchAnalyticsIndexName(),
                body: {
                    query: {
                        more_like_this: {
                            fields: ['query'],
                            like: [query],
                            min_term_freq: 1,
                            max_query_terms: 5
                        }
                    },
                    aggs: {
                        related_queries: {
                            terms: {
                                field: 'query.keyword',
                                size: limit
                            }
                        }
                    },
                    size: 0
                }
            });
            const relatedSearches = [];
            const aggs = response.body.aggregations;
            if (aggs && aggs.related_queries) {
                aggs.related_queries.buckets.forEach((bucket) => {
                    if (bucket.key !== query) { // 排除原始查詢
                        relatedSearches.push({
                            text: bucket.key,
                            score: bucket.doc_count,
                            type: 'description'
                        });
                    }
                });
            }
            return relatedSearches.sort((a, b) => b.score - a.score);
        }
        catch (error) {
            logger_1.logger.error('獲取相關搜尋詞失敗:', error);
            return [];
        }
    }
    /**
     * 獲取搜尋歷史建議
     */
    async getUserSearchHistory(userId, limit = 10) {
        try {
            const response = await elasticsearchService_1.elasticsearchService.getClient().search({
                index: indexing_1.indexingService.getSearchAnalyticsIndexName(),
                body: {
                    query: {
                        term: { userId }
                    },
                    aggs: {
                        user_queries: {
                            terms: {
                                field: 'query.keyword',
                                size: limit,
                                order: { latest: 'desc' }
                            },
                            aggs: {
                                latest: {
                                    max: {
                                        field: 'timestamp'
                                    }
                                }
                            }
                        }
                    },
                    size: 0
                }
            });
            const searchHistory = [];
            const aggs = response.body.aggregations;
            if (aggs && aggs.user_queries) {
                aggs.user_queries.buckets.forEach((bucket) => {
                    searchHistory.push({
                        text: bucket.key,
                        score: bucket.doc_count,
                        type: 'description'
                    });
                });
            }
            return searchHistory;
        }
        catch (error) {
            logger_1.logger.error('獲取用戶搜尋歷史失敗:', error);
            return [];
        }
    }
    /**
     * 獲取智能建議（結合多種建議類型）
     */
    async getSmartSuggestions(query, userId, limit = 10) {
        try {
            const [autoComplete, popular, related, history] = await Promise.all([
                this.getSearchSuggestions(query, Math.ceil(limit / 2)),
                this.getPopularSearches(Math.ceil(limit / 3)),
                this.getRelatedSearches(query, Math.ceil(limit / 3)),
                userId ? this.getUserSearchHistory(userId, Math.ceil(limit / 4)) : Promise.resolve([])
            ]);
            return {
                autoComplete,
                popular,
                related,
                history: userId ? history : undefined
            };
        }
        catch (error) {
            logger_1.logger.error('獲取智能建議失敗:', error);
            return {
                autoComplete: [],
                popular: [],
                related: []
            };
        }
    }
    /**
     * 清理過期的搜尋建議緩存
     */
    async cleanupSuggestionCache(daysToKeep = 30) {
        try {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            const response = await elasticsearchService_1.elasticsearchService.getClient().deleteByQuery({
                index: indexing_1.indexingService.getSearchAnalyticsIndexName(),
                body: {
                    query: {
                        range: {
                            timestamp: {
                                lt: cutoffDate.toISOString()
                            }
                        }
                    }
                }
            });
            const deletedCount = response.body.deleted || 0;
            logger_1.logger.info(`清理了 ${deletedCount} 條過期搜尋記錄`);
            return { deletedCount };
        }
        catch (error) {
            logger_1.logger.error('清理搜尋建議緩存失敗:', error);
            return { deletedCount: 0 };
        }
    }
}
exports.SearchSuggestionsService = SearchSuggestionsService;
// 導出單例實例
exports.searchSuggestionsService = new SearchSuggestionsService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,