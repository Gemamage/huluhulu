{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\aiMatching.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\aiMatching.ts"],"sourcesContent":["import { NotificationService } from \"../notificationService\";\nimport { MatchingService } from \"../matchingService\";\nimport { Pet, IPet } from \"../../models/Pet\";\nimport { User, IUser } from \"../../models/User\";\nimport {\n  NotificationType,\n  NotificationPriority,\n} from \"../../models/Notification\";\nimport { logger } from \"../../utils/logger\";\n\nexport interface AIMatchingConfig {\n  enabled: boolean;\n  minSimilarity: number;\n  checkInterval: number; // in minutes\n  maxDistance: number; // in kilometers\n}\n\nexport class AIMatchingService {\n  private static config: AIMatchingConfig = {\n    enabled: true,\n    minSimilarity: 0.75,\n    checkInterval: 30, // 30 minutes\n    maxDistance: 50, // 50km\n  };\n\n  private static interval: NodeJS.Timeout | null = null;\n  private static lastRun: Date | null = null;\n\n  /**\n   * 初始化 AI 配對服務\n   */\n  static initialize(config?: Partial<AIMatchingConfig>): void {\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    this.start();\n    logger.info(\"AI 配對服務已初始化\", { config: this.config });\n  }\n\n  /**\n   * 啟動 AI 配對任務\n   */\n  static start(): void {\n    if (!this.config.enabled || this.interval) return;\n\n    const intervalMs = this.config.checkInterval * 60 * 1000;\n\n    this.interval = setInterval(async () => {\n      try {\n        await this.processAIMatching();\n      } catch (error) {\n        logger.error(\"AI 配對通知任務失敗\", { error });\n      }\n    }, intervalMs);\n\n    logger.info(\"AI 配對通知任務已啟動\", {\n      interval: this.config.checkInterval,\n    });\n  }\n\n  /**\n   * 停止 AI 配對任務\n   */\n  static stop(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n      logger.info(\"AI 配對通知任務已停止\");\n    }\n  }\n\n  /**\n   * 處理 AI 配對通知\n   */\n  private static async processAIMatching(): Promise<void> {\n    try {\n      this.lastRun = new Date();\n\n      // 獲取最近 24 小時內新增的寵物\n      const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n      const recentPets = await Pet.find({\n        createdAt: { $gte: yesterday },\n        status: { $in: [\"lost\", \"found\"] },\n        \"aiData.features\": { $exists: true, $ne: null },\n      }).populate(\"owner\");\n\n      for (const pet of recentPets) {\n        try {\n          await this.processSinglePetAIMatching(pet);\n        } catch (error) {\n          logger.error(\"處理寵物 AI 配對失敗\", {\n            petId: pet._id,\n            error,\n          });\n        }\n      }\n    } catch (error) {\n      logger.error(\"AI 配對處理失敗\", { error });\n    }\n  }\n\n  /**\n   * 處理單個寵物的 AI 配對\n   */\n  static async processSinglePetAIMatching(pet: IPet): Promise<{\n    matchesFound: number;\n    notificationsSent: number;\n  }> {\n    try {\n      const potentialMatches = await MatchingService.findPotentialMatches(\n        pet._id.toString(),\n        {\n          minSimilarity: this.config.minSimilarity,\n          maxDistance: this.config.maxDistance,\n          maxDays: 1, // 只檢查最近一天\n        },\n      );\n\n      if (potentialMatches.length > 0) {\n        // 發送 AI 配對通知\n        await this.sendAIMatchNotification(pet, potentialMatches);\n        return {\n          matchesFound: potentialMatches.length,\n          notificationsSent: 1,\n        };\n      }\n\n      return {\n        matchesFound: 0,\n        notificationsSent: 0,\n      };\n    } catch (error) {\n      logger.error(\"處理寵物 AI 配對失敗\", {\n        petId: pet._id,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 發送 AI 配對通知\n   */\n  private static async sendAIMatchNotification(\n    pet: IPet,\n    matches: any[],\n  ): Promise<void> {\n    const owner = (await User.findById(pet.userId)) as IUser;\n    const bestMatch = matches[0];\n    const similarity = Math.round(bestMatch.similarity * 100);\n\n    await NotificationService.sendNotification({\n      userId: owner._id.toString(),\n      type: \"AI_MATCH_SUGGESTION\" as NotificationType,\n      title: \"🤖 AI 發現潛在配對\",\n      message: `AI 為您的${pet.status === \"lost\" ? \"失蹤\" : \"拾獲\"}寵物 ${pet.name} 找到了 ${matches.length} 個潛在配對，最高相似度 ${similarity}%`,\n      data: {\n        petId: pet._id.toString(),\n        matchCount: matches.length,\n        bestSimilarity: similarity,\n        matches: matches.slice(0, 3).map((m) => ({\n          petId: pet.status === \"lost\" ? m.foundPet._id : m.lostPet._id,\n          similarity: Math.round(m.similarity * 100),\n          distance: Math.round(m.distance || 0),\n        })),\n      },\n      priority: NotificationPriority.HIGH,\n    });\n  }\n\n  /**\n   * 手動觸發 AI 配對檢查\n   */\n  static async triggerAIMatching(\n    userId: string,\n    petId?: string,\n  ): Promise<{\n    matchesFound: number;\n    notificationsSent: number;\n    message: string;\n  }> {\n    try {\n      let pets: IPet[];\n\n      if (petId) {\n        const pet = await Pet.findOne({ _id: petId, owner: userId });\n        if (!pet) {\n          throw new Error(\"寵物不存在或無權限\");\n        }\n        pets = [pet];\n      } else {\n        pets = await Pet.find({\n          owner: userId,\n          status: { $in: [\"lost\", \"found\"] },\n        }).populate(\"owner\");\n      }\n\n      let totalMatches = 0;\n      let totalNotifications = 0;\n\n      for (const pet of pets) {\n        const result = await this.processSinglePetAIMatching(pet);\n        totalMatches += result.matchesFound;\n        totalNotifications += result.notificationsSent;\n      }\n\n      return {\n        matchesFound: totalMatches,\n        notificationsSent: totalNotifications,\n        message: `已檢查 ${pets.length} 隻寵物，找到 ${totalMatches} 個潛在配對，發送 ${totalNotifications} 個通知`,\n      };\n    } catch (error) {\n      logger.error(\"手動觸發 AI 配對失敗\", { userId, petId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取配置\n   */\n  static getConfig(): AIMatchingConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * 更新配置\n   */\n  static updateConfig(newConfig: Partial<AIMatchingConfig>): AIMatchingConfig {\n    this.config = { ...this.config, ...newConfig };\n\n    // 如果啟用狀態改變，重新啟動或停止服務\n    if (newConfig.enabled !== undefined) {\n      this.stop();\n      if (newConfig.enabled) {\n        this.start();\n      }\n    }\n\n    logger.info(\"AI 配對配置已更新\", { config: this.config });\n    return { ...this.config };\n  }\n\n  /**\n   * 獲取最後運行時間\n   */\n  static getLastRun(): Date | null {\n    return this.lastRun;\n  }\n\n  /**\n   * 獲取運行狀態\n   */\n  static getStatus(): {\n    enabled: boolean;\n    running: boolean;\n    lastRun: Date | null;\n    config: AIMatchingConfig;\n  } {\n    return {\n      enabled: this.config.enabled,\n      running: this.interval !== null,\n      lastRun: this.lastRun,\n      config: { ...this.config },\n    };\n  }\n}\n"],"version":3}