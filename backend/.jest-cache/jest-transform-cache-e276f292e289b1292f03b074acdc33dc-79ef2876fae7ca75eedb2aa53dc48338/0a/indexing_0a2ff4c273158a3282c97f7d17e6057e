cf363a363574e18430dad734f1ecf729
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.indexingService = exports.IndexingService = void 0;
const elasticsearchService_1 = require("../elasticsearchService");
const logger_1 = require("../../utils/logger");
/**
 * 索引管理服務
 * 負責處理 Elasticsearch 索引的初始化、文檔的增刪改查等基本操作
 */
class IndexingService {
    constructor() {
        this.PET_INDEX = 'pets';
        this.SEARCH_ANALYTICS_INDEX = 'search_analytics';
    }
    /**
     * 初始化寵物搜尋索引
     */
    async initializePetIndex() {
        const mapping = {
            properties: {
                name: {
                    type: 'text',
                    analyzer: 'chinese_analyzer',
                    fields: {
                        keyword: { type: 'keyword' },
                        suggest: {
                            type: 'completion',
                            analyzer: 'simple'
                        }
                    }
                },
                type: { type: 'keyword' },
                breed: {
                    type: 'text',
                    analyzer: 'chinese_analyzer',
                    fields: {
                        keyword: { type: 'keyword' },
                        suggest: {
                            type: 'completion',
                            analyzer: 'simple'
                        }
                    }
                },
                gender: { type: 'keyword' },
                age: { type: 'integer' },
                color: {
                    type: 'text',
                    analyzer: 'chinese_analyzer',
                    fields: {
                        keyword: { type: 'keyword' }
                    }
                },
                size: { type: 'keyword' },
                status: { type: 'keyword' },
                description: {
                    type: 'text',
                    analyzer: 'chinese_analyzer'
                },
                lastSeenLocation: {
                    type: 'text',
                    analyzer: 'chinese_analyzer',
                    fields: {
                        keyword: { type: 'keyword' },
                        suggest: {
                            type: 'completion',
                            analyzer: 'simple'
                        }
                    }
                },
                location: {
                    type: 'geo_point'
                },
                lastSeenDate: { type: 'date' },
                contactInfo: {
                    properties: {
                        name: {
                            type: 'text',
                            analyzer: 'chinese_analyzer'
                        },
                        phone: { type: 'keyword' },
                        email: { type: 'keyword' }
                    }
                },
                images: { type: 'keyword' },
                reward: { type: 'integer' },
                isUrgent: { type: 'boolean' },
                microchipId: { type: 'keyword' },
                vaccinations: { type: 'keyword' },
                medicalConditions: { type: 'keyword' },
                specialMarks: {
                    type: 'text',
                    analyzer: 'chinese_analyzer'
                },
                personality: { type: 'keyword' },
                viewCount: { type: 'integer' },
                shareCount: { type: 'integer' },
                userId: { type: 'keyword' },
                aiTags: { type: 'keyword' },
                aiBreedPrediction: { type: 'keyword' },
                aiConfidence: { type: 'float' },
                createdAt: { type: 'date' },
                updatedAt: { type: 'date' }
            }
        };
        return await elasticsearchService_1.elasticsearchService.createIndex(this.PET_INDEX, mapping);
    }
    /**
     * 初始化搜尋分析索引
     */
    async initializeSearchAnalyticsIndex() {
        const mapping = {
            properties: {
                query: {
                    type: 'text',
                    analyzer: 'chinese_analyzer',
                    fields: {
                        keyword: { type: 'keyword' }
                    }
                },
                filters: {
                    properties: {
                        type: { type: 'keyword' },
                        status: { type: 'keyword' },
                        location: { type: 'keyword' },
                        breed: { type: 'keyword' },
                        size: { type: 'keyword' },
                        gender: { type: 'keyword' }
                    }
                },
                userId: { type: 'keyword' },
                resultCount: { type: 'integer' },
                timestamp: { type: 'date' },
                sessionId: { type: 'keyword' },
                userAgent: { type: 'text' },
                ipAddress: { type: 'ip' }
            }
        };
        return await elasticsearchService_1.elasticsearchService.createIndex(this.SEARCH_ANALYTICS_INDEX, mapping);
    }
    /**
     * 將寵物資料轉換為索引文檔格式
     */
    petToDocument(pet) {
        return {
            name: pet.name,
            type: pet.type,
            breed: pet.breed,
            gender: pet.gender,
            age: pet.age,
            color: pet.color,
            size: pet.size,
            status: pet.status,
            description: pet.description,
            lastSeenLocation: pet.lastSeenLocation,
            lastSeenDate: pet.lastSeenDate,
            contactInfo: pet.contactInfo,
            images: pet.images,
            reward: pet.reward,
            isUrgent: pet.isUrgent,
            microchipId: pet.microchipId,
            vaccinations: pet.vaccinations,
            medicalConditions: pet.medicalConditions,
            specialMarks: pet.specialMarks,
            personality: pet.personality,
            viewCount: pet.viewCount,
            shareCount: pet.shareCount,
            userId: pet.userId.toString(),
            aiTags: pet.aiTags,
            aiBreedPrediction: pet.aiBreedPrediction,
            aiConfidence: pet.aiConfidence,
            createdAt: pet.createdAt,
            updatedAt: pet.updatedAt
        };
    }
    /**
     * 索引寵物文檔
     */
    async indexPet(pet) {
        const document = this.petToDocument(pet);
        return await elasticsearchService_1.elasticsearchService.indexDocument(this.PET_INDEX, pet._id.toString(), document);
    }
    /**
     * 批量索引寵物文檔
     */
    async bulkIndexPets(pets) {
        const documents = pets.map(pet => ({
            id: pet._id.toString(),
            document: this.petToDocument(pet)
        }));
        return await elasticsearchService_1.elasticsearchService.bulkIndex(this.PET_INDEX, documents);
    }
    /**
     * 刪除寵物文檔
     */
    async deletePet(petId) {
        return await elasticsearchService_1.elasticsearchService.deleteDocument(this.PET_INDEX, petId);
    }
    /**
     * 更新寵物文檔
     */
    async updatePet(pet) {
        const document = {
            ...this.petToDocument(pet),
            updatedAt: new Date()
        };
        return await elasticsearchService_1.elasticsearchService.updateDocument(this.PET_INDEX, pet._id.toString(), document);
    }
    /**
     * 檢查索引是否存在
     */
    async indexExists(indexName) {
        try {
            const response = await elasticsearchService_1.elasticsearchService.getClient().indices.exists({
                index: indexName
            });
            return response.body;
        }
        catch (error) {
            logger_1.logger.error(`檢查索引 ${indexName} 是否存在失敗:`, error);
            return false;
        }
    }
    /**
     * 刪除索引
     */
    async deleteIndex(indexName) {
        try {
            await elasticsearchService_1.elasticsearchService.getClient().indices.delete({
                index: indexName
            });
            logger_1.logger.info(`索引 ${indexName} 已刪除`);
            return true;
        }
        catch (error) {
            logger_1.logger.error(`刪除索引 ${indexName} 失敗:`, error);
            return false;
        }
    }
    /**
     * 重建索引
     */
    async rebuildPetIndex() {
        try {
            // 刪除現有索引
            if (await this.indexExists(this.PET_INDEX)) {
                await this.deleteIndex(this.PET_INDEX);
            }
            // 重新創建索引
            const result = await this.initializePetIndex();
            if (result) {
                logger_1.logger.info('寵物索引重建成功');
            }
            else {
                logger_1.logger.error('寵物索引重建失敗');
            }
            return result;
        }
        catch (error) {
            logger_1.logger.error('重建寵物索引失敗:', error);
            return false;
        }
    }
    /**
     * 獲取索引統計信息
     */
    async getIndexStats(indexName) {
        try {
            const response = await elasticsearchService_1.elasticsearchService.getClient().indices.stats({
                index: indexName
            });
            return response.body;
        }
        catch (error) {
            logger_1.logger.error(`獲取索引 ${indexName} 統計信息失敗:`, error);
            return null;
        }
    }
    /**
     * 獲取寵物索引名稱
     */
    getPetIndexName() {
        return this.PET_INDEX;
    }
    /**
     * 獲取搜尋分析索引名稱
     */
    getSearchAnalyticsIndexName() {
        return this.SEARCH_ANALYTICS_INDEX;
    }
}
exports.IndexingService = IndexingService;
// 導出單例實例
exports.indexingService = new IndexingService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,