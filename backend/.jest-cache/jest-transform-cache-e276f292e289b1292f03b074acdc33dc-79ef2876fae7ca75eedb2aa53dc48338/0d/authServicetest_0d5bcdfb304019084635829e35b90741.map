{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\authService.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\authService.test.ts"],"sourcesContent":["import { UserService } from '../../src/services/userService';\nimport { User, IUser } from '../../src/models/User';\nimport jwt from 'jsonwebtoken';\nimport { config } from '../../src/config/environment';\nimport { validUserData } from '../utils/testData';\n\ndescribe('UserService - Authentication', () => {\n  let testUser: IUser;\n\n  beforeEach(async () => {\n    testUser = await new User(validUserData).save();\n  });\n\n  afterEach(async () => {\n    await User.deleteMany({});\n  });\n\n  describe('register', () => {\n    it('should register a new user successfully', async () => {\n      const newUserData = {\n        email: 'newuser@example.com',\n        password: 'password123',\n        name: 'New User',\n        phone: '+1987654321'\n      };\n\n      const result = await UserService.registerUser(newUserData);\n\n      expect(result.user).toBeDefined();\n      expect(result.user.email).toBe(newUserData.email);\n      expect(result.user.name).toBe(newUserData.name);\n      expect(result.token).toBeDefined();\n      \n      // 驗證密碼已被加密\n      const savedUser = await User.findOne({ email: newUserData.email });\n      expect(savedUser?.password).not.toBe(newUserData.password);\n    });\n\n    it('should not register user with existing email', async () => {\n      await expect(UserService.registerUser(validUserData))\n        .rejects\n        .toThrow('此電子郵件已被註冊');\n    });\n\n    it('should not register user with invalid email', async () => {\n      const invalidUserData = {\n        ...validUserData,\n        email: 'invalid-email'\n      };\n\n      await expect(UserService.registerUser(invalidUserData))\n        .rejects\n        .toThrow();\n    });\n\n    it('should not register user with weak password', async () => {\n      const weakPasswordData = {\n        ...validUserData,\n        email: 'weak@example.com',\n        password: '123'\n      };\n\n      await expect(UserService.registerUser(weakPasswordData))\n        .rejects\n        .toThrow();\n    });\n  });\n\n  describe('login', () => {\n    it('should login with valid credentials', async () => {\n      const result = await UserService.loginUser({\n        email: validUserData.email,\n        password: validUserData.password\n      });\n\n      expect(result.user).toBeDefined();\n      expect(result.user.email).toBe(validUserData.email);\n      expect(result.token).toBeDefined();\n      \n      // 驗證 JWT token\n      const decoded = jwt.verify(result.token, config.jwt.secret) as any;\n      expect(decoded.id).toBe(testUser._id.toString());\n    });\n\n    it('should not login with invalid email', async () => {\n      await expect(UserService.loginUser({\n        email: 'nonexistent@example.com',\n        password: validUserData.password\n      })).rejects.toThrow('電子郵件或密碼錯誤');\n    });\n\n    it('should not login with invalid password', async () => {\n      await expect(UserService.loginUser({\n        email: validUserData.email,\n        password: 'wrongpassword'\n      })).rejects.toThrow('電子郵件或密碼錯誤');\n    });\n\n    it('should not login inactive user', async () => {\n      testUser.isActive = false;\n      await testUser.save();\n\n      await expect(UserService.loginUser({\n        email: validUserData.email,\n        password: validUserData.password\n      })).rejects.toThrow('用戶帳號已被停用');\n    });\n\n    it('should update lastLoginAt on successful login', async () => {\n      const originalLastLogin = testUser.lastLoginAt;\n      \n      await UserService.loginUser({\n        email: validUserData.email,\n        password: validUserData.password\n      });\n\n      const updatedUser = await User.findById(testUser._id);\n      expect(updatedUser?.lastLoginAt).toBeDefined();\n      expect(updatedUser?.lastLoginAt?.getTime()).toBeGreaterThan(\n        originalLastLogin?.getTime() || 0\n      );\n    });\n  });\n\n  // Token 驗證功能通常在中間件中實現，不屬於 UserService 的職責範圍\n});"],"version":3}