{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\search.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\search.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { User, IUser } from '../../src/models/User';\nimport { SearchHistory } from '../../src/models/SearchHistory';\nimport { searchRoutes } from '../../src/routes/search';\nimport { auth } from '../../src/middleware/auth';\nimport { errorHandler } from '../../src/middleware/error-handler';\nimport { validUserData } from '../utils/testData';\n\n// 創建測試應用\nconst app = express();\napp.use(express.json());\napp.use('/api/search', auth, searchRoutes);\napp.use(errorHandler);\n\ndescribe('Search Routes', () => {\n  let testUser: IUser;\n  let authToken: string;\n  let inactiveUser: IUser;\n  let inactiveToken: string;\n\n  beforeEach(async () => {\n    await User.deleteMany({});\n    await SearchHistory.deleteMany({});\n\n    testUser = await new User({\n      ...validUserData,\n      isEmailVerified: true,\n      isActive: true\n    }).save();\n    authToken = testUser.generateAuthToken();\n\n    inactiveUser = await new User({\n      ...validUserData,\n      email: 'inactive@example.com',\n      isEmailVerified: true,\n      isActive: false\n    }).save();\n    inactiveToken = inactiveUser.generateAuthToken();\n\n    // Create some search history\n    await SearchHistory.create([\n      {\n        userId: testUser._id,\n        query: '黃金獵犬',\n        filters: { type: 'dog', status: 'lost' },\n        timestamp: new Date(Date.now() - 1000 * 60 * 60) // 1 hour ago\n      },\n      {\n        userId: testUser._id,\n        query: '波斯貓',\n        filters: { type: 'cat' },\n        timestamp: new Date(Date.now() - 1000 * 60 * 30) // 30 minutes ago\n      },\n      {\n        userId: testUser._id,\n        query: '拉布拉多',\n        filters: { type: 'dog', location: '台北' },\n        timestamp: new Date(Date.now() - 1000 * 60 * 10) // 10 minutes ago\n      }\n    ]);\n\n    // Create popular search data\n    await SearchHistory.create([\n      { userId: testUser._id, query: '黃金獵犬', timestamp: new Date() },\n      { userId: testUser._id, query: '黃金獵犬', timestamp: new Date() },\n      { userId: inactiveUser._id, query: '黃金獵犬', timestamp: new Date() },\n      { userId: testUser._id, query: '拉布拉多', timestamp: new Date() },\n      { userId: inactiveUser._id, query: '拉布拉多', timestamp: new Date() },\n      { userId: testUser._id, query: '波斯貓', timestamp: new Date() }\n    ]);\n  });\n\n  afterEach(async () => {\n    await User.deleteMany({});\n    await SearchHistory.deleteMany({});\n  });\n\n  describe('GET /api/search/history', () => {\n    it('should get user search history successfully', async () => {\n      const response = await request(app)\n        .get('/api/search/history')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(6); // 3 initial + 3 popular\n      expect(response.body.data[0].query).toBe('黃金獵犬'); // Most recent first\n      expect(response.body.data[0]).toHaveProperty('timestamp');\n      expect(response.body.data[0]).toHaveProperty('filters');\n    });\n\n    it('should support pagination', async () => {\n      const response = await request(app)\n        .get('/api/search/history?page=1&limit=2')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(2);\n      expect(response.body.pagination).toMatchObject({\n        currentPage: 1,\n        totalPages: expect.any(Number),\n        totalItems: expect.any(Number),\n        hasNext: true,\n        hasPrev: false\n      });\n    });\n\n    it('should filter by date range', async () => {\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n      \n      const response = await request(app)\n        .get(`/api/search/history?startDate=${oneHourAgo.toISOString()}&endDate=${now.toISOString()}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.length).toBeGreaterThan(0);\n      \n      // All results should be within the date range\n      response.body.data.forEach((item: any) => {\n        const itemDate = new Date(item.timestamp);\n        expect(itemDate.getTime()).toBeGreaterThanOrEqual(oneHourAgo.getTime());\n        expect(itemDate.getTime()).toBeLessThanOrEqual(now.getTime());\n      });\n    });\n\n    it('should search within history', async () => {\n      const response = await request(app)\n        .get('/api/search/history?search=黃金')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.length).toBeGreaterThan(0);\n      \n      // All results should contain the search term\n      response.body.data.forEach((item: any) => {\n        expect(item.query).toContain('黃金');\n      });\n    });\n\n    it('should return empty array for user with no history', async () => {\n      const newUser = await new User({\n        ...validUserData,\n        email: 'newuser@example.com',\n        isEmailVerified: true\n      }).save();\n      const newToken = newUser.generateAuthToken();\n\n      const response = await request(app)\n        .get('/api/search/history')\n        .set('Authorization', `Bearer ${newToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(0);\n    });\n\n    it('should return error for inactive user', async () => {\n      const response = await request(app)\n        .get('/api/search/history')\n        .set('Authorization', `Bearer ${inactiveToken}`)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('帳戶已被停用');\n    });\n\n    it('should return error without authentication', async () => {\n      const response = await request(app)\n        .get('/api/search/history')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('未提供認證令牌');\n    });\n\n    it('should validate pagination parameters', async () => {\n      const response = await request(app)\n        .get('/api/search/history?page=0&limit=101')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should validate date parameters', async () => {\n      const response = await request(app)\n        .get('/api/search/history?startDate=invalid-date')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n  });\n\n  describe('DELETE /api/search/history', () => {\n    it('should clear user search history successfully', async () => {\n      const response = await request(app)\n        .delete('/api/search/history')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toBe('搜尋歷史已清除');\n\n      // Verify history is cleared\n      const historyCount = await SearchHistory.countDocuments({ userId: testUser._id });\n      expect(historyCount).toBe(0);\n    });\n\n    it('should only clear current user history', async () => {\n      const otherUser = await new User({\n        ...validUserData,\n        email: 'other@example.com',\n        isEmailVerified: true\n      }).save();\n\n      await SearchHistory.create({\n        userId: otherUser._id,\n        query: '其他用戶搜尋',\n        timestamp: new Date()\n      });\n\n      const response = await request(app)\n        .delete('/api/search/history')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n\n      // Verify other user's history is not affected\n      const otherUserHistoryCount = await SearchHistory.countDocuments({ userId: otherUser._id });\n      expect(otherUserHistoryCount).toBe(1);\n\n      // Verify current user's history is cleared\n      const currentUserHistoryCount = await SearchHistory.countDocuments({ userId: testUser._id });\n      expect(currentUserHistoryCount).toBe(0);\n    });\n\n    it('should return success even if no history exists', async () => {\n      // Clear history first\n      await SearchHistory.deleteMany({ userId: testUser._id });\n\n      const response = await request(app)\n        .delete('/api/search/history')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toBe('搜尋歷史已清除');\n    });\n\n    it('should return error for inactive user', async () => {\n      const response = await request(app)\n        .delete('/api/search/history')\n        .set('Authorization', `Bearer ${inactiveToken}`)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('帳戶已被停用');\n    });\n\n    it('should return error without authentication', async () => {\n      const response = await request(app)\n        .delete('/api/search/history')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('未提供認證令牌');\n    });\n  });\n\n  describe('GET /api/search/popular', () => {\n    it('should get popular search terms successfully', async () => {\n      const response = await request(app)\n        .get('/api/search/popular')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeInstanceOf(Array);\n      expect(response.body.data.length).toBeGreaterThan(0);\n      \n      // Should be sorted by count (most popular first)\n      expect(response.body.data[0]).toMatchObject({\n        query: '黃金獵犬',\n        count: 3\n      });\n      expect(response.body.data[1]).toMatchObject({\n        query: '拉布拉多',\n        count: 2\n      });\n    });\n\n    it('should limit results by default', async () => {\n      const response = await request(app)\n        .get('/api/search/popular')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.length).toBeLessThanOrEqual(10); // Default limit\n    });\n\n    it('should support custom limit', async () => {\n      const response = await request(app)\n        .get('/api/search/popular?limit=2')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(2);\n    });\n\n    it('should filter by time period', async () => {\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      \n      const response = await request(app)\n        .get(`/api/search/popular?since=${oneDayAgo.toISOString()}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeInstanceOf(Array);\n    });\n\n    it('should return empty array when no popular searches', async () => {\n      await SearchHistory.deleteMany({});\n\n      const response = await request(app)\n        .get('/api/search/popular')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(0);\n    });\n\n    it('should validate limit parameter', async () => {\n      const response = await request(app)\n        .get('/api/search/popular?limit=101')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should validate since parameter', async () => {\n      const response = await request(app)\n        .get('/api/search/popular?since=invalid-date')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should return error for inactive user', async () => {\n      const response = await request(app)\n        .get('/api/search/popular')\n        .set('Authorization', `Bearer ${inactiveToken}`)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('帳戶已被停用');\n    });\n  });\n\n  describe('GET /api/search/suggestions', () => {\n    it('should get search suggestions successfully', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=黃')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeInstanceOf(Array);\n      expect(response.body.data.length).toBeGreaterThan(0);\n      \n      // All suggestions should contain the query\n      response.body.data.forEach((suggestion: string) => {\n        expect(suggestion).toContain('黃');\n      });\n    });\n\n    it('should return suggestions based on popular searches', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=拉')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toContain('拉布拉多');\n    });\n\n    it('should limit suggestions by default', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=a')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.length).toBeLessThanOrEqual(10); // Default limit\n    });\n\n    it('should support custom limit', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=黃&limit=3')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.length).toBeLessThanOrEqual(3);\n    });\n\n    it('should return empty array for no matches', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=xyz123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(0);\n    });\n\n    it('should require query parameter', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should validate query length', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should validate limit parameter', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=test&limit=101')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should return error for inactive user', async () => {\n      const response = await request(app)\n        .get('/api/search/suggestions?q=test')\n        .set('Authorization', `Bearer ${inactiveToken}`)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('帳戶已被停用');\n    });\n\n    it('should handle special characters in query', async () => {\n      const specialQueries = ['黃金@獵犬', '拉布拉多!', '波斯貓?'];\n      \n      for (const query of specialQueries) {\n        const response = await request(app)\n          .get(`/api/search/suggestions?q=${encodeURIComponent(query)}`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.data).toBeInstanceOf(Array);\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database errors in history endpoint', async () => {\n      // Mock SearchHistory.find to throw an error\n      const originalFind = SearchHistory.find;\n      SearchHistory.find = jest.fn().mockImplementation(() => {\n        throw new Error('Database error');\n      });\n\n      const response = await request(app)\n        .get('/api/search/history')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('伺服器內部錯誤');\n\n      // Restore original method\n      SearchHistory.find = originalFind;\n    });\n\n    it('should handle database errors in popular endpoint', async () => {\n      // Mock SearchHistory.aggregate to throw an error\n      const originalAggregate = SearchHistory.aggregate;\n      SearchHistory.aggregate = jest.fn().mockRejectedValue(new Error('Database error'));\n\n      const response = await request(app)\n        .get('/api/search/popular')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('伺服器內部錯誤');\n\n      // Restore original method\n      SearchHistory.aggregate = originalAggregate;\n    });\n\n    it('should handle database errors in clear history endpoint', async () => {\n      // Mock SearchHistory.deleteMany to throw an error\n      const originalDeleteMany = SearchHistory.deleteMany;\n      SearchHistory.deleteMany = jest.fn().mockRejectedValue(new Error('Database error'));\n\n      const response = await request(app)\n        .delete('/api/search/history')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('伺服器內部錯誤');\n\n      // Restore original method\n      SearchHistory.deleteMany = originalDeleteMany;\n    });\n  });\n\n  describe('Performance', () => {\n    it('should handle large search history efficiently', async () => {\n      // Create many search history entries\n      const manyEntries = Array.from({ length: 1000 }, (_, i) => ({\n        userId: testUser._id,\n        query: `搜尋 ${i}`,\n        timestamp: new Date(Date.now() - i * 1000)\n      }));\n      \n      await SearchHistory.insertMany(manyEntries);\n\n      const startTime = Date.now();\n      const response = await request(app)\n        .get('/api/search/history?limit=50')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n      const endTime = Date.now();\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(50);\n      expect(endTime - startTime).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n\n    it('should handle concurrent requests efficiently', async () => {\n      const requests = Array.from({ length: 10 }, () =>\n        request(app)\n          .get('/api/search/popular')\n          .set('Authorization', `Bearer ${authToken}`)\n      );\n\n      const startTime = Date.now();\n      const responses = await Promise.all(requests);\n      const endTime = Date.now();\n\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.body.success).toBe(true);\n      });\n\n      expect(endTime - startTime).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n  });\n});"],"version":3}