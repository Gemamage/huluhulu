cd1d83b08c181c4b282a2ca86cd5b98c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketService = exports.SocketEvents = void 0;
const socket_io_1 = require("socket.io");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const environment_1 = require("../config/environment");
const logger_1 = require("../utils/logger");
/**
 * Socket 事件類型
 */
var SocketEvents;
(function (SocketEvents) {
    // 連接相關
    SocketEvents["CONNECTION"] = "connection";
    SocketEvents["DISCONNECT"] = "disconnect";
    SocketEvents["JOIN_ROOM"] = "join_room";
    SocketEvents["LEAVE_ROOM"] = "leave_room";
    // 通知相關
    SocketEvents["NOTIFICATION"] = "notification";
    SocketEvents["NOTIFICATION_READ"] = "notification_read";
    SocketEvents["NOTIFICATION_DELIVERED"] = "notification_delivered";
    // 聊天相關
    SocketEvents["MESSAGE"] = "message";
    SocketEvents["MESSAGE_DELIVERED"] = "message_delivered";
    SocketEvents["MESSAGE_READ"] = "message_read";
    SocketEvents["TYPING_START"] = "typing_start";
    SocketEvents["TYPING_STOP"] = "typing_stop";
    // 寵物協尋相關
    SocketEvents["PET_STATUS_UPDATE"] = "pet_status_update";
    SocketEvents["MATCH_FOUND"] = "match_found";
    // 系統相關
    SocketEvents["SYSTEM_ANNOUNCEMENT"] = "system_announcement";
    SocketEvents["USER_ONLINE"] = "user_online";
    SocketEvents["USER_OFFLINE"] = "user_offline";
})(SocketEvents || (exports.SocketEvents = SocketEvents = {}));
/**
 * Socket 服務類別
 */
class SocketService {
    /**
     * 初始化 Socket.IO 服務
     */
    static initialize(httpServer) {
        this.io = new socket_io_1.Server(httpServer, {
            cors: {
                origin: environment_1.config.cors.allowedOrigins,
                methods: ['GET', 'POST'],
                credentials: true,
            },
            transports: ['websocket', 'polling'],
        });
        // 中介軟體：驗證 JWT Token
        this.io.use(async (socket, next) => {
            try {
                const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.replace('Bearer ', '');
                if (!token) {
                    return next(new Error('未提供認證 token'));
                }
                const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);
                socket.data.userId = decoded.userId;
                socket.data.user = decoded;
                next();
            }
            catch (error) {
                logger_1.logger.error('Socket 認證失敗', { error });
                next(new Error('認證失敗'));
            }
        });
        // 處理連接事件
        this.io.on(SocketEvents.CONNECTION, (socket) => {
            this.handleConnection(socket);
        });
        logger_1.logger.info('Socket.IO 服務初始化成功');
        return this.io;
    }
    /**
     * 處理用戶連接
     */
    static handleConnection(socket) {
        const userId = socket.data.userId;
        const socketInfo = {
            userId,
            socketId: socket.id,
            connectedAt: new Date(),
            lastActivity: new Date(),
        };
        // 記錄用戶 socket 連接
        if (!this.userSockets.has(userId)) {
            this.userSockets.set(userId, []);
        }
        this.userSockets.get(userId).push(socketInfo);
        this.socketUsers.set(socket.id, userId);
        // 加入用戶個人房間
        socket.join(`user:${userId}`);
        logger_1.logger.info('用戶連接成功', {
            userId,
            socketId: socket.id,
            totalConnections: this.userSockets.get(userId).length,
        });
        // 通知其他用戶該用戶上線
        socket.broadcast.emit(SocketEvents.USER_ONLINE, {
            userId,
            timestamp: new Date(),
        });
        // 處理加入房間
        socket.on(SocketEvents.JOIN_ROOM, (roomId) => {
            socket.join(roomId);
            logger_1.logger.debug('用戶加入房間', { userId, socketId: socket.id, roomId });
        });
        // 處理離開房間
        socket.on(SocketEvents.LEAVE_ROOM, (roomId) => {
            socket.leave(roomId);
            logger_1.logger.debug('用戶離開房間', { userId, socketId: socket.id, roomId });
        });
        // 處理通知已讀
        socket.on(SocketEvents.NOTIFICATION_READ, (notificationId) => {
            this.handleNotificationRead(userId, notificationId);
        });
        // 處理通知送達確認
        socket.on(SocketEvents.NOTIFICATION_DELIVERED, (notificationId) => {
            this.handleNotificationDelivered(userId, notificationId);
        });
        // 處理訊息相關事件
        socket.on(SocketEvents.MESSAGE, (data) => {
            this.handleMessage(socket, data);
        });
        socket.on(SocketEvents.MESSAGE_READ, (data) => {
            this.handleMessageRead(socket, data);
        });
        socket.on(SocketEvents.TYPING_START, (data) => {
            this.handleTyping(socket, data, true);
        });
        socket.on(SocketEvents.TYPING_STOP, (data) => {
            this.handleTyping(socket, data, false);
        });
        // 處理斷線
        socket.on(SocketEvents.DISCONNECT, (reason) => {
            this.handleDisconnection(socket, reason);
        });
        // 更新最後活動時間
        socket.onAny(() => {
            this.updateLastActivity(userId, socket.id);
        });
    }
    /**
     * 處理用戶斷線
     */
    static handleDisconnection(socket, reason) {
        const userId = this.socketUsers.get(socket.id);
        if (userId) {
            // 移除 socket 記錄
            const userSocketList = this.userSockets.get(userId);
            if (userSocketList) {
                const index = userSocketList.findIndex(info => info.socketId === socket.id);
                if (index !== -1) {
                    userSocketList.splice(index, 1);
                }
                // 如果用戶沒有其他連接，則清理記錄並通知下線
                if (userSocketList.length === 0) {
                    this.userSockets.delete(userId);
                    socket.broadcast.emit(SocketEvents.USER_OFFLINE, {
                        userId,
                        timestamp: new Date(),
                    });
                }
            }
            this.socketUsers.delete(socket.id);
            logger_1.logger.info('用戶斷線', {
                userId,
                socketId: socket.id,
                reason,
                remainingConnections: this.userSockets.get(userId)?.length || 0,
            });
        }
    }
    /**
     * 發送即時通知給特定用戶
     */
    static async sendNotificationToUser(userId, notification) {
        try {
            if (!this.io) {
                logger_1.logger.warn('Socket.IO 尚未初始化');
                return false;
            }
            const room = `user:${userId}`;
            this.io.to(room).emit(SocketEvents.NOTIFICATION, notification);
            logger_1.logger.debug('即時通知已發送', {
                userId,
                notificationId: notification.id,
                type: notification.type,
                title: notification.title,
            });
            return true;
        }
        catch (error) {
            logger_1.logger.error('發送即時通知失敗', { error, userId, notificationId: notification.id });
            return false;
        }
    }
    /**
     * 發送即時通知給多個用戶
     */
    static async sendNotificationToUsers(userIds, notification) {
        let successCount = 0;
        let failureCount = 0;
        for (const userId of userIds) {
            const success = await this.sendNotificationToUser(userId, notification);
            if (success) {
                successCount++;
            }
            else {
                failureCount++;
            }
        }
        return { successCount, failureCount };
    }
    /**
     * 廣播系統公告
     */
    static broadcastSystemAnnouncement(announcement) {
        if (!this.io) {
            logger_1.logger.warn('Socket.IO 尚未初始化');
            return;
        }
        this.io.emit(SocketEvents.SYSTEM_ANNOUNCEMENT, {
            ...announcement,
            timestamp: new Date(),
        });
        logger_1.logger.info('系統公告已廣播', { title: announcement.title });
    }
    /**
     * 發送寵物狀態更新
     */
    static sendPetStatusUpdate(userId, petId, status, message) {
        if (!this.io) {
            logger_1.logger.warn('Socket.IO 尚未初始化');
            return;
        }
        const room = `user:${userId}`;
        this.io.to(room).emit(SocketEvents.PET_STATUS_UPDATE, {
            petId,
            status,
            message,
            timestamp: new Date(),
        });
        logger_1.logger.debug('寵物狀態更新已發送', { userId, petId, status });
    }
    /**
     * 檢查用戶是否在線
     */
    static isUserOnline(userId) {
        return this.userSockets.has(userId) && this.userSockets.get(userId).length > 0;
    }
    /**
     * 取得在線用戶列表
     */
    static getOnlineUsers() {
        return Array.from(this.userSockets.keys());
    }
    /**
     * 取得用戶連接數
     */
    static getUserConnectionCount(userId) {
        return this.userSockets.get(userId)?.length || 0;
    }
    /**
     * 處理通知已讀
     */
    static handleNotificationRead(userId, notificationId) {
        logger_1.logger.debug('通知已讀', { userId, notificationId });
        // 這裡可以更新資料庫中的通知狀態
    }
    /**
     * 處理通知送達確認
     */
    static handleNotificationDelivered(userId, notificationId) {
        logger_1.logger.debug('通知送達確認', { userId, notificationId });
        // 這裡可以更新資料庫中的通知送達狀態
    }
    /**
     * 處理訊息
     */
    static handleMessage(socket, data) {
        const userId = socket.data.userId;
        logger_1.logger.debug('收到訊息', { userId, messageData: data });
        // 轉發訊息給目標用戶
        if (data.targetUserId) {
            const targetRoom = `user:${data.targetUserId}`;
            socket.to(targetRoom).emit(SocketEvents.MESSAGE, {
                ...data,
                fromUserId: userId,
                timestamp: new Date(),
            });
        }
    }
    /**
     * 處理訊息已讀
     */
    static handleMessageRead(socket, data) {
        const userId = socket.data.userId;
        logger_1.logger.debug('訊息已讀', { userId, messageData: data });
        // 通知發送者訊息已被讀取
        if (data.fromUserId) {
            const senderRoom = `user:${data.fromUserId}`;
            socket.to(senderRoom).emit(SocketEvents.MESSAGE_READ, {
                messageId: data.messageId,
                readBy: userId,
                timestamp: new Date(),
            });
        }
    }
    /**
     * 處理輸入狀態
     */
    static handleTyping(socket, data, isTyping) {
        const userId = socket.data.userId;
        if (data.targetUserId) {
            const targetRoom = `user:${data.targetUserId}`;
            const event = isTyping ? SocketEvents.TYPING_START : SocketEvents.TYPING_STOP;
            socket.to(targetRoom).emit(event, {
                fromUserId: userId,
                timestamp: new Date(),
            });
        }
    }
    /**
     * 更新最後活動時間
     */
    static updateLastActivity(userId, socketId) {
        const userSocketList = this.userSockets.get(userId);
        if (userSocketList) {
            const socketInfo = userSocketList.find(info => info.socketId === socketId);
            if (socketInfo) {
                socketInfo.lastActivity = new Date();
            }
        }
    }
    /**
     * 清理非活躍連接
     */
    static cleanupInactiveConnections(inactiveThresholdMinutes = 30) {
        const threshold = new Date(Date.now() - inactiveThresholdMinutes * 60 * 1000);
        let cleanedCount = 0;
        for (const [userId, socketList] of this.userSockets.entries()) {
            const activeConnections = socketList.filter(info => info.lastActivity > threshold);
            if (activeConnections.length !== socketList.length) {
                const inactiveConnections = socketList.filter(info => info.lastActivity <= threshold);
                // 斷開非活躍連接
                inactiveConnections.forEach(info => {
                    const socket = this.io?.sockets.sockets.get(info.socketId);
                    if (socket) {
                        socket.disconnect(true);
                        cleanedCount++;
                    }
                });
                // 更新記錄
                if (activeConnections.length > 0) {
                    this.userSockets.set(userId, activeConnections);
                }
                else {
                    this.userSockets.delete(userId);
                }
            }
        }
        if (cleanedCount > 0) {
            logger_1.logger.info('清理非活躍連接完成', { cleanedCount, thresholdMinutes: inactiveThresholdMinutes });
        }
    }
    /**
     * 取得服務統計資訊
     */
    static getStats() {
        const totalConnections = Array.from(this.userSockets.values())
            .reduce((sum, connections) => sum + connections.length, 0);
        const onlineUsers = this.userSockets.size;
        const averageConnectionsPerUser = onlineUsers > 0 ? totalConnections / onlineUsers : 0;
        return {
            totalConnections,
            onlineUsers,
            averageConnectionsPerUser: Math.round(averageConnectionsPerUser * 100) / 100,
        };
    }
}
exports.SocketService = SocketService;
SocketService.io = null;
SocketService.userSockets = new Map(); // userId -> socket info array
SocketService.socketUsers = new Map(); // socketId -> userId
//# sourceMappingURL=data:application/json;charset=utf-8;base64,