c223ee0da76ea10cd032ef63461f5f7d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const userService_1 = require("../../src/services/userService");
const User_1 = require("../../src/models/User");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const environment_1 = require("../../src/config/environment");
const testData_1 = require("../utils/testData");
describe('UserService - Authentication', () => {
    let testUser;
    beforeEach(async () => {
        testUser = await new User_1.User(testData_1.validUserData).save();
    });
    afterEach(async () => {
        await User_1.User.deleteMany({});
    });
    describe('register', () => {
        it('should register a new user successfully', async () => {
            const newUserData = {
                email: 'newuser@example.com',
                password: 'password123',
                name: 'New User',
                phone: '+1987654321'
            };
            const result = await userService_1.UserService.registerUser(newUserData);
            expect(result.user).toBeDefined();
            expect(result.user.email).toBe(newUserData.email);
            expect(result.user.name).toBe(newUserData.name);
            expect(result.token).toBeDefined();
            // 驗證密碼已被加密
            const savedUser = await User_1.User.findOne({ email: newUserData.email });
            expect(savedUser?.password).not.toBe(newUserData.password);
        });
        it('should not register user with existing email', async () => {
            await expect(userService_1.UserService.registerUser(testData_1.validUserData))
                .rejects
                .toThrow('此電子郵件已被註冊');
        });
        it('should not register user with invalid email', async () => {
            const invalidUserData = {
                ...testData_1.validUserData,
                email: 'invalid-email'
            };
            await expect(userService_1.UserService.registerUser(invalidUserData))
                .rejects
                .toThrow();
        });
        it('should not register user with weak password', async () => {
            const weakPasswordData = {
                ...testData_1.validUserData,
                email: 'weak@example.com',
                password: '123'
            };
            await expect(userService_1.UserService.registerUser(weakPasswordData))
                .rejects
                .toThrow();
        });
    });
    describe('login', () => {
        it('should login with valid credentials', async () => {
            const result = await userService_1.UserService.loginUser({
                email: testData_1.validUserData.email,
                password: testData_1.validUserData.password
            });
            expect(result.user).toBeDefined();
            expect(result.user.email).toBe(testData_1.validUserData.email);
            expect(result.token).toBeDefined();
            // 驗證 JWT token
            const decoded = jsonwebtoken_1.default.verify(result.token, environment_1.config.jwt.secret);
            expect(decoded.id).toBe(testUser._id.toString());
        });
        it('should not login with invalid email', async () => {
            await expect(userService_1.UserService.loginUser({
                email: 'nonexistent@example.com',
                password: testData_1.validUserData.password
            })).rejects.toThrow('電子郵件或密碼錯誤');
        });
        it('should not login with invalid password', async () => {
            await expect(userService_1.UserService.loginUser({
                email: testData_1.validUserData.email,
                password: 'wrongpassword'
            })).rejects.toThrow('電子郵件或密碼錯誤');
        });
        it('should not login inactive user', async () => {
            testUser.isActive = false;
            await testUser.save();
            await expect(userService_1.UserService.loginUser({
                email: testData_1.validUserData.email,
                password: testData_1.validUserData.password
            })).rejects.toThrow('用戶帳號已被停用');
        });
        it('should update lastLoginAt on successful login', async () => {
            const originalLastLogin = testUser.lastLoginAt;
            await userService_1.UserService.loginUser({
                email: testData_1.validUserData.email,
                password: testData_1.validUserData.password
            });
            const updatedUser = await User_1.User.findById(testUser._id);
            expect(updatedUser?.lastLoginAt).toBeDefined();
            expect(updatedUser?.lastLoginAt?.getTime()).toBeGreaterThan(originalLastLogin?.getTime() || 0);
        });
    });
    // Token 驗證功能通常在中間件中實現，不屬於 UserService 的職責範圍
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,