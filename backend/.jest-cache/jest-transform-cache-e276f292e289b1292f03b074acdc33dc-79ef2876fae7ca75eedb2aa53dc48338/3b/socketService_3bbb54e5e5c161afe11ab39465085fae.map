{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\socketService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\socketService.ts"],"sourcesContent":["import { Server as SocketIOServer, Socket } from \"socket.io\";\nimport { Server as HTTPServer } from \"http\";\nimport jwt from \"jsonwebtoken\";\nimport { config } from \"../config/environment\";\nimport { logger } from \"../utils/logger\";\nimport { NotificationType, NotificationPriority } from \"../models/Notification\";\n\n/**\n * Socket 事件類型\n */\nexport enum SocketEvents {\n  // 連接相關\n  CONNECTION = \"connection\",\n  DISCONNECT = \"disconnect\",\n  JOIN_ROOM = \"join_room\",\n  LEAVE_ROOM = \"leave_room\",\n\n  // 通知相關\n  NOTIFICATION = \"notification\",\n  NOTIFICATION_READ = \"notification_read\",\n  NOTIFICATION_DELIVERED = \"notification_delivered\",\n\n  // 聊天相關\n  MESSAGE = \"message\",\n  MESSAGE_DELIVERED = \"message_delivered\",\n  MESSAGE_READ = \"message_read\",\n  TYPING_START = \"typing_start\",\n  TYPING_STOP = \"typing_stop\",\n\n  // 寵物協尋相關\n  PET_STATUS_UPDATE = \"pet_status_update\",\n  MATCH_FOUND = \"match_found\",\n\n  // 系統相關\n  SYSTEM_ANNOUNCEMENT = \"system_announcement\",\n  USER_ONLINE = \"user_online\",\n  USER_OFFLINE = \"user_offline\",\n}\n\n/**\n * 即時通知資料介面\n */\nexport interface RealtimeNotificationData {\n  id: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  priority: NotificationPriority;\n  data?: any;\n  timestamp: Date;\n  actionUrl?: string;\n  imageUrl?: string;\n}\n\n/**\n * 使用者 Socket 資訊\n */\ninterface UserSocketInfo {\n  userId: string;\n  socketId: string;\n  connectedAt: Date;\n  lastActivity: Date;\n}\n\n/**\n * Socket 服務類別\n */\nexport class SocketService {\n  private static io: SocketIOServer | null = null;\n  private static userSockets = new Map<string, UserSocketInfo[]>(); // userId -> socket info array\n  private static socketUsers = new Map<string, string>(); // socketId -> userId\n\n  /**\n   * 初始化 Socket.IO 服務\n   */\n  static initialize(httpServer: HTTPServer): SocketIOServer {\n    this.io = new SocketIOServer(httpServer, {\n      cors: {\n        origin: config.cors.allowedOrigins,\n        methods: [\"GET\", \"POST\"],\n        credentials: true,\n      },\n      transports: [\"websocket\", \"polling\"],\n    });\n\n    // 中介軟體：驗證 JWT Token\n    this.io.use(async (socket, next) => {\n      try {\n        const token =\n          socket.handshake.auth.token ||\n          socket.handshake.headers.authorization?.replace(\"Bearer \", \"\");\n\n        if (!token) {\n          return next(new Error(\"未提供認證 token\"));\n        }\n\n        const decoded = jwt.verify(token, config.jwt.secret) as any;\n        socket.data.userId = decoded.userId;\n        socket.data.user = decoded;\n\n        next();\n      } catch (error) {\n        logger.error(\"Socket 認證失敗\", { error });\n        next(new Error(\"認證失敗\"));\n      }\n    });\n\n    // 處理連接事件\n    this.io.on(SocketEvents.CONNECTION, (socket: Socket) => {\n      this.handleConnection(socket);\n    });\n\n    logger.info(\"Socket.IO 服務初始化成功\");\n    return this.io;\n  }\n\n  /**\n   * 處理用戶連接\n   */\n  private static handleConnection(socket: Socket): void {\n    const userId = socket.data.userId;\n    const socketInfo: UserSocketInfo = {\n      userId,\n      socketId: socket.id,\n      connectedAt: new Date(),\n      lastActivity: new Date(),\n    };\n\n    // 記錄用戶 socket 連接\n    if (!this.userSockets.has(userId)) {\n      this.userSockets.set(userId, []);\n    }\n    this.userSockets.get(userId)!.push(socketInfo);\n    this.socketUsers.set(socket.id, userId);\n\n    // 加入用戶個人房間\n    socket.join(`user:${userId}`);\n\n    logger.info(\"用戶連接成功\", {\n      userId,\n      socketId: socket.id,\n      totalConnections: this.userSockets.get(userId)!.length,\n    });\n\n    // 通知其他用戶該用戶上線\n    socket.broadcast.emit(SocketEvents.USER_ONLINE, {\n      userId,\n      timestamp: new Date(),\n    });\n\n    // 處理加入房間\n    socket.on(SocketEvents.JOIN_ROOM, (roomId: string) => {\n      socket.join(roomId);\n      logger.debug(\"用戶加入房間\", { userId, socketId: socket.id, roomId });\n    });\n\n    // 處理離開房間\n    socket.on(SocketEvents.LEAVE_ROOM, (roomId: string) => {\n      socket.leave(roomId);\n      logger.debug(\"用戶離開房間\", { userId, socketId: socket.id, roomId });\n    });\n\n    // 處理通知已讀\n    socket.on(SocketEvents.NOTIFICATION_READ, (notificationId: string) => {\n      this.handleNotificationRead(userId, notificationId);\n    });\n\n    // 處理通知送達確認\n    socket.on(SocketEvents.NOTIFICATION_DELIVERED, (notificationId: string) => {\n      this.handleNotificationDelivered(userId, notificationId);\n    });\n\n    // 處理訊息相關事件\n    socket.on(SocketEvents.MESSAGE, (data: any) => {\n      this.handleMessage(socket, data);\n    });\n\n    socket.on(SocketEvents.MESSAGE_READ, (data: any) => {\n      this.handleMessageRead(socket, data);\n    });\n\n    socket.on(SocketEvents.TYPING_START, (data: any) => {\n      this.handleTyping(socket, data, true);\n    });\n\n    socket.on(SocketEvents.TYPING_STOP, (data: any) => {\n      this.handleTyping(socket, data, false);\n    });\n\n    // 處理斷線\n    socket.on(SocketEvents.DISCONNECT, (reason: string) => {\n      this.handleDisconnection(socket, reason);\n    });\n\n    // 更新最後活動時間\n    socket.onAny(() => {\n      this.updateLastActivity(userId, socket.id);\n    });\n  }\n\n  /**\n   * 處理用戶斷線\n   */\n  private static handleDisconnection(socket: Socket, reason: string): void {\n    const userId = this.socketUsers.get(socket.id);\n\n    if (userId) {\n      // 移除 socket 記錄\n      const userSocketList = this.userSockets.get(userId);\n      if (userSocketList) {\n        const index = userSocketList.findIndex(\n          (info) => info.socketId === socket.id,\n        );\n        if (index !== -1) {\n          userSocketList.splice(index, 1);\n        }\n\n        // 如果用戶沒有其他連接，則清理記錄並通知下線\n        if (userSocketList.length === 0) {\n          this.userSockets.delete(userId);\n          socket.broadcast.emit(SocketEvents.USER_OFFLINE, {\n            userId,\n            timestamp: new Date(),\n          });\n        }\n      }\n\n      this.socketUsers.delete(socket.id);\n\n      logger.info(\"用戶斷線\", {\n        userId,\n        socketId: socket.id,\n        reason,\n        remainingConnections: this.userSockets.get(userId)?.length || 0,\n      });\n    }\n  }\n\n  /**\n   * 發送即時通知給特定用戶\n   */\n  static async sendNotificationToUser(\n    userId: string,\n    notification: RealtimeNotificationData,\n  ): Promise<boolean> {\n    try {\n      if (!this.io) {\n        logger.warn(\"Socket.IO 尚未初始化\");\n        return false;\n      }\n\n      const room = `user:${userId}`;\n      this.io.to(room).emit(SocketEvents.NOTIFICATION, notification);\n\n      logger.debug(\"即時通知已發送\", {\n        userId,\n        notificationId: notification.id,\n        type: notification.type,\n        title: notification.title,\n      });\n\n      return true;\n    } catch (error) {\n      logger.error(\"發送即時通知失敗\", {\n        error,\n        userId,\n        notificationId: notification.id,\n      });\n      return false;\n    }\n  }\n\n  /**\n   * 發送即時通知給多個用戶\n   */\n  static async sendNotificationToUsers(\n    userIds: string[],\n    notification: RealtimeNotificationData,\n  ): Promise<{ successCount: number; failureCount: number }> {\n    let successCount = 0;\n    let failureCount = 0;\n\n    for (const userId of userIds) {\n      const success = await this.sendNotificationToUser(userId, notification);\n      if (success) {\n        successCount++;\n      } else {\n        failureCount++;\n      }\n    }\n\n    return { successCount, failureCount };\n  }\n\n  /**\n   * 廣播系統公告\n   */\n  static broadcastSystemAnnouncement(announcement: {\n    title: string;\n    message: string;\n    priority: NotificationPriority;\n    actionUrl?: string;\n  }): void {\n    if (!this.io) {\n      logger.warn(\"Socket.IO 尚未初始化\");\n      return;\n    }\n\n    this.io.emit(SocketEvents.SYSTEM_ANNOUNCEMENT, {\n      ...announcement,\n      timestamp: new Date(),\n    });\n\n    logger.info(\"系統公告已廣播\", { title: announcement.title });\n  }\n\n  /**\n   * 發送寵物狀態更新\n   */\n  static sendPetStatusUpdate(\n    userId: string,\n    petId: string,\n    status: string,\n    message: string,\n  ): void {\n    if (!this.io) {\n      logger.warn(\"Socket.IO 尚未初始化\");\n      return;\n    }\n\n    const room = `user:${userId}`;\n    this.io.to(room).emit(SocketEvents.PET_STATUS_UPDATE, {\n      petId,\n      status,\n      message,\n      timestamp: new Date(),\n    });\n\n    logger.debug(\"寵物狀態更新已發送\", { userId, petId, status });\n  }\n\n  /**\n   * 檢查用戶是否在線\n   */\n  static isUserOnline(userId: string): boolean {\n    return (\n      this.userSockets.has(userId) && this.userSockets.get(userId)!.length > 0\n    );\n  }\n\n  /**\n   * 取得在線用戶列表\n   */\n  static getOnlineUsers(): string[] {\n    return Array.from(this.userSockets.keys());\n  }\n\n  /**\n   * 取得用戶連接數\n   */\n  static getUserConnectionCount(userId: string): number {\n    return this.userSockets.get(userId)?.length || 0;\n  }\n\n  /**\n   * 處理通知已讀\n   */\n  private static handleNotificationRead(\n    userId: string,\n    notificationId: string,\n  ): void {\n    logger.debug(\"通知已讀\", { userId, notificationId });\n    // 這裡可以更新資料庫中的通知狀態\n  }\n\n  /**\n   * 處理通知送達確認\n   */\n  private static handleNotificationDelivered(\n    userId: string,\n    notificationId: string,\n  ): void {\n    logger.debug(\"通知送達確認\", { userId, notificationId });\n    // 這裡可以更新資料庫中的通知送達狀態\n  }\n\n  /**\n   * 處理訊息\n   */\n  private static handleMessage(socket: Socket, data: any): void {\n    const userId = socket.data.userId;\n    logger.debug(\"收到訊息\", { userId, messageData: data });\n\n    // 轉發訊息給目標用戶\n    if (data.targetUserId) {\n      const targetRoom = `user:${data.targetUserId}`;\n      socket.to(targetRoom).emit(SocketEvents.MESSAGE, {\n        ...data,\n        fromUserId: userId,\n        timestamp: new Date(),\n      });\n    }\n  }\n\n  /**\n   * 處理訊息已讀\n   */\n  private static handleMessageRead(socket: Socket, data: any): void {\n    const userId = socket.data.userId;\n    logger.debug(\"訊息已讀\", { userId, messageData: data });\n\n    // 通知發送者訊息已被讀取\n    if (data.fromUserId) {\n      const senderRoom = `user:${data.fromUserId}`;\n      socket.to(senderRoom).emit(SocketEvents.MESSAGE_READ, {\n        messageId: data.messageId,\n        readBy: userId,\n        timestamp: new Date(),\n      });\n    }\n  }\n\n  /**\n   * 處理輸入狀態\n   */\n  private static handleTyping(\n    socket: Socket,\n    data: any,\n    isTyping: boolean,\n  ): void {\n    const userId = socket.data.userId;\n\n    if (data.targetUserId) {\n      const targetRoom = `user:${data.targetUserId}`;\n      const event = isTyping\n        ? SocketEvents.TYPING_START\n        : SocketEvents.TYPING_STOP;\n\n      socket.to(targetRoom).emit(event, {\n        fromUserId: userId,\n        timestamp: new Date(),\n      });\n    }\n  }\n\n  /**\n   * 更新最後活動時間\n   */\n  private static updateLastActivity(userId: string, socketId: string): void {\n    const userSocketList = this.userSockets.get(userId);\n    if (userSocketList) {\n      const socketInfo = userSocketList.find(\n        (info) => info.socketId === socketId,\n      );\n      if (socketInfo) {\n        socketInfo.lastActivity = new Date();\n      }\n    }\n  }\n\n  /**\n   * 清理非活躍連接\n   */\n  static cleanupInactiveConnections(\n    inactiveThresholdMinutes: number = 30,\n  ): void {\n    const threshold = new Date(\n      Date.now() - inactiveThresholdMinutes * 60 * 1000,\n    );\n    let cleanedCount = 0;\n\n    for (const [userId, socketList] of this.userSockets.entries()) {\n      const activeConnections = socketList.filter(\n        (info) => info.lastActivity > threshold,\n      );\n\n      if (activeConnections.length !== socketList.length) {\n        const inactiveConnections = socketList.filter(\n          (info) => info.lastActivity <= threshold,\n        );\n\n        // 斷開非活躍連接\n        inactiveConnections.forEach((info) => {\n          const socket = this.io?.sockets.sockets.get(info.socketId);\n          if (socket) {\n            socket.disconnect(true);\n            cleanedCount++;\n          }\n        });\n\n        // 更新記錄\n        if (activeConnections.length > 0) {\n          this.userSockets.set(userId, activeConnections);\n        } else {\n          this.userSockets.delete(userId);\n        }\n      }\n    }\n\n    if (cleanedCount > 0) {\n      logger.info(\"清理非活躍連接完成\", {\n        cleanedCount,\n        thresholdMinutes: inactiveThresholdMinutes,\n      });\n    }\n  }\n\n  /**\n   * 取得服務統計資訊\n   */\n  static getStats(): {\n    totalConnections: number;\n    onlineUsers: number;\n    averageConnectionsPerUser: number;\n  } {\n    const totalConnections = Array.from(this.userSockets.values()).reduce(\n      (sum, connections) => sum + connections.length,\n      0,\n    );\n    const onlineUsers = this.userSockets.size;\n    const averageConnectionsPerUser =\n      onlineUsers > 0 ? totalConnections / onlineUsers : 0;\n\n    return {\n      totalConnections,\n      onlineUsers,\n      averageConnectionsPerUser:\n        Math.round(averageConnectionsPerUser * 100) / 100,\n    };\n  }\n}\n"],"version":3}