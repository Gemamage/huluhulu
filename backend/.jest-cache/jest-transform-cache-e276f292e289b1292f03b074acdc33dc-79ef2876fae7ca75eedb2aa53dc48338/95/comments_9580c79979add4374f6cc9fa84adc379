9a7d5ee97400b95fecfc79deaede67bd
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const commentService_1 = require("../services/commentService");
const auth_1 = require("../middleware/auth");
const express_validator_1 = require("express-validator");
const router = express_1.default.Router();
/**
 * 創建留言
 */
router.post('/', auth_1.authenticate, [
    (0, express_validator_1.body)('petId').isMongoId().withMessage('無效的寵物ID'),
    (0, express_validator_1.body)('content').trim().isLength({ min: 1, max: 1000 }).withMessage('留言內容長度必須在1-1000字之間'),
    (0, express_validator_1.body)('parentId').optional().isMongoId().withMessage('無效的父留言ID')
], async (req, res) => {
    try {
        const { petId, content, parentId } = req.body;
        const userId = req.user.id;
        const comment = await commentService_1.commentService.createComment({
            petId,
            userId,
            content,
            parentId
        });
        res.status(201).json({
            success: true,
            data: comment,
            message: '留言創建成功'
        });
    }
    catch (error) {
        res.status(400).json({
            success: false,
            message: error.message || '創建留言失敗'
        });
    }
});
/**
 * 獲取寵物留言列表
 */
router.get('/pets/:petId', [
    (0, express_validator_1.param)('petId').isMongoId().withMessage('無效的寵物ID'),
    (0, express_validator_1.query)('page').optional().isInt({ min: 1 }).withMessage('頁碼必須是正整數'),
    (0, express_validator_1.query)('limit').optional().isInt({ min: 1, max: 50 }).withMessage('每頁數量必須在1-50之間'),
    (0, express_validator_1.query)('sortBy').optional().isIn(['createdAt', 'likes']).withMessage('排序字段無效'),
    (0, express_validator_1.query)('sortOrder').optional().isIn(['asc', 'desc']).withMessage('排序順序無效')
], async (req, res) => {
    try {
        const { petId } = req.params;
        const { page = 1, limit = 20, sortBy = 'createdAt', sortOrder = 'desc' } = req.query;
        if (!petId) {
            return res.status(400).json({
                success: false,
                message: '缺少寵物ID參數'
            });
        }
        const result = await commentService_1.commentService.getCommentsByPet(petId, {
            page: Number(page),
            limit: Number(limit),
            sortBy: sortBy,
            sortOrder: sortOrder
        });
        return res.json({
            success: true,
            data: result
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '獲取留言列表失敗'
        });
    }
});
/**
 * 獲取留言樹狀結構
 */
router.get('/pets/:petId/tree', [
    (0, express_validator_1.param)('petId').isMongoId().withMessage('無效的寵物ID')
], async (req, res) => {
    try {
        const { petId } = req.params;
        if (!petId) {
            return res.status(400).json({
                success: false,
                message: '缺少寵物ID參數'
            });
        }
        const commentTree = await commentService_1.commentService.getCommentTree(petId);
        return res.json({
            success: true,
            data: commentTree
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '獲取留言樹失敗'
        });
    }
});
/**
 * 更新留言
 */
router.put('/:commentId', auth_1.authenticate, [
    (0, express_validator_1.param)('commentId').isMongoId().withMessage('無效的留言ID'),
    (0, express_validator_1.body)('content').trim().isLength({ min: 1, max: 1000 }).withMessage('留言內容長度必須在1-1000字之間')
], async (req, res) => {
    try {
        const { commentId } = req.params;
        const { content } = req.body;
        const userId = req.user.id;
        if (!commentId) {
            return res.status(400).json({
                success: false,
                message: '缺少留言ID參數'
            });
        }
        const comment = await commentService_1.commentService.updateComment(commentId, userId, { content });
        if (!comment) {
            return res.status(404).json({
                success: false,
                message: '留言不存在或無權限修改'
            });
        }
        return res.json({
            success: true,
            data: comment,
            message: '留言更新成功'
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '更新留言失敗'
        });
    }
});
/**
 * 刪除留言
 */
router.delete('/:commentId', auth_1.authenticate, [
    (0, express_validator_1.param)('commentId').isMongoId().withMessage('無效的留言ID')
], async (req, res) => {
    try {
        const { commentId } = req.params;
        const userId = req.user.id;
        if (!commentId) {
            return res.status(400).json({
                success: false,
                message: '缺少留言ID參數'
            });
        }
        const success = await commentService_1.commentService.deleteComment(commentId, userId);
        if (!success) {
            return res.status(404).json({
                success: false,
                message: '留言不存在或無權限刪除'
            });
        }
        return res.json({
            success: true,
            message: '留言刪除成功'
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '刪除留言失敗'
        });
    }
});
/**
 * 舉報留言
 */
router.post('/:commentId/report', auth_1.authenticate, [
    (0, express_validator_1.param)('commentId').isMongoId().withMessage('無效的留言ID'),
    (0, express_validator_1.body)('reason').trim().isLength({ min: 1, max: 200 }).withMessage('舉報原因長度必須在1-200字之間')
], async (req, res) => {
    try {
        const { commentId } = req.params;
        const userId = req.user.id;
        if (!commentId) {
            return res.status(400).json({
                success: false,
                message: '缺少留言ID參數'
            });
        }
        await commentService_1.commentService.reportComment(commentId, userId);
        return res.json({
            success: true,
            message: '檢舉成功'
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '檢舉失敗'
        });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,