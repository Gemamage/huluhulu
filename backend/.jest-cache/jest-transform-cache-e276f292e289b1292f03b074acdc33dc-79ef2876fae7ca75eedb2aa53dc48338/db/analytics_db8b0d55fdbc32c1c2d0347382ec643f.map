{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\analytics.ts","mappings":";;;AAAA,kEAA+D;AAC/D,+CAA4C;AAC5C,yCAA6C;AA2C7C;;;GAGG;AACH,MAAa,sBAAsB;IACjC;;OAEG;IACI,KAAK,CAAC,qBAAqB,CAAC,SAA0B;QAC3D,IAAI,CAAC;YACH,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC;gBAC3C,KAAK,EAAE,0BAAe,CAAC,2BAA2B,EAAE;gBACpD,IAAI,EAAE;oBACJ,GAAG,SAAS;oBACZ,SAAS,EAAE,SAAS,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE;iBAC7C;aACF,CAAC,CAAC;YAEH,eAAM,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;QAClF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,yBAAyB,CAAC,cAAiC;QACtE,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC/C,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,0BAAe,CAAC,2BAA2B,EAAE,EAAE,EAAE;gBACpE;oBACE,GAAG,SAAS;oBACZ,SAAS,EAAE,SAAS,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE;iBAC7C;aACF,CAAC,CAAC;YAEH,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;YACtD,eAAM,CAAC,KAAK,CAAC,SAAS,cAAc,CAAC,MAAM,UAAU,CAAC,CAAC;QACzD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc,CAAC,SAAgB,EAAE,OAAc;QAC1D,IAAI,CAAC;YACH,MAAM,KAAK,GAAQ;gBACjB,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE;oBACJ,cAAc,EAAE;wBACd,WAAW,EAAE;4BACX,KAAK,EAAE,eAAe;yBACvB;qBACF;oBACD,YAAY,EAAE;wBACZ,WAAW,EAAE;4BACX,KAAK,EAAE,QAAQ;yBAChB;qBACF;oBACD,oBAAoB,EAAE;wBACpB,GAAG,EAAE;4BACH,KAAK,EAAE,aAAa;yBACrB;qBACF;oBACD,eAAe,EAAE;wBACf,KAAK,EAAE;4BACL,KAAK,EAAE,eAAe;4BACtB,IAAI,EAAE,EAAE;yBACT;qBACF;oBACD,aAAa,EAAE;wBACb,KAAK,EAAE;4BACL,KAAK,EAAE,cAAc;4BACrB,IAAI,EAAE,EAAE;yBACT;qBACF;oBACD,iBAAiB,EAAE;wBACjB,KAAK,EAAE;4BACL,KAAK,EAAE,0BAA0B;4BACjC,IAAI,EAAE,EAAE;yBACT;qBACF;oBACD,cAAc,EAAE;wBACd,KAAK,EAAE;4BACL,KAAK,EAAE,uBAAuB;4BAC9B,IAAI,EAAE,EAAE;yBACT;qBACF;oBACD,aAAa,EAAE;wBACb,cAAc,EAAE;4BACd,KAAK,EAAE,WAAW;4BAClB,iBAAiB,EAAE,KAAK;4BACxB,MAAM,EAAE,YAAY;yBACrB;qBACF;iBACF;aACF,CAAC;YAEF,WAAW;YACX,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;gBACzB,MAAM,SAAS,GAAQ,EAAE,CAAC;gBAC1B,IAAI,SAAS;oBAAE,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;gBACvD,IAAI,OAAO;oBAAE,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;gBAEnD,KAAK,CAAC,KAAK,GAAG;oBACZ,KAAK,EAAE;wBACL,SAAS,EAAE,SAAS;qBACrB;iBACF,CAAC;YACJ,CAAC;YAED,iBAAiB;YACjB,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE,CAAC;gBACnC,KAAK,CAAC,IAAI,CAAC,uBAAuB,GAAG;oBACnC,GAAG,EAAE;wBACH,KAAK,EAAE,gBAAgB;qBACxB;iBACF,CAAC;gBACF,KAAK,CAAC,IAAI,CAAC,kBAAkB,GAAG;oBAC9B,aAAa,EAAE;wBACb,YAAY,EAAE;4BACZ,MAAM,EAAE,cAAc;4BACtB,QAAQ,EAAE,gBAAgB;yBAC3B;wBACD,MAAM,EAAE,iCAAiC;qBAC1C;iBACF,CAAC;gBACF,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG;oBACxB,GAAG,EAAE;wBACH,MAAM,EAAE;4BACN,MAAM,EAAE,8BAA8B;yBACvC;qBACF;iBACF,CAAC;YACJ,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;gBAC7D,KAAK,EAAE,0BAAe,CAAC,2BAA2B,EAAE;gBACpD,IAAI,EAAE,KAAK;aACZ,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;YAExC,OAAO;gBACL,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC;gBAC7C,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;gBACzC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,IAAI,CAAC,CAAC;gBACpE,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;oBACjE,KAAK,EAAE,MAAM,CAAC,GAAG;oBACjB,KAAK,EAAE,MAAM,CAAC,SAAS;iBACxB,CAAC,CAAC;gBACH,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;oBAC7D,IAAI,EAAE,MAAM,CAAC,GAAG;oBAChB,KAAK,EAAE,MAAM,CAAC,SAAS;iBACxB,CAAC,CAAC;gBACH,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;oBACrE,QAAQ,EAAE,MAAM,CAAC,GAAG;oBACpB,KAAK,EAAE,MAAM,CAAC,SAAS;iBACxB,CAAC,CAAC;gBACH,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;oBAC/D,KAAK,EAAE,MAAM,CAAC,GAAG;oBACjB,KAAK,EAAE,MAAM,CAAC,SAAS;iBACxB,CAAC,CAAC;gBACH,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;oBAC7D,IAAI,EAAE,MAAM,CAAC,aAAa;oBAC1B,KAAK,EAAE,MAAM,CAAC,SAAS;iBACxB,CAAC,CAAC;gBACH,qBAAqB,EAAE,IAAI,CAAC,uBAAuB,EAAE,KAAK;gBAC1D,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,EAAE,KAAK;aACjD,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACnC,OAAO;gBACL,aAAa,EAAE,CAAC;gBAChB,WAAW,EAAE,CAAC;gBACd,kBAAkB,EAAE,CAAC;gBACrB,cAAc,EAAE,EAAE;gBAClB,YAAY,EAAE,EAAE;gBAChB,gBAAgB,EAAE,EAAE;gBACpB,aAAa,EAAE,EAAE;gBACjB,YAAY,EAAE,EAAE;aACjB,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,kBAAkB,CAAC,MAAc,EAAE,SAAgB,EAAE,OAAc;QAO9E,IAAI,CAAC;YACH,MAAM,KAAK,GAAQ;gBACjB,KAAK,EAAE;oBACL,IAAI,EAAE;wBACJ,IAAI,EAAE;4BACJ,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,EAAE;yBACrB;qBACF;iBACF;gBACD,IAAI,EAAE,GAAG;gBACT,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC;gBACxC,IAAI,EAAE;oBACJ,cAAc,EAAE;wBACd,WAAW,EAAE;4BACX,KAAK,EAAE,eAAe;yBACvB;qBACF;oBACD,cAAc,EAAE;wBACd,WAAW,EAAE;4BACX,KAAK,EAAE,eAAe;yBACvB;qBACF;oBACD,oBAAoB,EAAE;wBACpB,GAAG,EAAE;4BACH,KAAK,EAAE,aAAa;yBACrB;qBACF;oBACD,WAAW,EAAE;wBACX,KAAK,EAAE;4BACL,KAAK,EAAE,eAAe;4BACtB,IAAI,EAAE,EAAE;yBACT;qBACF;iBACF;aACF,CAAC;YAEF,WAAW;YACX,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;gBACzB,MAAM,SAAS,GAAQ,EAAE,CAAC;gBAC1B,IAAI,SAAS;oBAAE,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;gBACvD,IAAI,OAAO;oBAAE,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;gBAEnD,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;oBACzB,KAAK,EAAE;wBACL,SAAS,EAAE,SAAS;qBACrB;iBACF,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;gBAC7D,KAAK,EAAE,0BAAe,CAAC,2BAA2B,EAAE;gBACpD,IAAI,EAAE,KAAK;aACZ,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;YACxC,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YAErC,OAAO;gBACL,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC;gBAC7C,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC;gBAC7C,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,IAAI,CAAC,CAAC;gBACpE,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;oBACzD,KAAK,EAAE,MAAM,CAAC,GAAG;oBACjB,KAAK,EAAE,MAAM,CAAC,SAAS;iBACxB,CAAC,CAAC;gBACH,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;oBACrC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK;oBACxB,SAAS,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC;oBAC1C,WAAW,EAAE,GAAG,CAAC,OAAO,CAAC,WAAW;iBACrC,CAAC,CAAC;aACJ,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACnC,OAAO;gBACL,aAAa,EAAE,CAAC;gBAChB,aAAa,EAAE,CAAC;gBAChB,kBAAkB,EAAE,CAAC;gBACrB,UAAU,EAAE,EAAE;gBACd,aAAa,EAAE,EAAE;aAClB,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,eAAe,CAAC,MAAsC,EAAE,SAAgB,EAAE,OAAc;QACnG,IAAI,CAAC;YACH,IAAI,QAAgB,CAAC;YACrB,QAAQ,MAAM,EAAE,CAAC;gBACf,KAAK,OAAO;oBACV,QAAQ,GAAG,KAAK,CAAC;oBACjB,MAAM;gBACR,KAAK,QAAQ;oBACX,QAAQ,GAAG,MAAM,CAAC;oBAClB,MAAM;gBACR,KAAK,SAAS;oBACZ,QAAQ,GAAG,OAAO,CAAC;oBACnB,MAAM;gBACR;oBACE,QAAQ,GAAG,KAAK,CAAC;YACrB,CAAC;YAED,MAAM,KAAK,GAAQ;gBACjB,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE;oBACJ,MAAM,EAAE;wBACN,cAAc,EAAE;4BACd,KAAK,EAAE,WAAW;4BAClB,iBAAiB,EAAE,QAAQ;4BAC3B,MAAM,EAAE,YAAY;yBACrB;wBACD,IAAI,EAAE;4BACJ,YAAY,EAAE;gCACZ,WAAW,EAAE;oCACX,KAAK,EAAE,QAAQ;iCAChB;6BACF;4BACD,eAAe,EAAE;gCACf,GAAG,EAAE;oCACH,KAAK,EAAE,aAAa;iCACrB;6BACF;4BACD,WAAW,EAAE;gCACX,KAAK,EAAE;oCACL,KAAK,EAAE,eAAe;oCACtB,IAAI,EAAE,CAAC;iCACR;6BACF;yBACF;qBACF;iBACF;aACF,CAAC;YAEF,WAAW;YACX,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;gBACzB,MAAM,SAAS,GAAQ,EAAE,CAAC;gBAC1B,IAAI,SAAS;oBAAE,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;gBACvD,IAAI,OAAO;oBAAE,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;gBAEnD,KAAK,CAAC,KAAK,GAAG;oBACZ,KAAK,EAAE;wBACL,SAAS,EAAE,SAAS;qBACrB;iBACF,CAAC;YACJ,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;gBAC7D,KAAK,EAAE,0BAAe,CAAC,2BAA2B,EAAE;gBACpD,IAAI,EAAE,KAAK;aACZ,CAAC,CAAC;YAEH,MAAM,MAAM,GAAkB,EAAE,CAAC;YACjC,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;YAExC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACxB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;oBAC1C,MAAM,CAAC,IAAI,CAAC;wBACV,IAAI,EAAE,MAAM,CAAC,aAAa;wBAC1B,KAAK,EAAE,MAAM,CAAC,SAAS;wBACvB,WAAW,EAAE,MAAM,CAAC,YAAY,CAAC,KAAK;wBACtC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,IAAI,CAAC,CAAC;wBAC7D,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;qBAC9D,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACnC,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,iBAAiB,CAAC,QAAgB,EAAE,KAAa,EAAE,QAAgB;QAC9E,IAAI,CAAC;YACH,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;gBAC5C,KAAK,EAAE,0BAAe,CAAC,2BAA2B,EAAE;gBACpD,EAAE,EAAE,QAAQ;gBACZ,IAAI,EAAE;oBACJ,MAAM,EAAE;wBACN,MAAM,EAAE;;;;;aAKP;wBACD,MAAM,EAAE;4BACN,KAAK,EAAE;gCACL,KAAK;gCACL,QAAQ;gCACR,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;6BACpC;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,eAAM,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;QACzD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,sBAAsB;QAMjC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;gBAC7D,KAAK,EAAE,0BAAe,CAAC,2BAA2B,EAAE;gBACpD,IAAI,EAAE;oBACJ,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE;wBACJ,cAAc,EAAE;4BACd,WAAW,EAAE;gCACX,KAAK,EAAE,eAAe;6BACvB;yBACF;wBACD,oBAAoB,EAAE;4BACpB,MAAM,EAAE;gCACN,MAAM,EAAE;oCACN,KAAK,EAAE,gBAAgB;iCACxB;6BACF;yBACF;wBACD,mBAAmB,EAAE;4BACnB,MAAM,EAAE;gCACN,IAAI,EAAE;oCACJ,WAAW,EAAE,CAAC;iCACf;6BACF;4BACD,IAAI,EAAE;gCACJ,OAAO,EAAE;oCACP,KAAK,EAAE;wCACL,KAAK,EAAE,eAAe;wCACtB,IAAI,EAAE,EAAE;qCACT;iCACF;6BACF;yBACF;wBACD,iBAAiB,EAAE;4BACjB,KAAK,EAAE;gCACL,KAAK,EAAE,eAAe;gCACtB,IAAI,EAAE,GAAG;6BACV;4BACD,IAAI,EAAE;gCACJ,cAAc,EAAE;oCACd,WAAW,EAAE;wCACX,KAAK,EAAE,eAAe;qCACvB;iCACF;gCACD,oBAAoB,EAAE;oCACpB,MAAM,EAAE;wCACN,MAAM,EAAE;4CACN,KAAK,EAAE,gBAAgB;yCACxB;qCACF;iCACF;gCACD,sBAAsB,EAAE;oCACtB,GAAG,EAAE;wCACH,MAAM,EAAE;4CACN,MAAM,EAAE;;;;;uBAKP;yCACF;qCACF;iCACF;6BACF;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;YACxC,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAChD,MAAM,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC;YAC/D,MAAM,gBAAgB,GAAG,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAE5F,WAAW;YACX,IAAI,mBAAmB,GAAG,CAAC,CAAC;YAC5B,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;gBACrD,IAAI,MAAM,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;oBACxC,mBAAmB,IAAI,MAAM,CAAC,sBAAsB,CAAC,KAAK,GAAG,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC;oBACnG,WAAW,IAAI,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC;gBACvD,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,oBAAoB,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAErF,QAAQ;YACR,MAAM,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;gBACvF,KAAK,EAAE,MAAM,CAAC,GAAG;gBACjB,KAAK,EAAE,MAAM,CAAC,SAAS;aACxB,CAAC,CAAC,CAAC;YAEJ,OAAO;YACP,MAAM,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO;iBACzD,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE;gBACnB,MAAM,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC3C,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClF,OAAO;oBACL,KAAK,EAAE,MAAM,CAAC,GAAG;oBACjB,GAAG;oBACH,WAAW,EAAE,MAAM,CAAC,sBAAsB,CAAC,KAAK,IAAI,CAAC;iBACtD,CAAC;YACJ,CAAC,CAAC;iBACD,MAAM,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,WAAW;iBAChD,IAAI,CAAC,CAAC,CAAM,EAAE,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;iBACvC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAEhB,OAAO;gBACL,gBAAgB;gBAChB,oBAAoB;gBACpB,iBAAiB;gBACjB,qBAAqB;aACtB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACnC,OAAO;gBACL,gBAAgB,EAAE,CAAC;gBACnB,oBAAoB,EAAE,CAAC;gBACvB,iBAAiB,EAAE,EAAE;gBACrB,qBAAqB,EAAE,EAAE;aAC1B,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,oBAAoB,CAAC,aAAqB,EAAE;QACvD,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;YAEtD,MAAM,QAAQ,GAAG,MAAM,2CAAoB,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC;gBACpE,KAAK,EAAE,0BAAe,CAAC,2BAA2B,EAAE;gBACpD,IAAI,EAAE;oBACJ,KAAK,EAAE;wBACL,KAAK,EAAE;4BACL,SAAS,EAAE;gCACT,EAAE,EAAE,UAAU,CAAC,WAAW,EAAE;6BAC7B;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC;YAChD,eAAM,CAAC,IAAI,CAAC,OAAO,YAAY,UAAU,CAAC,CAAC;YAE3C,OAAO,EAAE,YAAY,EAAE,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACjC,OAAO,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC;IAED;;OAEG;IACK,uBAAuB;QAC7B,wCAAwC;QACxC,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AA3jBD,wDA2jBC;AAED,SAAS;AACI,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\analytics.ts"],"sourcesContent":["import { elasticsearchService } from '../elasticsearchService';\nimport { logger } from '../../utils/logger';\nimport { indexingService } from './indexing';\n\n// 搜尋分析介面\nexport interface SearchAnalytics {\n  query: string;\n  filters: any;\n  userId?: string;\n  resultCount: number;\n  timestamp: Date;\n  sessionId?: string;\n  userAgent?: string;\n  ipAddress?: string;\n  clickedResults?: string[];\n  searchDuration?: number;\n  location?: {\n    lat: number;\n    lon: number;\n  };\n}\n\n// 搜尋統計介面\nexport interface SearchStats {\n  totalSearches: number;\n  uniqueUsers: number;\n  averageResultCount: number;\n  popularQueries: Array<{ query: string; count: number }>;\n  popularTypes: Array<{ type: string; count: number }>;\n  popularLocations: Array<{ location: string; count: number }>;\n  popularBreeds: Array<{ breed: string; count: number }>;\n  searchTrends: Array<{ date: string; count: number }>;\n  averageSearchDuration?: number;\n  clickThroughRate?: number;\n}\n\n// 搜尋趨勢介面\nexport interface SearchTrend {\n  date: string;\n  count: number;\n  uniqueUsers: number;\n  averageResults: number;\n  topQueries: string[];\n}\n\n/**\n * 搜尋分析服務\n * 負責處理搜尋統計、分析和報告功能\n */\nexport class SearchAnalyticsService {\n  /**\n   * 記錄搜尋分析數據\n   */\n  public async recordSearchAnalytics(analytics: SearchAnalytics): Promise<void> {\n    try {\n      await elasticsearchService.getClient().index({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        body: {\n          ...analytics,\n          timestamp: analytics.timestamp || new Date()\n        }\n      });\n\n      logger.debug('搜尋分析數據已記錄', { query: analytics.query, userId: analytics.userId });\n    } catch (error) {\n      logger.error('記錄搜尋分析數據失敗:', error);\n    }\n  }\n\n  /**\n   * 批量記錄搜尋分析數據\n   */\n  public async recordBulkSearchAnalytics(analyticsArray: SearchAnalytics[]): Promise<void> {\n    try {\n      const body = analyticsArray.flatMap(analytics => [\n        { index: { _index: indexingService.getSearchAnalyticsIndexName() } },\n        {\n          ...analytics,\n          timestamp: analytics.timestamp || new Date()\n        }\n      ]);\n\n      await elasticsearchService.getClient().bulk({ body });\n      logger.debug(`批量記錄了 ${analyticsArray.length} 條搜尋分析數據`);\n    } catch (error) {\n      logger.error('批量記錄搜尋分析數據失敗:', error);\n    }\n  }\n\n  /**\n   * 獲取搜尋統計數據\n   */\n  public async getSearchStats(startDate?: Date, endDate?: Date): Promise<SearchStats> {\n    try {\n      const query: any = {\n        size: 0,\n        aggs: {\n          total_searches: {\n            value_count: {\n              field: 'query.keyword'\n            }\n          },\n          unique_users: {\n            cardinality: {\n              field: 'userId'\n            }\n          },\n          average_result_count: {\n            avg: {\n              field: 'resultCount'\n            }\n          },\n          popular_queries: {\n            terms: {\n              field: 'query.keyword',\n              size: 10\n            }\n          },\n          popular_types: {\n            terms: {\n              field: 'filters.type',\n              size: 10\n            }\n          },\n          popular_locations: {\n            terms: {\n              field: 'filters.location.keyword',\n              size: 10\n            }\n          },\n          popular_breeds: {\n            terms: {\n              field: 'filters.breed.keyword',\n              size: 10\n            }\n          },\n          search_trends: {\n            date_histogram: {\n              field: 'timestamp',\n              calendar_interval: 'day',\n              format: 'yyyy-MM-dd'\n            }\n          }\n        }\n      };\n\n      // 添加日期範圍篩選\n      if (startDate || endDate) {\n        const dateRange: any = {};\n        if (startDate) dateRange.gte = startDate.toISOString();\n        if (endDate) dateRange.lte = endDate.toISOString();\n\n        query.query = {\n          range: {\n            timestamp: dateRange\n          }\n        };\n      }\n\n      // 添加搜尋持續時間和點擊率統計\n      if (this.supportsAdvancedMetrics()) {\n        query.aggs.average_search_duration = {\n          avg: {\n            field: 'searchDuration'\n          }\n        };\n        query.aggs.click_through_rate = {\n          bucket_script: {\n            buckets_path: {\n              clicks: 'total_clicks',\n              searches: 'total_searches'\n            },\n            script: 'params.clicks / params.searches'\n          }\n        };\n        query.aggs.total_clicks = {\n          sum: {\n            script: {\n              source: \"doc['clickedResults'].size()\"\n            }\n          }\n        };\n      }\n\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        body: query\n      });\n\n      const aggs = response.body.aggregations;\n\n      return {\n        totalSearches: aggs.total_searches.value || 0,\n        uniqueUsers: aggs.unique_users.value || 0,\n        averageResultCount: Math.round(aggs.average_result_count.value || 0),\n        popularQueries: aggs.popular_queries.buckets.map((bucket: any) => ({\n          query: bucket.key,\n          count: bucket.doc_count\n        })),\n        popularTypes: aggs.popular_types.buckets.map((bucket: any) => ({\n          type: bucket.key,\n          count: bucket.doc_count\n        })),\n        popularLocations: aggs.popular_locations.buckets.map((bucket: any) => ({\n          location: bucket.key,\n          count: bucket.doc_count\n        })),\n        popularBreeds: aggs.popular_breeds.buckets.map((bucket: any) => ({\n          breed: bucket.key,\n          count: bucket.doc_count\n        })),\n        searchTrends: aggs.search_trends.buckets.map((bucket: any) => ({\n          date: bucket.key_as_string,\n          count: bucket.doc_count\n        })),\n        averageSearchDuration: aggs.average_search_duration?.value,\n        clickThroughRate: aggs.click_through_rate?.value\n      };\n    } catch (error) {\n      logger.error('獲取搜尋統計數據失敗:', error);\n      return {\n        totalSearches: 0,\n        uniqueUsers: 0,\n        averageResultCount: 0,\n        popularQueries: [],\n        popularTypes: [],\n        popularLocations: [],\n        popularBreeds: [],\n        searchTrends: []\n      };\n    }\n  }\n\n  /**\n   * 獲取用戶搜尋統計\n   */\n  public async getUserSearchStats(userId: string, startDate?: Date, endDate?: Date): Promise<{\n    totalSearches: number;\n    uniqueQueries: number;\n    averageResultCount: number;\n    topQueries: Array<{ query: string; count: number }>;\n    searchHistory: Array<{ query: string; timestamp: Date; resultCount: number }>;\n  }> {\n    try {\n      const query: any = {\n        query: {\n          bool: {\n            must: [\n              { term: { userId } }\n            ]\n          }\n        },\n        size: 100,\n        sort: [{ timestamp: { order: 'desc' } }],\n        aggs: {\n          total_searches: {\n            value_count: {\n              field: 'query.keyword'\n            }\n          },\n          unique_queries: {\n            cardinality: {\n              field: 'query.keyword'\n            }\n          },\n          average_result_count: {\n            avg: {\n              field: 'resultCount'\n            }\n          },\n          top_queries: {\n            terms: {\n              field: 'query.keyword',\n              size: 10\n            }\n          }\n        }\n      };\n\n      // 添加日期範圍篩選\n      if (startDate || endDate) {\n        const dateRange: any = {};\n        if (startDate) dateRange.gte = startDate.toISOString();\n        if (endDate) dateRange.lte = endDate.toISOString();\n\n        query.query.bool.must.push({\n          range: {\n            timestamp: dateRange\n          }\n        });\n      }\n\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        body: query\n      });\n\n      const aggs = response.body.aggregations;\n      const hits = response.body.hits.hits;\n\n      return {\n        totalSearches: aggs.total_searches.value || 0,\n        uniqueQueries: aggs.unique_queries.value || 0,\n        averageResultCount: Math.round(aggs.average_result_count.value || 0),\n        topQueries: aggs.top_queries.buckets.map((bucket: any) => ({\n          query: bucket.key,\n          count: bucket.doc_count\n        })),\n        searchHistory: hits.map((hit: any) => ({\n          query: hit._source.query,\n          timestamp: new Date(hit._source.timestamp),\n          resultCount: hit._source.resultCount\n        }))\n      };\n    } catch (error) {\n      logger.error('獲取用戶搜尋統計失敗:', error);\n      return {\n        totalSearches: 0,\n        uniqueQueries: 0,\n        averageResultCount: 0,\n        topQueries: [],\n        searchHistory: []\n      };\n    }\n  }\n\n  /**\n   * 獲取搜尋趨勢數據\n   */\n  public async getSearchTrends(period: 'daily' | 'weekly' | 'monthly', startDate?: Date, endDate?: Date): Promise<SearchTrend[]> {\n    try {\n      let interval: string;\n      switch (period) {\n        case 'daily':\n          interval = 'day';\n          break;\n        case 'weekly':\n          interval = 'week';\n          break;\n        case 'monthly':\n          interval = 'month';\n          break;\n        default:\n          interval = 'day';\n      }\n\n      const query: any = {\n        size: 0,\n        aggs: {\n          trends: {\n            date_histogram: {\n              field: 'timestamp',\n              calendar_interval: interval,\n              format: 'yyyy-MM-dd'\n            },\n            aggs: {\n              unique_users: {\n                cardinality: {\n                  field: 'userId'\n                }\n              },\n              average_results: {\n                avg: {\n                  field: 'resultCount'\n                }\n              },\n              top_queries: {\n                terms: {\n                  field: 'query.keyword',\n                  size: 5\n                }\n              }\n            }\n          }\n        }\n      };\n\n      // 添加日期範圍篩選\n      if (startDate || endDate) {\n        const dateRange: any = {};\n        if (startDate) dateRange.gte = startDate.toISOString();\n        if (endDate) dateRange.lte = endDate.toISOString();\n\n        query.query = {\n          range: {\n            timestamp: dateRange\n          }\n        };\n      }\n\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        body: query\n      });\n\n      const trends: SearchTrend[] = [];\n      const aggs = response.body.aggregations;\n\n      if (aggs && aggs.trends) {\n        aggs.trends.buckets.forEach((bucket: any) => {\n          trends.push({\n            date: bucket.key_as_string,\n            count: bucket.doc_count,\n            uniqueUsers: bucket.unique_users.value,\n            averageResults: Math.round(bucket.average_results.value || 0),\n            topQueries: bucket.top_queries.buckets.map((q: any) => q.key)\n          });\n        });\n      }\n\n      return trends;\n    } catch (error) {\n      logger.error('獲取搜尋趨勢數據失敗:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 記錄搜尋結果點擊\n   */\n  public async recordSearchClick(searchId: string, petId: string, position: number): Promise<void> {\n    try {\n      await elasticsearchService.getClient().update({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        id: searchId,\n        body: {\n          script: {\n            source: `\n              if (ctx._source.clickedResults == null) {\n                ctx._source.clickedResults = [];\n              }\n              ctx._source.clickedResults.add(params.click);\n            `,\n            params: {\n              click: {\n                petId,\n                position,\n                timestamp: new Date().toISOString()\n              }\n            }\n          }\n        }\n      });\n\n      logger.debug('搜尋點擊已記錄', { searchId, petId, position });\n    } catch (error) {\n      logger.error('記錄搜尋點擊失敗:', error);\n    }\n  }\n\n  /**\n   * 獲取搜尋效果分析\n   */\n  public async getSearchEffectiveness(): Promise<{\n    clickThroughRate: number;\n    averageClickPosition: number;\n    zeroResultQueries: Array<{ query: string; count: number }>;\n    highPerformingQueries: Array<{ query: string; ctr: number; avgPosition: number }>;\n  }> {\n    try {\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        body: {\n          size: 0,\n          aggs: {\n            total_searches: {\n              value_count: {\n                field: 'query.keyword'\n              }\n            },\n            searches_with_clicks: {\n              filter: {\n                exists: {\n                  field: 'clickedResults'\n                }\n              }\n            },\n            zero_result_queries: {\n              filter: {\n                term: {\n                  resultCount: 0\n                }\n              },\n              aggs: {\n                queries: {\n                  terms: {\n                    field: 'query.keyword',\n                    size: 10\n                  }\n                }\n              }\n            },\n            query_performance: {\n              terms: {\n                field: 'query.keyword',\n                size: 100\n              },\n              aggs: {\n                total_searches: {\n                  value_count: {\n                    field: 'query.keyword'\n                  }\n                },\n                searches_with_clicks: {\n                  filter: {\n                    exists: {\n                      field: 'clickedResults'\n                    }\n                  }\n                },\n                average_click_position: {\n                  avg: {\n                    script: {\n                      source: `\n                        if (doc['clickedResults'].size() > 0) {\n                          return doc['clickedResults'][0].position;\n                        }\n                        return null;\n                      `\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n\n      const aggs = response.body.aggregations;\n      const totalSearches = aggs.total_searches.value;\n      const searchesWithClicks = aggs.searches_with_clicks.doc_count;\n      const clickThroughRate = totalSearches > 0 ? (searchesWithClicks / totalSearches) * 100 : 0;\n\n      // 計算平均點擊位置\n      let totalClickPositions = 0;\n      let totalClicks = 0;\n      aggs.query_performance.buckets.forEach((bucket: any) => {\n        if (bucket.average_click_position.value) {\n          totalClickPositions += bucket.average_click_position.value * bucket.searches_with_clicks.doc_count;\n          totalClicks += bucket.searches_with_clicks.doc_count;\n        }\n      });\n      const averageClickPosition = totalClicks > 0 ? totalClickPositions / totalClicks : 0;\n\n      // 零結果查詢\n      const zeroResultQueries = aggs.zero_result_queries.queries.buckets.map((bucket: any) => ({\n        query: bucket.key,\n        count: bucket.doc_count\n      }));\n\n      // 高效查詢\n      const highPerformingQueries = aggs.query_performance.buckets\n        .map((bucket: any) => {\n          const ctr = bucket.total_searches.value > 0 ? \n            (bucket.searches_with_clicks.doc_count / bucket.total_searches.value) * 100 : 0;\n          return {\n            query: bucket.key,\n            ctr,\n            avgPosition: bucket.average_click_position.value || 0\n          };\n        })\n        .filter((item: any) => item.ctr > 10) // 點擊率大於10%\n        .sort((a: any, b: any) => b.ctr - a.ctr)\n        .slice(0, 10);\n\n      return {\n        clickThroughRate,\n        averageClickPosition,\n        zeroResultQueries,\n        highPerformingQueries\n      };\n    } catch (error) {\n      logger.error('獲取搜尋效果分析失敗:', error);\n      return {\n        clickThroughRate: 0,\n        averageClickPosition: 0,\n        zeroResultQueries: [],\n        highPerformingQueries: []\n      };\n    }\n  }\n\n  /**\n   * 清理過期的分析數據\n   */\n  public async cleanupAnalyticsData(daysToKeep: number = 90): Promise<{ deletedCount: number }> {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n      const response = await elasticsearchService.getClient().deleteByQuery({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        body: {\n          query: {\n            range: {\n              timestamp: {\n                lt: cutoffDate.toISOString()\n              }\n            }\n          }\n        }\n      });\n\n      const deletedCount = response.body.deleted || 0;\n      logger.info(`清理了 ${deletedCount} 條過期分析數據`);\n      \n      return { deletedCount };\n    } catch (error) {\n      logger.error('清理分析數據失敗:', error);\n      return { deletedCount: 0 };\n    }\n  }\n\n  /**\n   * 檢查是否支持高級指標\n   */\n  private supportsAdvancedMetrics(): boolean {\n    // 這裡可以根據 Elasticsearch 版本或配置來決定是否支持高級指標\n    return true;\n  }\n}\n\n// 導出單例實例\nexport const searchAnalyticsService = new SearchAnalyticsService();"],"version":3}