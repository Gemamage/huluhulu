5e5e2c9f6b510cb64897b5bb10d81abd
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirebaseService = void 0;
const firebase_admin_1 = __importDefault(require("firebase-admin"));
const environment_1 = require("../config/environment");
const logger_1 = require("../utils/logger");
const Notification_1 = require("../models/Notification");
/**
 * Firebase 服務類別
 */
class FirebaseService {
    /**
     * 初始化 Firebase Admin SDK
     */
    static initialize() {
        try {
            if (this.app) {
                logger_1.logger.info("Firebase Admin SDK 已經初始化");
                return;
            }
            // 檢查必要的環境變數
            if (!environment_1.config.firebase.serviceAccountKey) {
                logger_1.logger.warn("Firebase 服務帳號金鑰未設定，推播通知功能將被停用");
                return;
            }
            // 初始化 Firebase Admin SDK
            this.app = firebase_admin_1.default.initializeApp({
                credential: firebase_admin_1.default.credential.cert(environment_1.config.firebase.serviceAccountKey),
                projectId: environment_1.config.firebase.projectId,
            });
            this.messaging = firebase_admin_1.default.messaging(this.app);
            logger_1.logger.info("Firebase Admin SDK 初始化成功");
        }
        catch (error) {
            logger_1.logger.error("Firebase Admin SDK 初始化失敗", { error });
            throw error;
        }
    }
    /**
     * 檢查 Firebase 是否已初始化
     */
    static ensureInitialized() {
        if (!this.messaging) {
            throw new Error("Firebase Admin SDK 尚未初始化");
        }
    }
    /**
     * 發送推播通知給單一裝置
     */
    static async sendToDevice(token, payload) {
        try {
            this.ensureInitialized();
            const message = {
                token,
                notification: {
                    title: payload.title,
                    body: payload.body,
                    imageUrl: payload.imageUrl,
                },
                data: {
                    ...payload.data,
                    type: payload.type || "",
                    actionUrl: payload.actionUrl || "",
                    priority: payload.priority || Notification_1.NotificationPriority.NORMAL,
                },
                android: {
                    priority: this.getAndroidPriority(payload.priority),
                    notification: {
                        channelId: this.getChannelId(payload.type),
                        priority: this.getAndroidNotificationPriority(payload.priority),
                        defaultSound: true,
                        defaultVibrateTimings: true,
                    },
                },
                apns: {
                    payload: {
                        aps: {
                            alert: {
                                title: payload.title,
                                body: payload.body,
                            },
                            sound: "default",
                            badge: 1,
                        },
                    },
                },
                webpush: {
                    notification: {
                        title: payload.title,
                        body: payload.body,
                        icon: "/icons/icon-192x192.png",
                        badge: "/icons/badge-72x72.png",
                        image: payload.imageUrl,
                        requireInteraction: payload.priority === Notification_1.NotificationPriority.URGENT,
                    },
                    fcmOptions: {
                        link: payload.actionUrl,
                    },
                },
            };
            const response = await this.messaging.send(message);
            logger_1.logger.info("推播通知發送成功", {
                messageId: response,
                token: token.substring(0, 20) + "...",
                title: payload.title,
            });
            return true;
        }
        catch (error) {
            logger_1.logger.error("推播通知發送失敗", {
                error: error.message,
                token: token.substring(0, 20) + "...",
                title: payload.title,
            });
            // 檢查是否為無效的 token
            if (error.code === "messaging/registration-token-not-registered") {
                logger_1.logger.info("裝置 token 已失效", {
                    token: token.substring(0, 20) + "...",
                });
                // 這裡可以觸發清理無效 token 的邏輯
            }
            return false;
        }
    }
    /**
     * 發送推播通知給多個裝置
     */
    static async sendToMultipleDevices(tokens, payload) {
        try {
            this.ensureInitialized();
            if (tokens.length === 0) {
                return { successCount: 0, failureCount: 0, invalidTokens: [] };
            }
            // 批次發送（Firebase 限制每次最多 500 個 token）
            const batchSize = 500;
            let successCount = 0;
            let failureCount = 0;
            const invalidTokens = [];
            for (let i = 0; i < tokens.length; i += batchSize) {
                const batch = tokens.slice(i, i + batchSize);
                const message = {
                    tokens: batch,
                    notification: {
                        title: payload.title,
                        body: payload.body,
                        imageUrl: payload.imageUrl,
                    },
                    data: {
                        ...payload.data,
                        type: payload.type || "",
                        actionUrl: payload.actionUrl || "",
                        priority: payload.priority || Notification_1.NotificationPriority.NORMAL,
                    },
                    android: {
                        priority: this.getAndroidPriority(payload.priority),
                        notification: {
                            channelId: this.getChannelId(payload.type),
                            priority: this.getAndroidNotificationPriority(payload.priority),
                            defaultSound: true,
                            defaultVibrateTimings: true,
                        },
                    },
                    apns: {
                        payload: {
                            aps: {
                                alert: {
                                    title: payload.title,
                                    body: payload.body,
                                },
                                sound: "default",
                                badge: 1,
                            },
                        },
                    },
                    webpush: {
                        notification: {
                            title: payload.title,
                            body: payload.body,
                            icon: "/icons/icon-192x192.png",
                            badge: "/icons/badge-72x72.png",
                            image: payload.imageUrl,
                            requireInteraction: payload.priority === Notification_1.NotificationPriority.URGENT,
                        },
                        fcmOptions: {
                            link: payload.actionUrl,
                        },
                    },
                };
                const response = await this.messaging.sendEachForMulticast(message);
                successCount += response.successCount;
                failureCount += response.failureCount;
                // 處理失敗的 token
                response.responses.forEach((resp, idx) => {
                    if (!resp.success && resp.error) {
                        const token = batch[idx];
                        if (token &&
                            resp.error.code === "messaging/registration-token-not-registered") {
                            invalidTokens.push(token);
                        }
                        if (token) {
                            logger_1.logger.warn("推播通知發送失敗", {
                                token: token.substring(0, 20) + "...",
                                error: resp.error.message,
                            });
                        }
                    }
                });
            }
            logger_1.logger.info("批次推播通知發送完成", {
                totalTokens: tokens.length,
                successCount,
                failureCount,
                invalidTokensCount: invalidTokens.length,
            });
            return { successCount, failureCount, invalidTokens };
        }
        catch (error) {
            logger_1.logger.error("批次推播通知發送失敗", {
                error,
                tokenCount: tokens.length,
            });
            return {
                successCount: 0,
                failureCount: tokens.length,
                invalidTokens: [],
            };
        }
    }
    /**
     * 驗證裝置 token 是否有效
     */
    static async validateToken(token) {
        try {
            this.ensureInitialized();
            // 發送一個測試訊息來驗證 token
            const message = {
                token,
                data: {
                    test: "true",
                },
            };
            const options = {
                dryRun: true, // 不實際發送，只驗證
            };
            await this.messaging.send(message, options.dryRun);
            return true;
        }
        catch (error) {
            if (error.code === "messaging/registration-token-not-registered") {
                return false;
            }
            logger_1.logger.error("Token 驗證失敗", {
                error: error.message,
                token: token.substring(0, 20) + "...",
            });
            return false;
        }
    }
    /**
     * 取得 Android 優先級
     */
    static getAndroidPriority(priority) {
        switch (priority) {
            case Notification_1.NotificationPriority.HIGH:
            case Notification_1.NotificationPriority.URGENT:
                return "high";
            default:
                return "normal";
        }
    }
    /**
     * 取得 Android 通知優先級
     */
    static getAndroidNotificationPriority(priority) {
        switch (priority) {
            case Notification_1.NotificationPriority.LOW:
                return "low";
            case Notification_1.NotificationPriority.HIGH:
                return "high";
            case Notification_1.NotificationPriority.URGENT:
                return "max";
            default:
                return "default";
        }
    }
    /**
     * 取得通知頻道 ID
     */
    static getChannelId(type) {
        switch (type) {
            case Notification_1.NotificationType.PET_FOUND:
                return "pet_found";
            case Notification_1.NotificationType.PET_MISSING:
                return "pet_missing";
            case Notification_1.NotificationType.MATCH_FOUND:
                return "match_found";
            case Notification_1.NotificationType.MESSAGE_RECEIVED:
                return "messages";
            case Notification_1.NotificationType.SYSTEM_UPDATE:
                return "system";
            case Notification_1.NotificationType.ACCOUNT_SECURITY:
                return "security";
            default:
                return "default";
        }
    }
    /**
     * 清理無效的裝置 token
     */
    static async cleanupInvalidTokens(tokens) {
        const validTokens = [];
        for (const token of tokens) {
            const isValid = await this.validateToken(token);
            if (isValid) {
                validTokens.push(token);
            }
        }
        return validTokens;
    }
}
exports.FirebaseService = FirebaseService;
FirebaseService.app = null;
FirebaseService.messaging = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,