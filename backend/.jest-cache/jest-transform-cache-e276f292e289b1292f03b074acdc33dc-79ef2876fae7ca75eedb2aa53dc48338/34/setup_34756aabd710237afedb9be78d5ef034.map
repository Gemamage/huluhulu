{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\setup.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\setup.ts"],"sourcesContent":["import { MongoMemoryServer } from 'mongodb-memory-server';\nimport mongoose from 'mongoose';\nimport { config } from '../src/config/environment';\n\nlet mongod: MongoMemoryServer;\n\n// 測試前設置\nbeforeAll(async () => {\n  // 啟動內存中的 MongoDB 實例\n  mongod = await MongoMemoryServer.create();\n  const uri = mongod.getUri();\n  \n  // 連接到測試資料庫\n  await mongoose.connect(uri);\n});\n\n// 每個測試後清理\nafterEach(async () => {\n  const collections = mongoose.connection.collections;\n  \n  for (const key in collections) {\n    const collection = collections[key];\n    await collection.deleteMany({});\n  }\n});\n\n// 測試後清理\nafterAll(async () => {\n  await mongoose.connection.dropDatabase();\n  await mongoose.connection.close();\n  await mongod.stop();\n});\n\n// 設置測試環境變數\nprocess.env.NODE_ENV = 'test';\nprocess.env.MONGODB_URI = 'mongodb://localhost:27017/pet-finder-test';\nprocess.env.JWT_SECRET = 'test-jwt-secret-key-with-minimum-32-characters-length';\nprocess.env.EMAIL_FROM = 'test@example.com';\nprocess.env.FRONTEND_URL = 'http://localhost:3000';\nprocess.env.CLOUDINARY_CLOUD_NAME = 'test-cloud';\nprocess.env.CLOUDINARY_API_KEY = 'test-api-key';\nprocess.env.CLOUDINARY_API_SECRET = 'test-api-secret';\nprocess.env.SMTP_HOST = 'smtp.test.com';\nprocess.env.SMTP_PORT = '587';\nprocess.env.SMTP_USER = 'test@example.com';\nprocess.env.SMTP_PASS = 'test-password';\nprocess.env.OPENAI_API_KEY = 'test-openai-key';\n\n// 模擬外部服務\njest.mock('../src/services/emailService', () => ({\n  EmailService: {\n    sendVerificationEmail: jest.fn().mockResolvedValue(true),\n    sendPasswordResetEmail: jest.fn().mockResolvedValue(true),\n    sendWelcomeEmail: jest.fn().mockResolvedValue(true),\n    sendNotificationEmail: jest.fn().mockResolvedValue(true)\n  }\n}));\n\n// cloudinaryService not implemented yet\n\njest.mock('../src/services/aiService', () => ({\n  analyzeImage: jest.fn().mockResolvedValue({\n    breed: 'Golden Retriever',\n    confidence: 0.95,\n    features: {\n      color: 'golden',\n      size: 'large',\n      age: 'adult'\n    }\n  }),\n  findSimilarPets: jest.fn().mockResolvedValue([]),\n  generateSearchSuggestions: jest.fn().mockResolvedValue(['golden retriever', 'labrador'])\n}));"],"version":3}