{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\config\\passport.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\config\\passport.ts"],"sourcesContent":["import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { config } from './environment';\nimport { IUser, User } from '../models/User';\nimport { logger } from '../utils/logger';\n\n// 序列化用戶 - 將用戶 ID 存儲到 session\npassport.serializeUser((user: any, done) => {\n  done(null, user._id);\n});\n\n// 反序列化用戶 - 從 session 中的 ID 獲取完整用戶資料\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await User.findById(id);\n    done(null, user);\n  } catch (error) {\n    logger.error('用戶反序列化失敗', { error, userId: id });\n    done(error, null);\n  }\n});\n\n// Google OAuth 策略配置\npassport.use(\n  new GoogleStrategy(\n    {\n      clientID: config.google.clientId,\n      clientSecret: config.google.clientSecret,\n      callbackURL: config.google.callbackUrl,\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n        logger.info('Google OAuth 回調觸發', { \n          profileId: profile.id, \n          email: profile.emails?.[0]?.value \n        });\n\n        // 檢查是否已存在該 Google 帳號的用戶\n        let user = await User.findOne({ \n          $or: [\n            { googleId: profile.id },\n            { email: profile.emails?.[0]?.value }\n          ]\n        });\n\n        if (user) {\n          // 如果用戶存在但沒有 Google ID，則更新\n          if (!user.googleId) {\n            user.googleId = profile.id;\n            user.isEmailVerified = true; // Google 帳號預設已驗證\n            await user.save();\n            logger.info('現有用戶已連結 Google 帳號', { userId: user._id, googleId: profile.id });\n          }\n          \n          // 更新最後登入時間\n          user.lastLoginAt = new Date();\n          await user.save();\n          \n          return done(null, user);\n        }\n\n        // 創建新用戶\n        const email = profile.emails?.[0]?.value;\n        const name = profile.displayName || profile.name?.givenName || 'Google 用戶';\n        const avatar = profile.photos?.[0]?.value;\n\n        if (!email) {\n          logger.error('Google 帳號缺少電子郵件', { profileId: profile.id });\n          return done(new Error('無法從 Google 帳號獲取電子郵件地址'), false);\n        }\n\n        user = new User({\n          email: email,\n          name,\n          avatar,\n          googleId: profile.id,\n          isEmailVerified: true, // Google 帳號預設已驗證\n          password: Math.random().toString(36).slice(-8), // 生成隨機密碼（不會被使用）\n          lastLoginAt: new Date(),\n          authProvider: 'google',\n          privacySettings: {\n            showEmail: false,\n            showPhone: true,\n            allowDirectContact: true,\n            showFullName: false,\n            profileVisibility: 'registered',\n            emailNotifications: {\n              newMatches: true,\n              messages: true,\n              updates: false,\n              marketing: false,\n            },\n            smsNotifications: {\n              urgentAlerts: true,\n              matches: false,\n            },\n          },\n        });\n\n        await user.save();\n        logger.info('新 Google 用戶創建成功', { userId: user._id, email, googleId: profile.id });\n\n        return done(null, user);\n      } catch (error) {\n        logger.error('Google OAuth 處理失敗', { error, profileId: profile.id });\n        return done(error, false);\n      }\n    }\n  )\n);\n\nexport default passport;"],"version":3}