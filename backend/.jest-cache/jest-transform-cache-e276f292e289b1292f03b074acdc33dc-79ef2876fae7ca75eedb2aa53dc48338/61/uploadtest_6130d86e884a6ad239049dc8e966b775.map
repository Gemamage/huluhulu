{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\upload.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\upload.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { User, IUser } from '../../src/models/User';\nimport { uploadRoutes } from '../../src/routes/upload';\nimport { auth } from '../../src/middleware/auth';\nimport { errorHandler } from '../../src/middleware/error-handler';\nimport { validUserData } from '../utils/testData';\nimport { CloudinaryService } from '../../src/services/cloudinary';\nimport { AIService } from '../../src/services/ai';\nimport path from 'path';\nimport fs from 'fs';\n\n// Mock services\njest.mock('../../src/services/cloudinary');\njest.mock('../../src/services/ai');\n\nconst mockCloudinaryService = CloudinaryService as jest.Mocked<typeof CloudinaryService>;\nconst mockAIService = AIService as jest.Mocked<typeof AIService>;\n\n// 創建測試應用\nconst app = express();\napp.use(express.json());\napp.use('/api/upload', uploadRoutes);\napp.use(errorHandler);\n\n// Create test image buffer\nconst createTestImageBuffer = () => {\n  // Simple 1x1 pixel PNG\n  return Buffer.from([\n    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,\n    0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53,\n    0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41,\n    0x54, 0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00,\n    0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01,\n    0xE2, 0x21, 0xBC, 0x33, 0x00, 0x00, 0x00, 0x00,\n    0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\n  ]);\n};\n\ndescribe('Upload Routes', () => {\n  let testUser: IUser;\n  let adminUser: IUser;\n  let authToken: string;\n  let adminToken: string;\n\n  beforeEach(async () => {\n    await User.deleteMany({});\n\n    testUser = await new User({\n      ...validUserData,\n      isEmailVerified: true\n    }).save();\n    authToken = testUser.generateAuthToken();\n\n    adminUser = await new User({\n      ...validUserData,\n      email: 'admin@example.com',\n      role: 'admin',\n      isEmailVerified: true\n    }).save();\n    adminToken = adminUser.generateAuthToken();\n\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup default mock implementations\n    mockCloudinaryService.uploadImage.mockResolvedValue({\n      public_id: 'test_image_123',\n      secure_url: 'https://res.cloudinary.com/test/image/upload/test_image_123.jpg',\n      width: 800,\n      height: 600,\n      format: 'jpg',\n      bytes: 50000\n    });\n\n    mockCloudinaryService.deleteImage.mockResolvedValue({ result: 'ok' });\n    mockCloudinaryService.getOptimizedUrl.mockReturnValue('https://res.cloudinary.com/test/image/upload/c_fill,w_300,h_300/test_image_123.jpg');\n    mockCloudinaryService.healthCheck.mockResolvedValue({ status: 'ok', timestamp: new Date() });\n\n    mockAIService.analyzeImage.mockResolvedValue({\n      breed: '黃金獵犬',\n      confidence: 0.95,\n      features: {\n        color: '金色',\n        size: '大型',\n        coat: '長毛'\n      },\n      tags: ['狗', '黃金獵犬', '寵物']\n    });\n  });\n\n  afterEach(async () => {\n    await User.deleteMany({});\n  });\n\n  describe('POST /api/upload/single', () => {\n    it('should upload single image successfully', async () => {\n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        public_id: 'test_image_123',\n        secure_url: expect.stringContaining('cloudinary.com'),\n        width: 800,\n        height: 600\n      });\n      expect(mockCloudinaryService.uploadImage).toHaveBeenCalledTimes(1);\n    });\n\n    it('should return error without image', async () => {\n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('請選擇要上傳的圖片');\n    });\n\n    it('should return error without authentication', async () => {\n      const response = await request(app)\n        .post('/api/upload/single')\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('未提供認證令牌');\n    });\n\n    it('should handle cloudinary upload error', async () => {\n      mockCloudinaryService.uploadImage.mockRejectedValue(new Error('Upload failed'));\n\n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('圖片上傳失敗');\n    });\n\n    it('should validate file type', async () => {\n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', Buffer.from('not an image'), 'test.txt')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('檔案類型');\n    });\n  });\n\n  describe('POST /api/upload/multiple', () => {\n    it('should upload multiple images successfully', async () => {\n      const response = await request(app)\n        .post('/api/upload/multiple')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('images', createTestImageBuffer(), 'test1.jpg')\n        .attach('images', createTestImageBuffer(), 'test2.jpg')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveLength(2);\n      expect(response.body.data[0]).toMatchObject({\n        public_id: 'test_image_123',\n        secure_url: expect.stringContaining('cloudinary.com')\n      });\n      expect(mockCloudinaryService.uploadImage).toHaveBeenCalledTimes(2);\n    });\n\n    it('should return error without images', async () => {\n      const response = await request(app)\n        .post('/api/upload/multiple')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('請選擇要上傳的圖片');\n    });\n\n    it('should handle partial upload failures', async () => {\n      mockCloudinaryService.uploadImage\n        .mockResolvedValueOnce({\n          public_id: 'test_image_123',\n          secure_url: 'https://res.cloudinary.com/test/image/upload/test_image_123.jpg',\n          width: 800,\n          height: 600,\n          format: 'jpg',\n          bytes: 50000\n        })\n        .mockRejectedValueOnce(new Error('Upload failed'));\n\n      const response = await request(app)\n        .post('/api/upload/multiple')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('images', createTestImageBuffer(), 'test1.jpg')\n        .attach('images', createTestImageBuffer(), 'test2.jpg')\n        .expect(207); // Partial success\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.successful).toHaveLength(1);\n      expect(response.body.data.failed).toHaveLength(1);\n    });\n\n    it('should limit number of files', async () => {\n      const files = Array.from({ length: 11 }, (_, i) => createTestImageBuffer());\n      \n      let req = request(app)\n        .post('/api/upload/multiple')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      files.forEach((buffer, i) => {\n        req = req.attach('images', buffer, `test${i}.jpg`);\n      });\n\n      const response = await req.expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('檔案數量');\n    });\n  });\n\n  describe('POST /api/upload/avatar', () => {\n    it('should upload avatar successfully', async () => {\n      const response = await request(app)\n        .post('/api/upload/avatar')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('avatar', createTestImageBuffer(), 'avatar.jpg')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        public_id: 'test_image_123',\n        secure_url: expect.stringContaining('cloudinary.com')\n      });\n      expect(response.body.message).toBe('頭像上傳成功');\n\n      // Verify user avatar is updated\n      const updatedUser = await User.findById(testUser._id);\n      expect(updatedUser?.avatar).toBe('https://res.cloudinary.com/test/image/upload/test_image_123.jpg');\n    });\n\n    it('should return error without avatar', async () => {\n      const response = await request(app)\n        .post('/api/upload/avatar')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('請選擇頭像圖片');\n    });\n\n    it('should delete old avatar when uploading new one', async () => {\n      // Set existing avatar\n      await User.findByIdAndUpdate(testUser._id, {\n        avatar: 'https://res.cloudinary.com/test/image/upload/old_avatar_123.jpg'\n      });\n\n      const response = await request(app)\n        .post('/api/upload/avatar')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('avatar', createTestImageBuffer(), 'new_avatar.jpg')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(mockCloudinaryService.deleteImage).toHaveBeenCalledWith('old_avatar_123');\n    });\n  });\n\n  describe('DELETE /api/upload/delete/:publicId', () => {\n    it('should delete image successfully', async () => {\n      const response = await request(app)\n        .delete('/api/upload/delete/test_image_123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toBe('圖片已刪除');\n      expect(mockCloudinaryService.deleteImage).toHaveBeenCalledWith('test_image_123');\n    });\n\n    it('should return error without authentication', async () => {\n      const response = await request(app)\n        .delete('/api/upload/delete/test_image_123')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('未提供認證令牌');\n    });\n\n    it('should handle cloudinary delete error', async () => {\n      mockCloudinaryService.deleteImage.mockRejectedValue(new Error('Delete failed'));\n\n      const response = await request(app)\n        .delete('/api/upload/delete/test_image_123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('圖片刪除失敗');\n    });\n  });\n\n  describe('POST /api/upload/analyze', () => {\n    it('should analyze image from file upload successfully', async () => {\n      const response = await request(app)\n        .post('/api/upload/analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        breed: '黃金獵犬',\n        confidence: 0.95,\n        features: expect.any(Object),\n        tags: expect.any(Array)\n      });\n      expect(mockAIService.analyzeImage).toHaveBeenCalledTimes(1);\n    });\n\n    it('should analyze image from URL successfully', async () => {\n      const imageUrl = 'https://example.com/test-image.jpg';\n      \n      const response = await request(app)\n        .post('/api/upload/analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ imageUrl })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        breed: '黃金獵犬',\n        confidence: 0.95\n      });\n      expect(mockAIService.analyzeImage).toHaveBeenCalledWith(imageUrl);\n    });\n\n    it('should return error without image or URL', async () => {\n      const response = await request(app)\n        .post('/api/upload/analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('請提供圖片檔案或圖片 URL');\n    });\n\n    it('should handle AI analysis error', async () => {\n      mockAIService.analyzeImage.mockRejectedValue(new Error('AI analysis failed'));\n\n      const response = await request(app)\n        .post('/api/upload/analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('圖片分析失敗');\n    });\n\n    it('should validate image URL format', async () => {\n      const response = await request(app)\n        .post('/api/upload/analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ imageUrl: 'invalid-url' })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n  });\n\n  describe('POST /api/upload/upload-and-analyze', () => {\n    it('should upload and analyze image successfully', async () => {\n      const response = await request(app)\n        .post('/api/upload/upload-and-analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .field('optimize', 'true')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        upload: {\n          public_id: 'test_image_123',\n          secure_url: expect.stringContaining('cloudinary.com')\n        },\n        analysis: {\n          breed: '黃金獵犬',\n          confidence: 0.95\n        }\n      });\n      expect(mockCloudinaryService.uploadImage).toHaveBeenCalledTimes(1);\n      expect(mockAIService.analyzeImage).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle upload failure gracefully', async () => {\n      mockCloudinaryService.uploadImage.mockRejectedValue(new Error('Upload failed'));\n\n      const response = await request(app)\n        .post('/api/upload/upload-and-analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('圖片上傳失敗');\n    });\n\n    it('should handle analysis failure after successful upload', async () => {\n      mockAIService.analyzeImage.mockRejectedValue(new Error('Analysis failed'));\n\n      const response = await request(app)\n        .post('/api/upload/upload-and-analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.upload).toBeDefined();\n      expect(response.body.data.analysis).toBeNull();\n      expect(response.body.data.analysisError).toBe('圖片分析失敗，但上傳成功');\n    });\n  });\n\n  describe('GET /api/upload/config', () => {\n    it('should return upload configuration', async () => {\n      const response = await request(app)\n        .get('/api/upload/config')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        maxFileSize: expect.any(Number),\n        maxFiles: expect.any(Number),\n        allowedTypes: expect.any(Array),\n        allowedExtensions: expect.any(Array)\n      });\n    });\n\n    it('should not require authentication', async () => {\n      const response = await request(app)\n        .get('/api/upload/config')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n  });\n\n  describe('DELETE /api/upload/batch-delete', () => {\n    it('should delete multiple images successfully', async () => {\n      const publicIds = ['image1', 'image2', 'image3'];\n      \n      const response = await request(app)\n        .delete('/api/upload/batch-delete')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ publicIds })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.successful).toHaveLength(3);\n      expect(response.body.data.failed).toHaveLength(0);\n      expect(mockCloudinaryService.deleteImage).toHaveBeenCalledTimes(3);\n    });\n\n    it('should handle partial deletion failures', async () => {\n      mockCloudinaryService.deleteImage\n        .mockResolvedValueOnce({ result: 'ok' })\n        .mockRejectedValueOnce(new Error('Delete failed'))\n        .mockResolvedValueOnce({ result: 'ok' });\n\n      const publicIds = ['image1', 'image2', 'image3'];\n      \n      const response = await request(app)\n        .delete('/api/upload/batch-delete')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ publicIds })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.successful).toHaveLength(2);\n      expect(response.body.data.failed).toHaveLength(1);\n    });\n\n    it('should validate publicIds array', async () => {\n      const response = await request(app)\n        .delete('/api/upload/batch-delete')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ publicIds: 'not-an-array' })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should limit batch size', async () => {\n      const publicIds = Array.from({ length: 101 }, (_, i) => `image${i}`);\n      \n      const response = await request(app)\n        .delete('/api/upload/batch-delete')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ publicIds })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n  });\n\n  describe('GET /api/upload/optimize/:publicId', () => {\n    it('should return optimized image URL successfully', async () => {\n      const response = await request(app)\n        .get('/api/upload/optimize/test_image_123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ width: 300, height: 300, quality: 80 })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        originalUrl: expect.stringContaining('test_image_123'),\n        optimizedUrl: expect.stringContaining('c_fill,w_300,h_300')\n      });\n      expect(mockCloudinaryService.getOptimizedUrl).toHaveBeenCalledWith(\n        'test_image_123',\n        expect.objectContaining({ width: 300, height: 300, quality: 80 })\n      );\n    });\n\n    it('should use default optimization parameters', async () => {\n      const response = await request(app)\n        .get('/api/upload/optimize/test_image_123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(mockCloudinaryService.getOptimizedUrl).toHaveBeenCalledWith(\n        'test_image_123',\n        expect.objectContaining({ width: 800, height: 600, quality: 80 })\n      );\n    });\n\n    it('should validate optimization parameters', async () => {\n      const response = await request(app)\n        .get('/api/upload/optimize/test_image_123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ width: 5000, height: 5000, quality: 150 })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n  });\n\n  describe('GET /api/upload/health', () => {\n    it('should return health status for admin', async () => {\n      const response = await request(app)\n        .get('/api/upload/health')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toMatchObject({\n        status: 'ok',\n        timestamp: expect.any(String)\n      });\n      expect(mockCloudinaryService.healthCheck).toHaveBeenCalledTimes(1);\n    });\n\n    it('should return error for non-admin users', async () => {\n      const response = await request(app)\n        .get('/api/upload/health')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('需要管理員權限');\n    });\n\n    it('should handle health check failure', async () => {\n      mockCloudinaryService.healthCheck.mockRejectedValue(new Error('Service unavailable'));\n\n      const response = await request(app)\n        .get('/api/upload/health')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('健康檢查失敗');\n    });\n  });\n\n  describe('File Validation', () => {\n    it('should reject files that are too large', async () => {\n      // Create a large buffer (simulate large file)\n      const largeBuffer = Buffer.alloc(11 * 1024 * 1024); // 11MB\n      \n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', largeBuffer, 'large.jpg')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('檔案大小');\n    });\n\n    it('should reject unsupported file types', async () => {\n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', Buffer.from('test'), 'test.exe')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('檔案類型');\n    });\n\n    it('should accept valid image types', async () => {\n      const validTypes = ['jpg', 'jpeg', 'png', 'gif', 'webp'];\n      \n      for (const type of validTypes) {\n        const response = await request(app)\n          .post('/api/upload/single')\n          .set('Authorization', `Bearer ${authToken}`)\n          .attach('image', createTestImageBuffer(), `test.${type}`)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle malformed request body', async () => {\n      const response = await request(app)\n        .post('/api/upload/analyze')\n        .set('Authorization', `Bearer ${authToken}`)\n        .set('Content-Type', 'application/json')\n        .send('{ invalid json }')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should handle missing required fields', async () => {\n      const response = await request(app)\n        .delete('/api/upload/batch-delete')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({})\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should handle service unavailability', async () => {\n      mockCloudinaryService.uploadImage.mockRejectedValue(new Error('Service unavailable'));\n\n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), 'test.jpg')\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('圖片上傳失敗');\n    });\n  });\n\n  describe('Security', () => {\n    it('should sanitize file names', async () => {\n      const maliciousFileName = '../../../etc/passwd.jpg';\n      \n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', createTestImageBuffer(), maliciousFileName)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      // Verify that the file name was sanitized in the upload call\n      expect(mockCloudinaryService.uploadImage).toHaveBeenCalledWith(\n        expect.any(Buffer),\n        expect.objectContaining({\n          // Should not contain path traversal\n          public_id: expect.not.stringContaining('../')\n        })\n      );\n    });\n\n    it('should validate image content', async () => {\n      // Test with non-image content\n      const fakeImage = Buffer.from('This is not an image');\n      \n      const response = await request(app)\n        .post('/api/upload/single')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('image', fakeImage, 'fake.jpg')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should prevent unauthorized access to admin endpoints', async () => {\n      const response = await request(app)\n        .get('/api/upload/health')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toBe('需要管理員權限');\n    });\n  });\n});"],"version":3}