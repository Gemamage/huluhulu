a63004ef7d85d14abb45f38e5cd35a64
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// petService 單元測試 - 簡化版本，不依賴數據庫
const globals_1 = require("@jest/globals");
// 模擬外部依賴
globals_1.jest.mock('../../src/models/Pet');
globals_1.jest.mock('../../src/models/User');
globals_1.jest.mock('../../src/services/cloudinaryService');
globals_1.jest.mock('../../src/services/aiService');
globals_1.jest.mock('../../src/utils/logger');
// 設置測試環境變數
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-jwt-secret-key-with-minimum-32-characters-length';
// 導入要測試的服務
const petService_1 = require("../../src/services/petService");
// 模擬的 Pet 模型
const mockPet = {
    _id: '507f1f77bcf86cd799439011',
    name: '小白',
    type: 'dog',
    breed: '拉布拉多',
    status: 'lost',
    owner: '507f1f77bcf86cd799439012',
    save: globals_1.jest.fn(),
    populate: globals_1.jest.fn().mockReturnThis(),
    createdAt: new Date(),
    updatedAt: new Date()
};
// 模擬的 User 模型
const mockUser = {
    _id: '507f1f77bcf86cd799439012',
    username: 'testuser',
    email: 'test@example.com'
};
// 模擬 Pet 模型的靜態方法
const Pet = {
    findById: globals_1.jest.fn(),
    findOne: globals_1.jest.fn(),
    findByIdAndUpdate: globals_1.jest.fn(),
    findByIdAndDelete: globals_1.jest.fn(),
    find: globals_1.jest.fn(),
    countDocuments: globals_1.jest.fn(),
    deleteMany: globals_1.jest.fn()
};
// 模擬 User 模型的靜態方法
const User = {
    findById: globals_1.jest.fn(),
    deleteMany: globals_1.jest.fn()
};
// 模擬 CloudinaryService
const CloudinaryService = {
    uploadImage: globals_1.jest.fn(),
    deleteImage: globals_1.jest.fn()
};
// 模擬 aiService
const aiService = {
    analyzeImage: globals_1.jest.fn()
};
// 設置模擬
require('../../src/models/Pet').Pet = Pet;
require('../../src/models/User').User = User;
require('../../src/services/cloudinaryService').CloudinaryService = CloudinaryService;
require('../../src/services/aiService').aiService = aiService;
(0, globals_1.describe)('PetService 測試', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        // 設置預設的模擬回應
        User.findById.mockResolvedValue(mockUser);
        Pet.findById.mockResolvedValue({
            ...mockPet,
            populate: globals_1.jest.fn().mockResolvedValue(mockPet)
        });
        mockPet.save.mockResolvedValue(mockPet);
        mockPet.populate.mockResolvedValue(mockPet);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.restoreAllMocks();
    });
    (0, globals_1.describe)('createPet', () => {
        const petData = {
            name: '小花',
            type: 'cat',
            breed: '波斯貓',
            status: 'lost',
            description: '走失的小貓',
            location: {
                address: '台北市信義區',
                city: '台北市',
                coordinates: [121.5654, 25.0330]
            },
            contact: {
                phone: '0912345678',
                email: 'owner@example.com'
            }
        };
        (0, globals_1.it)('應該成功創建寵物', async () => {
            // 模擬 Pet 構造函數
            const mockPetConstructor = globals_1.jest.fn().mockImplementation(() => ({
                ...mockPet,
                ...petData,
                save: globals_1.jest.fn().mockResolvedValue({ ...mockPet, ...petData }),
                populate: globals_1.jest.fn().mockResolvedValue({ ...mockPet, ...petData })
            }));
            Pet.prototype = mockPetConstructor.prototype;
            global.Pet = mockPetConstructor;
            const result = await petService_1.PetService.createPet('507f1f77bcf86cd799439012', petData);
            (0, globals_1.expect)(User.findById).toHaveBeenCalledWith('507f1f77bcf86cd799439012');
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.name).toBe(petData.name);
        });
        (0, globals_1.it)('應該在擁有者不存在時拋出錯誤', async () => {
            User.findById.mockResolvedValue(null);
            await (0, globals_1.expect)(petService_1.PetService.createPet('507f1f77bcf86cd799439999', petData))
                .rejects.toThrow('擁有者不存在');
        });
        (0, globals_1.it)('應該處理圖片上傳', async () => {
            const petDataWithImages = {
                ...petData,
                images: ['image1.jpg', 'image2.jpg']
            };
            CloudinaryService.uploadImage.mockResolvedValue({
                secure_url: 'https://cloudinary.com/test.jpg',
                public_id: 'test_id',
                width: 800,
                height: 600
            });
            const mockPetConstructor = globals_1.jest.fn().mockImplementation(() => ({
                ...mockPet,
                save: globals_1.jest.fn().mockResolvedValue(mockPet),
                populate: globals_1.jest.fn().mockResolvedValue(mockPet)
            }));
            global.Pet = mockPetConstructor;
            await petService_1.PetService.createPet('507f1f77bcf86cd799439012', petDataWithImages);
            (0, globals_1.expect)(CloudinaryService.uploadImage).toHaveBeenCalledTimes(2);
        });
    });
    (0, globals_1.describe)('getPetById', () => {
        (0, globals_1.it)('應該成功根據ID獲取寵物', async () => {
            const result = await petService_1.PetService.getPetById('507f1f77bcf86cd799439011');
            (0, globals_1.expect)(Pet.findById).toHaveBeenCalledWith('507f1f77bcf86cd799439011');
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result?._id).toBe('507f1f77bcf86cd799439011');
        });
        (0, globals_1.it)('應該在ID無效時拋出錯誤', async () => {
            await (0, globals_1.expect)(petService_1.PetService.getPetById('invalid-id'))
                .rejects.toThrow('無效的寵物 ID');
        });
        (0, globals_1.it)('應該返回null當寵物不存在', async () => {
            Pet.findById.mockReturnValue({
                populate: globals_1.jest.fn().mockReturnValue({
                    exec: globals_1.jest.fn().mockResolvedValue(null)
                })
            });
            const result = await petService_1.PetService.getPetById('507f1f77bcf86cd799439011');
            (0, globals_1.expect)(result).toBeNull();
        });
    });
    (0, globals_1.describe)('updatePet', () => {
        const updateData = {
            name: '更新的小白',
            description: '更新的描述'
        };
        (0, globals_1.it)('應該成功更新寵物', async () => {
            Pet.findOne.mockResolvedValue(mockPet);
            Pet.findByIdAndUpdate.mockReturnValue({
                populate: globals_1.jest.fn().mockResolvedValue({ ...mockPet, ...updateData })
            });
            const result = await petService_1.PetService.updatePet('507f1f77bcf86cd799439011', '507f1f77bcf86cd799439012', updateData);
            (0, globals_1.expect)(Pet.findOne).toHaveBeenCalledWith({ _id: '507f1f77bcf86cd799439011', owner: '507f1f77bcf86cd799439012' });
            (0, globals_1.expect)(Pet.findByIdAndUpdate).toHaveBeenCalled();
            (0, globals_1.expect)(result?.name).toBe(updateData.name);
        });
        (0, globals_1.it)('應該在寵物不存在時拋出錯誤', async () => {
            Pet.findOne.mockResolvedValue(null);
            await (0, globals_1.expect)(petService_1.PetService.updatePet('507f1f77bcf86cd799439011', '507f1f77bcf86cd799439012', updateData))
                .rejects.toThrow('寵物不存在或您沒有權限修改');
        });
    });
    (0, globals_1.describe)('deletePet', () => {
        (0, globals_1.it)('應該成功刪除寵物', async () => {
            Pet.findOne.mockResolvedValue({
                ...mockPet,
                images: [{ publicId: 'test_id', url: 'test.jpg' }]
            });
            Pet.findByIdAndDelete.mockResolvedValue(mockPet);
            CloudinaryService.deleteImage.mockResolvedValue(true);
            const result = await petService_1.PetService.deletePet('507f1f77bcf86cd799439011', '507f1f77bcf86cd799439012');
            (0, globals_1.expect)(Pet.findOne).toHaveBeenCalledWith({ _id: '507f1f77bcf86cd799439011', owner: '507f1f77bcf86cd799439012' });
            (0, globals_1.expect)(Pet.findByIdAndDelete).toHaveBeenCalledWith('507f1f77bcf86cd799439011');
            (0, globals_1.expect)(CloudinaryService.deleteImage).toHaveBeenCalledWith('test_id');
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('應該在寵物不存在時拋出錯誤', async () => {
            Pet.findOne.mockResolvedValue(null);
            await (0, globals_1.expect)(petService_1.PetService.deletePet('507f1f77bcf86cd799439011', '507f1f77bcf86cd799439012'))
                .rejects.toThrow('寵物不存在或您沒有權限刪除');
        });
    });
    (0, globals_1.describe)('getAllPets', () => {
        (0, globals_1.it)('應該成功獲取所有寵物', async () => {
            const mockPets = [mockPet, { ...mockPet, _id: '507f1f77bcf86cd799439013', name: '小黑' }];
            Pet.find.mockReturnValue({
                populate: globals_1.jest.fn().mockReturnValue({
                    sort: globals_1.jest.fn().mockReturnValue({
                        skip: globals_1.jest.fn().mockReturnValue({
                            limit: globals_1.jest.fn().mockReturnValue({
                                exec: globals_1.jest.fn().mockResolvedValue(mockPets)
                            })
                        })
                    })
                })
            });
            Pet.countDocuments.mockResolvedValue(2);
            const result = await petService_1.PetService.getAllPets(1, 10);
            (0, globals_1.expect)(result.pets).toHaveLength(2);
            (0, globals_1.expect)(result.total).toBe(2);
            (0, globals_1.expect)(result.page).toBe(1);
            (0, globals_1.expect)(result.totalPages).toBe(1);
        });
    });
    (0, globals_1.describe)('incrementViewCount', () => {
        (0, globals_1.it)('應該成功增加瀏覽次數', async () => {
            Pet.findByIdAndUpdate.mockResolvedValue(mockPet);
            await petService_1.PetService.incrementViewCount('507f1f77bcf86cd799439011');
            (0, globals_1.expect)(Pet.findByIdAndUpdate).toHaveBeenCalledWith('507f1f77bcf86cd799439011', { $inc: { viewCount: 1 } }, { new: true });
        });
    });
    (0, globals_1.describe)('incrementShareCount', () => {
        (0, globals_1.it)('應該成功增加分享次數', async () => {
            Pet.findByIdAndUpdate.mockResolvedValue(mockPet);
            await petService_1.PetService.incrementShareCount('507f1f77bcf86cd799439011');
            (0, globals_1.expect)(Pet.findByIdAndUpdate).toHaveBeenCalledWith('507f1f77bcf86cd799439011', { $inc: { shareCount: 1 } }, { new: true });
        });
    });
});
console.log('✅ petService 測試檔案已載入');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,