{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\statistics.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\statistics.ts"],"sourcesContent":["import { Notification } from \"../../models/Notification\";\nimport { logger } from \"../../utils/logger\";\nimport mongoose from \"mongoose\";\nimport { AIMatchingService } from \"./aiMatching\";\nimport { GeofenceService } from \"./geofence\";\nimport { ReminderService } from \"./reminders\";\n\nexport interface SmartNotificationStats {\n  aiMatching: {\n    enabled: boolean;\n    running: boolean;\n    lastRun?: Date;\n    matchesFound: number;\n  };\n  geofence: {\n    enabled: boolean;\n    running: boolean;\n    activeAreas: number;\n    totalAreas: number;\n  };\n  reminders: {\n    enabled: boolean;\n    running: boolean;\n    sentToday: number;\n  };\n  totalNotifications: number;\n}\n\nexport interface UserNotificationStats {\n  aiMatching: {\n    enabled: boolean;\n    matchesFound: number;\n    lastRun?: Date;\n  };\n  geofencing: {\n    enabled: boolean;\n    activeAreas: number;\n  };\n  reminders: {\n    enabled: boolean;\n    sentCount: number;\n  };\n  totalNotifications: number;\n}\n\nexport class NotificationStatisticsService {\n  /**\n   * 獲取智能通知統計\n   */\n  static async getSmartNotificationStats(): Promise<SmartNotificationStats> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n\n    // 獲取今日通知總數\n    const totalNotifications = await Notification.countDocuments({\n      createdAt: {\n        $gte: today,\n        $lt: tomorrow,\n      },\n    });\n\n    // 獲取各服務狀態\n    const aiMatchingStatus = AIMatchingService.getStatus();\n    const geofenceStats = GeofenceService.getStats();\n    const reminderStats = await ReminderService.getStats();\n\n    return {\n      aiMatching: {\n        enabled: aiMatchingStatus.enabled,\n        running: aiMatchingStatus.running,\n        lastRun: aiMatchingStatus.lastRun || undefined,\n        matchesFound: 0, // 可以從統計中獲取\n      },\n      geofence: {\n        enabled: geofenceStats.enabled,\n        running: geofenceStats.running,\n        activeAreas: geofenceStats.activeAreas,\n        totalAreas: geofenceStats.totalAreas,\n      },\n      reminders: {\n        enabled: reminderStats.enabled,\n        running: reminderStats.running,\n        sentToday: reminderStats.sentToday,\n      },\n      totalNotifications,\n    };\n  }\n\n  /**\n   * 獲取智能通知統計（用戶特定）\n   */\n  static async getSmartNotificationStatistics(options: {\n    userId: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<UserNotificationStats> {\n    const { userId, startDate, endDate } = options;\n\n    // 設定日期範圍\n    const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 預設 30 天前\n    const end = endDate || new Date();\n\n    // 統計通知數量\n    const notificationStats = await Notification.aggregate([\n      {\n        $match: {\n          userId: new mongoose.Types.ObjectId(userId),\n          createdAt: { $gte: start, $lte: end },\n        },\n      },\n      {\n        $group: {\n          _id: \"$type\",\n          count: { $sum: 1 },\n        },\n      },\n    ]);\n\n    const stats = notificationStats.reduce(\n      (acc, stat) => {\n        acc[stat._id] = stat.count;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    // 統計用戶的地理圍欄\n    const userGeofences = await GeofenceService.getUserGeofences(userId);\n\n    // 獲取 AI 配對狀態\n    const aiMatchingStatus = AIMatchingService.getStatus();\n    const geofenceStats = GeofenceService.getStats();\n    const reminderStats = await ReminderService.getStats();\n\n    return {\n      aiMatching: {\n        enabled: aiMatchingStatus.enabled,\n        matchesFound: stats[\"AI_MATCH_SUGGESTION\"] || 0,\n        lastRun: aiMatchingStatus.lastRun || undefined,\n      },\n      geofencing: {\n        enabled: geofenceStats.enabled,\n        activeAreas: userGeofences.length,\n      },\n      reminders: {\n        enabled: reminderStats.enabled,\n        sentCount: stats[\"REMINDER\"] || 0,\n      },\n      totalNotifications: Object.values(stats).reduce(\n        (sum: number, count: unknown) => sum + (count as number),\n        0,\n      ),\n    };\n  }\n\n  /**\n   * 獲取通知類型統計\n   */\n  static async getNotificationTypeStats(options: {\n    userId?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<Record<string, number>> {\n    const { userId, startDate, endDate } = options;\n\n    const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const end = endDate || new Date();\n\n    const matchConditions: any = {\n      createdAt: { $gte: start, $lte: end },\n    };\n\n    if (userId) {\n      matchConditions.userId = new mongoose.Types.ObjectId(userId);\n    }\n\n    const stats = await Notification.aggregate([\n      { $match: matchConditions },\n      {\n        $group: {\n          _id: \"$type\",\n          count: { $sum: 1 },\n        },\n      },\n      { $sort: { count: -1 } },\n    ]);\n\n    return stats.reduce(\n      (acc, stat) => {\n        acc[stat._id] = stat.count;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n  }\n\n  /**\n   * 獲取通知趨勢統計\n   */\n  static async getNotificationTrends(options: {\n    userId?: string;\n    days?: number;\n  }): Promise<{\n    daily: Array<{ date: string; count: number }>;\n    weekly: Array<{ week: string; count: number }>;\n  }> {\n    const { userId, days = 30 } = options;\n\n    const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n    const endDate = new Date();\n\n    const matchConditions: any = {\n      createdAt: { $gte: startDate, $lte: endDate },\n    };\n\n    if (userId) {\n      matchConditions.userId = new mongoose.Types.ObjectId(userId);\n    }\n\n    // 每日統計\n    const dailyStats = await Notification.aggregate([\n      { $match: matchConditions },\n      {\n        $group: {\n          _id: {\n            year: { $year: \"$createdAt\" },\n            month: { $month: \"$createdAt\" },\n            day: { $dayOfMonth: \"$createdAt\" },\n          },\n          count: { $sum: 1 },\n        },\n      },\n      { $sort: { \"_id.year\": 1, \"_id.month\": 1, \"_id.day\": 1 } },\n    ]);\n\n    // 每週統計\n    const weeklyStats = await Notification.aggregate([\n      { $match: matchConditions },\n      {\n        $group: {\n          _id: {\n            year: { $year: \"$createdAt\" },\n            week: { $week: \"$createdAt\" },\n          },\n          count: { $sum: 1 },\n        },\n      },\n      { $sort: { \"_id.year\": 1, \"_id.week\": 1 } },\n    ]);\n\n    return {\n      daily: dailyStats.map((stat) => ({\n        date: `${stat._id.year}-${String(stat._id.month).padStart(2, \"0\")}-${String(stat._id.day).padStart(2, \"0\")}`,\n        count: stat.count,\n      })),\n      weekly: weeklyStats.map((stat) => ({\n        week: `${stat._id.year}-W${String(stat._id.week).padStart(2, \"0\")}`,\n        count: stat.count,\n      })),\n    };\n  }\n\n  /**\n   * 獲取通知效果統計\n   */\n  static async getNotificationEffectivenessStats(options: {\n    userId?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<{\n    totalSent: number;\n    totalRead: number;\n    totalClicked: number;\n    readRate: number;\n    clickRate: number;\n    typeEffectiveness: Record<\n      string,\n      {\n        sent: number;\n        read: number;\n        clicked: number;\n        readRate: number;\n        clickRate: number;\n      }\n    >;\n  }> {\n    const { userId, startDate, endDate } = options;\n\n    const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const end = endDate || new Date();\n\n    const matchConditions: any = {\n      createdAt: { $gte: start, $lte: end },\n    };\n\n    if (userId) {\n      matchConditions.userId = new mongoose.Types.ObjectId(userId);\n    }\n\n    const stats = await Notification.aggregate([\n      { $match: matchConditions },\n      {\n        $group: {\n          _id: \"$type\",\n          totalSent: { $sum: 1 },\n          totalRead: { $sum: { $cond: [{ $eq: [\"$isRead\", true] }, 1, 0] } },\n          totalClicked: {\n            $sum: { $cond: [{ $ne: [\"$clickedAt\", null] }, 1, 0] },\n          },\n        },\n      },\n    ]);\n\n    let totalSent = 0;\n    let totalRead = 0;\n    let totalClicked = 0;\n    const typeEffectiveness: Record<string, any> = {};\n\n    for (const stat of stats) {\n      totalSent += stat.totalSent;\n      totalRead += stat.totalRead;\n      totalClicked += stat.totalClicked;\n\n      typeEffectiveness[stat._id] = {\n        sent: stat.totalSent,\n        read: stat.totalRead,\n        clicked: stat.totalClicked,\n        readRate:\n          stat.totalSent > 0 ? (stat.totalRead / stat.totalSent) * 100 : 0,\n        clickRate:\n          stat.totalSent > 0 ? (stat.totalClicked / stat.totalSent) * 100 : 0,\n      };\n    }\n\n    return {\n      totalSent,\n      totalRead,\n      totalClicked,\n      readRate: totalSent > 0 ? (totalRead / totalSent) * 100 : 0,\n      clickRate: totalSent > 0 ? (totalClicked / totalSent) * 100 : 0,\n      typeEffectiveness,\n    };\n  }\n\n  /**\n   * 清理過期統計數據\n   */\n  static async cleanupOldStats(daysToKeep: number = 90): Promise<{\n    deletedCount: number;\n  }> {\n    const cutoffDate = new Date(Date.now() - daysToKeep * 24 * 60 * 60 * 1000);\n\n    const result = await Notification.deleteMany({\n      createdAt: { $lt: cutoffDate },\n      isRead: true, // 只刪除已讀的舊通知\n    });\n\n    logger.info(\"清理過期統計數據完成\", {\n      deletedCount: result.deletedCount,\n      cutoffDate,\n      daysToKeep,\n    });\n\n    return {\n      deletedCount: result.deletedCount || 0,\n    };\n  }\n}\n"],"version":3}