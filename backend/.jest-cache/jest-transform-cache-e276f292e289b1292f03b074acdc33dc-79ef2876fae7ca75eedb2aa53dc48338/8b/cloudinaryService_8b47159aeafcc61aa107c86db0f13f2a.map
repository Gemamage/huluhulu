{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\cloudinaryService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\cloudinaryService.ts"],"sourcesContent":["import { v2 as cloudinary } from \"cloudinary\";\nimport { config } from \"../config/environment\";\nimport { AppError } from \"../utils/errors\";\nimport { logger } from \"../utils/logger\";\n\n// 配置 Cloudinary\ncloudinary.config({\n  cloud_name: config.cloudinary.cloudName,\n  api_key: config.cloudinary.apiKey,\n  api_secret: config.cloudinary.apiSecret,\n});\n\nexport interface CloudinaryUploadResult {\n  url: string;\n  secureUrl: string;\n  publicId: string;\n  format: string;\n  width: number;\n  height: number;\n  bytes: number;\n}\n\nexport interface CloudinaryUploadOptions {\n  folder?: string;\n  publicId?: string;\n  transformation?: any[];\n  resourceType?: \"image\" | \"video\" | \"raw\" | \"auto\";\n  format?: string;\n  quality?: string | number;\n}\n\nexport class CloudinaryService {\n  /**\n   * 驗證文件類型\n   */\n  private static validateFileType(mimeType: string): boolean {\n    const allowedTypes = [\n      \"image/jpeg\",\n      \"image/jpg\",\n      \"image/png\",\n      \"image/webp\",\n      \"image/gif\",\n    ];\n    return allowedTypes.includes(mimeType.toLowerCase());\n  }\n\n  /**\n   * 驗證文件大小\n   */\n  private static validateFileSize(size: number): boolean {\n    const maxSize = config.upload.maxFileSize; // 5MB\n    return size <= maxSize;\n  }\n\n  /**\n   * 上傳文件到 Cloudinary\n   */\n  static async uploadFile(\n    fileBuffer: Buffer,\n    originalName: string,\n    mimeType: string,\n    userId: string,\n    type: \"avatar\" | \"pet\" | \"general\" = \"general\",\n    options: CloudinaryUploadOptions = {},\n  ): Promise<CloudinaryUploadResult> {\n    try {\n      // 驗證文件類型\n      if (!this.validateFileType(mimeType)) {\n        throw new AppError(\n          \"不支援的文件類型，請上傳 JPG、PNG、WebP 或 GIF 格式的圖片\",\n          400,\n        );\n      }\n\n      // 驗證文件大小\n      if (!this.validateFileSize(fileBuffer.length)) {\n        throw new AppError(\"文件大小超過限制，請上傳小於 5MB 的圖片\", 400);\n      }\n\n      // 設定預設選項\n      const defaultOptions: CloudinaryUploadOptions = {\n        folder: `pet-finder/${type}s`,\n        publicId: `${type}-${userId}-${Date.now()}`,\n        resourceType: \"image\",\n        quality: \"auto\",\n        format: \"auto\",\n        ...options,\n      };\n\n      // 根據類型設定不同的轉換選項\n      if (type === \"avatar\") {\n        defaultOptions.transformation = [\n          { width: 200, height: 200, crop: \"fill\", gravity: \"face\" },\n          { quality: \"auto\", fetch_format: \"auto\" },\n        ];\n      } else if (type === \"pet\") {\n        defaultOptions.transformation = [\n          { width: 800, height: 600, crop: \"limit\" },\n          { quality: \"auto\", fetch_format: \"auto\" },\n        ];\n      }\n\n      // 上傳到 Cloudinary\n      const result = await new Promise<any>((resolve, reject) => {\n        cloudinary.uploader\n          .upload_stream(defaultOptions, (error, result) => {\n            if (error) {\n              logger.error(\"Cloudinary 上傳失敗\", { error, userId, type });\n              reject(new AppError(\"圖片上傳失敗，請稍後再試\", 500));\n            } else {\n              resolve(result);\n            }\n          })\n          .end(fileBuffer);\n      });\n\n      logger.info(\"Cloudinary 上傳成功\", {\n        userId,\n        type,\n        publicId: result.public_id,\n        url: result.secure_url,\n        originalName,\n      });\n\n      return {\n        url: result.url,\n        secureUrl: result.secure_url,\n        publicId: result.public_id,\n        format: result.format,\n        width: result.width,\n        height: result.height,\n        bytes: result.bytes,\n      };\n    } catch (error) {\n      logger.error(\"Cloudinary 服務錯誤\", { error, userId, type });\n      if (error instanceof AppError) {\n        throw error;\n      }\n      throw new AppError(\"圖片上傳服務暫時不可用，請稍後再試\", 500);\n    }\n  }\n\n  /**\n   * 刪除 Cloudinary 上的文件\n   */\n  static async deleteFile(publicId: string): Promise<void> {\n    try {\n      const result = await cloudinary.uploader.destroy(publicId);\n\n      if (result.result !== \"ok\") {\n        throw new AppError(\"文件刪除失敗\", 500);\n      }\n\n      logger.info(\"Cloudinary 文件刪除成功\", { publicId });\n    } catch (error) {\n      logger.error(\"Cloudinary 刪除失敗\", { error, publicId });\n      if (error instanceof AppError) {\n        throw error;\n      }\n      throw new AppError(\"文件刪除失敗，請稍後再試\", 500);\n    }\n  }\n\n  /**\n   * 獲取圖片的優化 URL\n   */\n  static getOptimizedUrl(\n    publicId: string,\n    options: {\n      width?: number;\n      height?: number;\n      crop?: string;\n      quality?: string | number;\n      format?: string;\n    } = {},\n  ): string {\n    return cloudinary.url(publicId, {\n      secure: true,\n      quality: \"auto\",\n      fetch_format: \"auto\",\n      ...options,\n    });\n  }\n\n  /**\n   * 批量上傳文件\n   */\n  static async uploadMultipleFiles(\n    files: Array<{\n      buffer: Buffer;\n      originalName: string;\n      mimeType: string;\n    }>,\n    userId: string,\n    type: \"avatar\" | \"pet\" | \"general\" = \"general\",\n  ): Promise<CloudinaryUploadResult[]> {\n    try {\n      const uploadPromises = files.map((file) =>\n        this.uploadFile(\n          file.buffer,\n          file.originalName,\n          file.mimeType,\n          userId,\n          type,\n        ),\n      );\n\n      const results = await Promise.all(uploadPromises);\n\n      logger.info(\"批量上傳完成\", {\n        userId,\n        type,\n        count: results.length,\n      });\n\n      return results;\n    } catch (error) {\n      logger.error(\"批量上傳失敗\", { error, userId, type });\n      throw new AppError(\"批量上傳失敗，請稍後再試\", 500);\n    }\n  }\n\n  /**\n   * 檢查 Cloudinary 連接狀態\n   */\n  static async checkConnection(): Promise<boolean> {\n    try {\n      // 嘗試獲取帳戶資訊來測試連接\n      await cloudinary.api.ping();\n      return true;\n    } catch (error) {\n      logger.error(\"Cloudinary 連接測試失敗\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * 獲取文件夾中的所有圖片\n   */\n  static async getImagesByFolder(\n    folder: string,\n    maxResults: number = 50,\n  ): Promise<any[]> {\n    try {\n      const result = await cloudinary.search\n        .expression(`folder:${folder}`)\n        .sort_by(\"created_at\", \"desc\")\n        .max_results(maxResults)\n        .execute();\n\n      return result.resources;\n    } catch (error) {\n      logger.error(\"獲取文件夾圖片失敗\", { error, folder });\n      throw new AppError(\"獲取圖片列表失敗\", 500);\n    }\n  }\n\n  /**\n   * 獲取圖片詳細資訊\n   */\n  static async getImageDetails(publicId: string): Promise<any> {\n    try {\n      const result = await cloudinary.api.resource(publicId, {\n        image_metadata: true,\n        colors: true,\n        faces: true,\n      });\n\n      return result;\n    } catch (error) {\n      logger.error(\"獲取圖片詳細資訊失敗\", { error, publicId });\n      throw new AppError(\"獲取圖片資訊失敗\", 500);\n    }\n  }\n}\n\nexport default CloudinaryService;\n"],"version":3}