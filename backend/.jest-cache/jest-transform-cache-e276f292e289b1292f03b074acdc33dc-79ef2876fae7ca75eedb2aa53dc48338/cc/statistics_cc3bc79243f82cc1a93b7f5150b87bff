e0817c11abc7b8a448c8c0bc736eb02a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationStatisticsService = void 0;
const Notification_1 = require("../../models/Notification");
const logger_1 = require("../../utils/logger");
const mongoose_1 = __importDefault(require("mongoose"));
const aiMatching_1 = require("./aiMatching");
const geofence_1 = require("./geofence");
const reminders_1 = require("./reminders");
class NotificationStatisticsService {
    /**
     * 獲取智能通知統計
     */
    static async getSmartNotificationStats() {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
        // 獲取今日通知總數
        const totalNotifications = await Notification_1.Notification.countDocuments({
            createdAt: {
                $gte: today,
                $lt: tomorrow
            }
        });
        // 獲取各服務狀態
        const aiMatchingStatus = aiMatching_1.AIMatchingService.getStatus();
        const geofenceStats = geofence_1.GeofenceService.getStats();
        const reminderStats = await reminders_1.ReminderService.getStats();
        return {
            aiMatching: {
                enabled: aiMatchingStatus.enabled,
                running: aiMatchingStatus.running,
                lastRun: aiMatchingStatus.lastRun || undefined,
                matchesFound: 0 // 可以從統計中獲取
            },
            geofence: {
                enabled: geofenceStats.enabled,
                running: geofenceStats.running,
                activeAreas: geofenceStats.activeAreas,
                totalAreas: geofenceStats.totalAreas
            },
            reminders: {
                enabled: reminderStats.enabled,
                running: reminderStats.running,
                sentToday: reminderStats.sentToday
            },
            totalNotifications
        };
    }
    /**
     * 獲取智能通知統計（用戶特定）
     */
    static async getSmartNotificationStatistics(options) {
        const { userId, startDate, endDate } = options;
        // 設定日期範圍
        const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 預設 30 天前
        const end = endDate || new Date();
        // 統計通知數量
        const notificationStats = await Notification_1.Notification.aggregate([
            {
                $match: {
                    userId: new mongoose_1.default.Types.ObjectId(userId),
                    createdAt: { $gte: start, $lte: end }
                }
            },
            {
                $group: {
                    _id: '$type',
                    count: { $sum: 1 }
                }
            }
        ]);
        const stats = notificationStats.reduce((acc, stat) => {
            acc[stat._id] = stat.count;
            return acc;
        }, {});
        // 統計用戶的地理圍欄
        const userGeofences = await geofence_1.GeofenceService.getUserGeofences(userId);
        // 獲取 AI 配對狀態
        const aiMatchingStatus = aiMatching_1.AIMatchingService.getStatus();
        const geofenceStats = geofence_1.GeofenceService.getStats();
        const reminderStats = await reminders_1.ReminderService.getStats();
        return {
            aiMatching: {
                enabled: aiMatchingStatus.enabled,
                matchesFound: stats['AI_MATCH_SUGGESTION'] || 0,
                lastRun: aiMatchingStatus.lastRun || undefined
            },
            geofencing: {
                enabled: geofenceStats.enabled,
                activeAreas: userGeofences.length
            },
            reminders: {
                enabled: reminderStats.enabled,
                sentCount: stats['REMINDER'] || 0
            },
            totalNotifications: Object.values(stats).reduce((sum, count) => sum + count, 0)
        };
    }
    /**
     * 獲取通知類型統計
     */
    static async getNotificationTypeStats(options) {
        const { userId, startDate, endDate } = options;
        const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
        const end = endDate || new Date();
        const matchConditions = {
            createdAt: { $gte: start, $lte: end }
        };
        if (userId) {
            matchConditions.userId = new mongoose_1.default.Types.ObjectId(userId);
        }
        const stats = await Notification_1.Notification.aggregate([
            { $match: matchConditions },
            {
                $group: {
                    _id: '$type',
                    count: { $sum: 1 }
                }
            },
            { $sort: { count: -1 } }
        ]);
        return stats.reduce((acc, stat) => {
            acc[stat._id] = stat.count;
            return acc;
        }, {});
    }
    /**
     * 獲取通知趨勢統計
     */
    static async getNotificationTrends(options) {
        const { userId, days = 30 } = options;
        const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
        const endDate = new Date();
        const matchConditions = {
            createdAt: { $gte: startDate, $lte: endDate }
        };
        if (userId) {
            matchConditions.userId = new mongoose_1.default.Types.ObjectId(userId);
        }
        // 每日統計
        const dailyStats = await Notification_1.Notification.aggregate([
            { $match: matchConditions },
            {
                $group: {
                    _id: {
                        year: { $year: '$createdAt' },
                        month: { $month: '$createdAt' },
                        day: { $dayOfMonth: '$createdAt' }
                    },
                    count: { $sum: 1 }
                }
            },
            { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } }
        ]);
        // 每週統計
        const weeklyStats = await Notification_1.Notification.aggregate([
            { $match: matchConditions },
            {
                $group: {
                    _id: {
                        year: { $year: '$createdAt' },
                        week: { $week: '$createdAt' }
                    },
                    count: { $sum: 1 }
                }
            },
            { $sort: { '_id.year': 1, '_id.week': 1 } }
        ]);
        return {
            daily: dailyStats.map(stat => ({
                date: `${stat._id.year}-${String(stat._id.month).padStart(2, '0')}-${String(stat._id.day).padStart(2, '0')}`,
                count: stat.count
            })),
            weekly: weeklyStats.map(stat => ({
                week: `${stat._id.year}-W${String(stat._id.week).padStart(2, '0')}`,
                count: stat.count
            }))
        };
    }
    /**
     * 獲取通知效果統計
     */
    static async getNotificationEffectivenessStats(options) {
        const { userId, startDate, endDate } = options;
        const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
        const end = endDate || new Date();
        const matchConditions = {
            createdAt: { $gte: start, $lte: end }
        };
        if (userId) {
            matchConditions.userId = new mongoose_1.default.Types.ObjectId(userId);
        }
        const stats = await Notification_1.Notification.aggregate([
            { $match: matchConditions },
            {
                $group: {
                    _id: '$type',
                    totalSent: { $sum: 1 },
                    totalRead: { $sum: { $cond: [{ $eq: ['$isRead', true] }, 1, 0] } },
                    totalClicked: { $sum: { $cond: [{ $ne: ['$clickedAt', null] }, 1, 0] } }
                }
            }
        ]);
        let totalSent = 0;
        let totalRead = 0;
        let totalClicked = 0;
        const typeEffectiveness = {};
        for (const stat of stats) {
            totalSent += stat.totalSent;
            totalRead += stat.totalRead;
            totalClicked += stat.totalClicked;
            typeEffectiveness[stat._id] = {
                sent: stat.totalSent,
                read: stat.totalRead,
                clicked: stat.totalClicked,
                readRate: stat.totalSent > 0 ? (stat.totalRead / stat.totalSent) * 100 : 0,
                clickRate: stat.totalSent > 0 ? (stat.totalClicked / stat.totalSent) * 100 : 0
            };
        }
        return {
            totalSent,
            totalRead,
            totalClicked,
            readRate: totalSent > 0 ? (totalRead / totalSent) * 100 : 0,
            clickRate: totalSent > 0 ? (totalClicked / totalSent) * 100 : 0,
            typeEffectiveness
        };
    }
    /**
     * 清理過期統計數據
     */
    static async cleanupOldStats(daysToKeep = 90) {
        const cutoffDate = new Date(Date.now() - daysToKeep * 24 * 60 * 60 * 1000);
        const result = await Notification_1.Notification.deleteMany({
            createdAt: { $lt: cutoffDate },
            isRead: true // 只刪除已讀的舊通知
        });
        logger_1.logger.info('清理過期統計數據完成', {
            deletedCount: result.deletedCount,
            cutoffDate,
            daysToKeep
        });
        return {
            deletedCount: result.deletedCount || 0
        };
    }
}
exports.NotificationStatisticsService = NotificationStatisticsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,