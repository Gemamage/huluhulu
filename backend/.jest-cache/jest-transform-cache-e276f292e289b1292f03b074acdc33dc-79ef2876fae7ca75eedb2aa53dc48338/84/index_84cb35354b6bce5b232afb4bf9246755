4d479cb8e9fb04bef914fa16f7c73d75
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.petSearchService = exports.PetSearchService = exports.searchAnalyticsService = exports.SearchAnalyticsService = exports.searchSuggestionsService = exports.SearchSuggestionsService = exports.searchCoreService = exports.SearchCoreService = exports.indexingService = exports.IndexingService = void 0;
const indexing_1 = require("./indexing");
const core_1 = require("./core");
const suggestions_1 = require("./suggestions");
const analytics_1 = require("./analytics");
const logger_1 = require("../../utils/logger");
// 重新導出實例和類
var indexing_2 = require("./indexing");
Object.defineProperty(exports, "IndexingService", { enumerable: true, get: function () { return indexing_2.IndexingService; } });
Object.defineProperty(exports, "indexingService", { enumerable: true, get: function () { return indexing_2.indexingService; } });
var core_2 = require("./core");
Object.defineProperty(exports, "SearchCoreService", { enumerable: true, get: function () { return core_2.SearchCoreService; } });
Object.defineProperty(exports, "searchCoreService", { enumerable: true, get: function () { return core_2.searchCoreService; } });
var suggestions_2 = require("./suggestions");
Object.defineProperty(exports, "SearchSuggestionsService", { enumerable: true, get: function () { return suggestions_2.SearchSuggestionsService; } });
Object.defineProperty(exports, "searchSuggestionsService", { enumerable: true, get: function () { return suggestions_2.searchSuggestionsService; } });
var analytics_2 = require("./analytics");
Object.defineProperty(exports, "SearchAnalyticsService", { enumerable: true, get: function () { return analytics_2.SearchAnalyticsService; } });
Object.defineProperty(exports, "searchAnalyticsService", { enumerable: true, get: function () { return analytics_2.searchAnalyticsService; } });
/**
 * 統一的寵物搜尋服務
 * 整合索引管理、核心搜尋、建議和分析功能
 */
class PetSearchService {
    constructor() {
        this.isInitialized = false;
        this.indexing = indexing_1.indexingService;
        this.core = core_1.searchCoreService;
        this.suggestions = suggestions_1.searchSuggestionsService;
        this.analytics = analytics_1.searchAnalyticsService;
    }
    /**
     * 初始化搜尋服務
     */
    async initialize() {
        try {
            logger_1.logger.info("正在初始化寵物搜尋服務...");
            // 初始化索引
            await this.indexing.initializePetIndex();
            await this.indexing.initializeSearchAnalyticsIndex();
            this.isInitialized = true;
            logger_1.logger.info("寵物搜尋服務初始化完成");
        }
        catch (error) {
            logger_1.logger.error("寵物搜尋服務初始化失敗:", error);
            throw error;
        }
    }
    /**
     * 檢查服務是否已初始化
     */
    isServiceInitialized() {
        return this.isInitialized;
    }
    /**
     * 獲取索引服務
     */
    getIndexingService() {
        return this.indexing;
    }
    /**
     * 獲取核心搜尋服務
     */
    getCoreService() {
        return this.core;
    }
    /**
     * 獲取建議服務
     */
    getSuggestionsService() {
        return this.suggestions;
    }
    /**
     * 獲取分析服務
     */
    getAnalyticsService() {
        return this.analytics;
    }
    /**
     * 搜尋寵物（帶分析記錄）
     */
    async searchPets(query, userId, sessionId, userAgent, ipAddress) {
        try {
            const startTime = Date.now();
            // 執行搜尋
            const searchResult = await this.core.searchPets(query);
            const searchDuration = Date.now() - startTime;
            // 記錄搜尋分析
            if (query.query || Object.keys(query.filters || {}).length > 0) {
                await this.analytics.recordSearchAnalytics({
                    query: query.query || "",
                    filters: query.filters || {},
                    userId,
                    resultCount: searchResult.total,
                    timestamp: new Date(),
                    sessionId,
                    userAgent,
                    ipAddress,
                    searchDuration,
                    location: query.location,
                });
            }
            return searchResult;
        }
        catch (error) {
            logger_1.logger.error("搜尋寵物失敗:", error);
            throw error;
        }
    }
    /**
     * 高級搜尋
     */
    async advancedSearch(query, userId) {
        try {
            const startTime = Date.now();
            const searchResult = await this.core.advancedSearch(query);
            const searchDuration = Date.now() - startTime;
            // 記錄搜尋分析
            await this.analytics.recordSearchAnalytics({
                query: query.query || "advanced_search",
                filters: query.filters || {},
                userId,
                resultCount: searchResult.total,
                timestamp: new Date(),
                searchDuration,
            });
            return searchResult;
        }
        catch (error) {
            logger_1.logger.error("高級搜尋失敗:", error);
            throw error;
        }
    }
    /**
     * 尋找相似寵物
     */
    async findSimilarPets(petId, userId) {
        try {
            const similarPets = await this.core.findSimilarPets(petId);
            // 記錄搜尋分析
            await this.analytics.recordSearchAnalytics({
                query: `similar_to_${petId}`,
                filters: {},
                userId,
                resultCount: similarPets.length,
                timestamp: new Date(),
            });
            return similarPets;
        }
        catch (error) {
            logger_1.logger.error("尋找相似寵物失敗:", error);
            throw error;
        }
    }
    /**
     * 獲取搜尋建議
     */
    async getSearchSuggestions(query, limit) {
        return this.suggestions.getSearchSuggestions(query, limit);
    }
    /**
     * 獲取智能建議
     */
    async getSmartSuggestions(query, userId, limit) {
        return this.suggestions.getSmartSuggestions(query, userId, limit);
    }
    /**
     * 獲取熱門搜尋
     */
    async getPopularSearches(limit, category) {
        return this.suggestions.getPopularSearches(limit, category);
    }
    /**
     * 獲取用戶搜尋歷史
     */
    async getUserSearchHistory(userId, limit) {
        return this.suggestions.getUserSearchHistory(userId, limit);
    }
    /**
     * 記錄搜尋點擊
     */
    async recordSearchClick(searchId, petId, position) {
        return this.analytics.recordSearchClick(searchId, petId, position);
    }
    /**
     * 索引寵物文檔
     */
    async indexPet(pet) {
        return this.indexing.indexPetDocument(pet);
    }
    /**
     * 批量索引寵物文檔
     */
    async indexPetsBulk(pets) {
        return this.indexing.indexPetDocumentsBulk(pets);
    }
    /**
     * 刪除寵物文檔
     */
    async deletePet(petId) {
        return this.indexing.deletePetDocument(petId);
    }
    /**
     * 更新寵物文檔
     */
    async updatePet(petId, updates) {
        return this.indexing.updatePetDocument(petId, updates);
    }
    /**
     * 獲取搜尋統計
     */
    async getSearchStats(startDate, endDate) {
        return this.analytics.getSearchStats(startDate, endDate);
    }
    /**
     * 獲取用戶搜尋統計
     */
    async getUserSearchStats(userId, startDate, endDate) {
        return this.analytics.getUserSearchStats(userId, startDate, endDate);
    }
    /**
     * 獲取搜尋趨勢
     */
    async getSearchTrends(period, startDate, endDate) {
        return this.analytics.getSearchTrends(period, startDate, endDate);
    }
    /**
     * 獲取搜尋效果分析
     */
    async getSearchEffectiveness() {
        return this.analytics.getSearchEffectiveness();
    }
    /**
     * 獲取索引統計
     */
    async getIndexStats() {
        return this.indexing.getIndexStats();
    }
    /**
     * 重建寵物索引
     */
    async rebuildPetIndex() {
        return this.indexing.rebuildPetIndex();
    }
    /**
     * 檢查索引是否存在
     */
    async checkIndexExists(indexName) {
        return this.indexing.checkIndexExists(indexName);
    }
    /**
     * 清理過期數據
     */
    async cleanupExpiredData(analyticsDays = 90, suggestionDays = 30) {
        try {
            const [analyticsResult, suggestionsResult] = await Promise.all([
                this.analytics.cleanupAnalyticsData(analyticsDays),
                this.suggestions.cleanupSuggestionCache(suggestionDays),
            ]);
            logger_1.logger.info("清理過期數據完成", {
                deletedAnalytics: analyticsResult.deletedCount,
                deletedSuggestions: suggestionsResult.deletedCount,
            });
            return {
                deletedAnalytics: analyticsResult.deletedCount,
                deletedSuggestions: suggestionsResult.deletedCount,
            };
        }
        catch (error) {
            logger_1.logger.error("清理過期數據失敗:", error);
            throw error;
        }
    }
    /**
     * 獲取服務健康狀態
     */
    async getHealthStatus() {
        try {
            const [petIndexExists, analyticsIndexExists, indexStats] = await Promise.all([
                this.indexing.checkIndexExists(this.indexing.getPetIndexName()),
                this.indexing.checkIndexExists(this.indexing.getSearchAnalyticsIndexName()),
                this.indexing.getIndexStats(),
            ]);
            return {
                isInitialized: this.isInitialized,
                petIndexExists,
                analyticsIndexExists,
                indexStats,
                timestamp: new Date(),
            };
        }
        catch (error) {
            logger_1.logger.error("獲取服務健康狀態失敗:", error);
            return {
                isInitialized: this.isInitialized,
                petIndexExists: false,
                analyticsIndexExists: false,
                indexStats: null,
                error: error.message,
                timestamp: new Date(),
            };
        }
    }
    /**
     * 重啟服務
     */
    async restart() {
        try {
            logger_1.logger.info("正在重啟寵物搜尋服務...");
            this.isInitialized = false;
            await this.initialize();
            logger_1.logger.info("寵物搜尋服務重啟完成");
        }
        catch (error) {
            logger_1.logger.error("寵物搜尋服務重啟失敗:", error);
            throw error;
        }
    }
}
exports.PetSearchService = PetSearchService;
// 導出單例實例
exports.petSearchService = new PetSearchService();
// 默認導出
exports.default = exports.petSearchService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,