{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\models\\User.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\models\\User.test.ts"],"sourcesContent":["import { User, IUser } from '../../src/models/User';\nimport mongoose from 'mongoose';\nimport { validUserData } from '../utils/testData';\n\ndescribe('User Model', () => {\n\n  afterEach(async () => {\n    await User.deleteMany({});\n  });\n\n  describe('User Creation', () => {\n    it('should create a valid user', async () => {\n      const user = new User(validUserData);\n      const savedUser = await user.save();\n      \n      expect(savedUser._id).toBeDefined();\n      expect(savedUser.email).toBe(validUserData.email);\n      expect(savedUser.name).toBe(validUserData.name);\n      expect(savedUser.phone).toBe(validUserData.phone);\n      expect(savedUser.isActive).toBe(true);\n      expect(savedUser.role).toBe('user');\n      expect(savedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should hash password before saving', async () => {\n      const user = new User(validUserData);\n      const savedUser = await user.save();\n      \n      expect(savedUser.password).not.toBe(validUserData.password);\n      expect(savedUser.password.length).toBeGreaterThan(50);\n    });\n\n    it('should not save user without required fields', async () => {\n      const user = new User({});\n      \n      await expect(user.save()).rejects.toThrow();\n    });\n\n    it('should not save user with invalid email', async () => {\n      const user = new User({\n        ...validUserData,\n        email: 'invalid-email'\n      });\n      \n      await expect(user.save()).rejects.toThrow();\n    });\n\n    it('should not save user with duplicate email', async () => {\n      await new User(validUserData).save();\n      const duplicateUser = new User(validUserData);\n      \n      await expect(duplicateUser.save()).rejects.toThrow();\n    });\n\n    it('should validate phone number format', async () => {\n      const user = new User({\n        ...validUserData,\n        phone: 'invalid-phone'\n      });\n      \n      await expect(user.save()).rejects.toThrow();\n    });\n  });\n\n  describe('User Methods', () => {\n    let user: IUser;\n\n    beforeEach(async () => {\n      user = await new User(validUserData).save();\n    });\n\n    describe('comparePassword', () => {\n      it('should return true for correct password', async () => {\n        const isMatch = await user.comparePassword('password123');\n        expect(isMatch).toBe(true);\n      });\n\n      it('should return false for incorrect password', async () => {\n        const isMatch = await user.comparePassword('wrongpassword');\n        expect(isMatch).toBe(false);\n      });\n    });\n\n    describe('generateAuthToken', () => {\n      it('should generate a valid JWT token', () => {\n        const token = user.generateAuthToken();\n        expect(token).toBeDefined();\n        expect(typeof token).toBe('string');\n        expect(token.split('.')).toHaveLength(3); // JWT has 3 parts\n      });\n    });\n\n    describe('generatePasswordResetToken', () => {\n      it('should generate password reset token and expiry', () => {\n        user.generatePasswordResetToken();\n        \n        expect(user.passwordResetToken).toBeDefined();\n        expect(user.passwordResetExpires).toBeDefined();\n        expect(user.passwordResetExpires!.getTime()).toBeGreaterThan(Date.now());\n      });\n    });\n\n    describe('generateEmailVerificationToken', () => {\n      it('should generate email verification token and expiry', () => {\n        user.generateEmailVerificationToken();\n        \n        expect(user.emailVerificationToken).toBeDefined();\n        expect(user.emailVerificationExpires).toBeDefined();\n        expect(user.emailVerificationExpires!.getTime()).toBeGreaterThan(Date.now());\n      });\n    });\n  });\n\n  describe('User Privacy Settings', () => {\n    it('should have default privacy settings', async () => {\n      const user = await new User(validUserData).save();\n      \n      expect(user.privacySettings).toBeDefined();\n      expect(user.privacySettings.showEmail).toBe(false);\n      expect(user.privacySettings.showPhone).toBe(true);\n      expect(user.privacySettings.allowDirectContact).toBe(true);\n    });\n\n    it('should allow updating privacy settings', async () => {\n      const user = await new User(validUserData).save();\n      \n      user.privacySettings.showEmail = true;\n      user.privacySettings.showPhone = true;\n      user.privacySettings.allowMessages = false;\n      \n      const updatedUser = await user.save();\n      \n      expect(updatedUser.privacySettings.showEmail).toBe(true);\n      expect(updatedUser.privacySettings.showPhone).toBe(true);\n      expect(updatedUser.privacySettings.allowMessages).toBe(false);\n    });\n  });\n\n  describe('User Timestamps', () => {\n    it('should set createdAt and updatedAt on creation', async () => {\n      const user = await new User(validUserData).save();\n      \n      expect(user.createdAt).toBeDefined();\n      expect(user.updatedAt).toBeDefined();\n      expect(user.createdAt).toEqual(user.updatedAt);\n    });\n\n    it('should update updatedAt on modification', async () => {\n      const user = await new User(validUserData).save();\n      const originalUpdatedAt = user.updatedAt;\n      \n      // 等待一毫秒確保時間戳不同\n      await new Promise(resolve => setTimeout(resolve, 1));\n      \n      user.name = 'Updated Name';\n      const updatedUser = await user.save();\n      \n      expect(updatedUser.updatedAt.getTime()).toBeGreaterThan(originalUpdatedAt.getTime());\n    });\n  });\n});"],"version":3}