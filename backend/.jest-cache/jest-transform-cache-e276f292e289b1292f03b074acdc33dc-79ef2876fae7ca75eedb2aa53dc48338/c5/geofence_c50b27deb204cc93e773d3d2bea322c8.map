{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\geofence.ts","mappings":";;;AAAA,gEAA6D;AAC7D,wDAAqD;AACrD,0CAA6C;AAE7C,4DAAmF;AACnF,+CAA4C;AAkB5C,MAAa,eAAe;IAU1B;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAgC;QACtD,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;QAC9C,CAAC;QAED,YAAY;QACZ,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE/B,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,eAAM,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK;QACV,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAElD,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,EAAE,GAAG,IAAI,CAAC;QAEzD,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YACrC,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAC5C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,eAAM,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC;QACH,CAAC,EAAE,UAAU,CAAC,CAAC;QAEf,eAAM,CAAC,IAAI,CAAC,aAAa,EAAE;YACzB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;SACpC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,IAAI;QACT,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,eAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,4BAA4B;QAC/C,IAAI,CAAC;YACH,cAAc;YACd,KAAK,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;gBAChD,IAAI,CAAC,IAAI,CAAC,QAAQ;oBAAE,SAAS;gBAE7B,IAAI,CAAC;oBACH,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,eAAM,CAAC,KAAK,CAAC,UAAU,EAAE;wBACvB,MAAM;wBACN,KAAK;qBACN,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAkB;QACvD,MAAM,SAAS,GAAG,MAAM,SAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,eAAe;YACf,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtC,OAAO;QACT,CAAC;QAED,iBAAiB;QACjB,IAAI,SAAS,CAAC,MAAM,KAAK,UAAU,EAAE,CAAC;YACpC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,OAAO;QACT,CAAC;QAED,aAAa;QACb,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QACpE,MAAM,eAAe,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,QAAQ;QAE5E,MAAM,UAAU,GAAG,MAAM,SAAG,CAAC,IAAI,CAAC;YAChC,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE;YACxB,MAAM,EAAE,YAAY;YACpB,SAAS,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;YACpC,QAAQ,EAAE;gBACR,UAAU,EAAE;oBACV,aAAa,EAAE;wBACb,IAAI,CAAC,MAAM;wBACX,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ;qBAC5B;iBACF;aACF;SACF,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAErB,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAC3C,IAAkB,EAClB,SAAe,EACf,UAAkB;QAElB,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACrC,MAAM,QAAQ,GAAG,iCAAe,CAAC,iBAAiB,CAChD,IAAI,CAAC,MAAM;YACX,kDAAkD;YAClD,yBAAyB;YACzB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW;aACnB,CAAC;YACF,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QAE3C,MAAM,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAEhC,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,yCAAmB,CAAC,gBAAgB,CAAC;gBACzC,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,IAAI,EAAE,gBAAoC;gBAC1C,KAAK,EAAE,WAAW;gBAClB,OAAO,EAAE,SAAS,IAAI,CAAC,MAAM,aAAa,UAAU,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,YAAY,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI;gBACpK,IAAI,EAAE;oBACJ,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE;oBAC/B,UAAU,EAAE,IAAI,CAAC,KAAK;oBACtB,WAAW,EAAE,UAAU,CAAC,MAAM;oBAC9B,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG;oBAC5D,UAAU,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;wBAC1C,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE;wBAC3B,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI;wBAChB,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG;qBAC7C,CAAC,CAAC;iBACJ;gBACD,QAAQ,EAAE,mCAAoB,CAAC,IAAI;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,IAO3B;QACC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAClE,MAAM,MAAM,GAAqB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEvD,MAAM,YAAY,GAAiB;YACjC,MAAM;YACN,MAAM,EAAE,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa;YAC3C,MAAM;YACN,KAAK;YACL,IAAI,EAAE,IAAI,IAAI,GAAG,KAAK,QAAQ;YAC9B,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAE5C,aAAa;QACb,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QAE1C,eAAM,CAAC,IAAI,CAAC,SAAS,EAAE;YACrB,MAAM;YACN,KAAK;YACL,MAAM;YACN,MAAM,EAAE,YAAY,CAAC,MAAM;SAC5B,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,MAAc,EAAE,UAAkB;QAC5D,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEpD,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;YAC5C,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAEtD,IAAI,OAAO,EAAE,CAAC;YACZ,aAAa;YACb,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC1C,eAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QACjD,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAc;QAC1C,MAAM,aAAa,GAAmB,EAAE,CAAC;QAEzC,KAAK,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;YAC7D,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACpD,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,iBAAiB;QACpC,qBAAqB;QACrB,YAAY;QACZ,eAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAkB;QACtD,aAAa;QACb,OAAO;IACT,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAa;QACnD,aAAa;QACb,OAAO;IACT,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,SAAS;QACd,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,YAAY,CAAC,SAAkC;QACpD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,EAAE,CAAC;QAE/C,qBAAqB;QACrB,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YACpC,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,IAAI,SAAS,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC;QACH,CAAC;QAED,eAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAClD,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,QAAQ;QAOb,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;aACxD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAExC,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YAC5B,OAAO,EAAE,IAAI,CAAC,QAAQ,KAAK,IAAI;YAC/B,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI;YACnC,WAAW;YACX,MAAM,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;SAC3B,CAAC;IACJ,CAAC;;AAnTH,0CAoTC;AAnTgB,sBAAM,GAAmB;IACtC,OAAO,EAAE,IAAI;IACb,aAAa,EAAE,EAAE,EAAE,OAAO;IAC1B,aAAa,EAAE,EAAE,CAAC,aAAa;CAChC,CAAC;AAEa,6BAAa,GAA8B,IAAI,GAAG,EAAE,CAAC;AACrD,wBAAQ,GAA0B,IAAI,CAAC","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\geofence.ts"],"sourcesContent":["import { NotificationService } from '../notificationService';\nimport { MatchingService } from '../matchingService';\nimport { Pet, IPet } from '../../models/Pet';\nimport { User } from '../../models/User';\nimport { NotificationType, NotificationPriority } from '../../models/Notification';\nimport { logger } from '../../utils/logger';\n\nexport interface GeofenceArea {\n  center: [number, number]; // [longitude, latitude]\n  radius: number; // in kilometers\n  userId: string;\n  petId: string;\n  name?: string;\n  isActive: boolean;\n  createdAt: Date;\n}\n\nexport interface GeofenceConfig {\n  enabled: boolean;\n  defaultRadius: number; // in kilometers\n  checkInterval: number; // in minutes\n}\n\nexport class GeofenceService {\n  private static config: GeofenceConfig = {\n    enabled: true,\n    defaultRadius: 10, // 10km\n    checkInterval: 15 // 15 minutes\n  };\n  \n  private static geofenceAreas: Map<string, GeofenceArea> = new Map();\n  private static interval: NodeJS.Timeout | null = null;\n\n  /**\n   * 初始化地理圍欄服務\n   */\n  static async initialize(config?: Partial<GeofenceConfig>): Promise<void> {\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    // 載入現有的地理圍欄\n    await this.loadGeofenceAreas();\n\n    this.start();\n    logger.info('地理圍欄服務已初始化', { config: this.config });\n  }\n\n  /**\n   * 啟動地理圍欄任務\n   */\n  static start(): void {\n    if (!this.config.enabled || this.interval) return;\n\n    const intervalMs = this.config.checkInterval * 60 * 1000;\n    \n    this.interval = setInterval(async () => {\n      try {\n        await this.processGeofenceNotifications();\n      } catch (error) {\n        logger.error('地理圍欄通知任務失敗', { error });\n      }\n    }, intervalMs);\n\n    logger.info('地理圍欄通知任務已啟動', { \n      interval: this.config.checkInterval \n    });\n  }\n\n  /**\n   * 停止地理圍欄任務\n   */\n  static stop(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n      logger.info('地理圍欄通知任務已停止');\n    }\n  }\n\n  /**\n   * 處理地理圍欄通知\n   */\n  private static async processGeofenceNotifications(): Promise<void> {\n    try {\n      // 檢查每個活躍的地理圍欄\n      for (const [areaId, area] of this.geofenceAreas) {\n        if (!area.isActive) continue;\n\n        try {\n          await this.checkGeofenceArea(area);\n        } catch (error) {\n          logger.error('檢查地理圍欄失敗', { \n            areaId, \n            error \n          });\n        }\n      }\n    } catch (error) {\n      logger.error('地理圍欄處理失敗', { error });\n    }\n  }\n\n  /**\n   * 檢查地理圍欄區域\n   */\n  private static async checkGeofenceArea(area: GeofenceArea): Promise<void> {\n    const targetPet = await Pet.findById(area.petId);\n    if (!targetPet) {\n      // 寵物不存在，移除地理圍欄\n      this.geofenceAreas.delete(area.petId);\n      return;\n    }\n\n    // 如果寵物已找到，停用地理圍欄\n    if (targetPet.status === 'reunited') {\n      area.isActive = false;\n      return;\n    }\n\n    // 查找圍欄內的相關寵物\n    const targetStatus = targetPet.status === 'lost' ? 'found' : 'lost';\n    const recentThreshold = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24小時內\n\n    const nearbyPets = await Pet.find({\n      _id: { $ne: area.petId },\n      status: targetStatus,\n      createdAt: { $gte: recentThreshold },\n      location: {\n        $geoWithin: {\n          $centerSphere: [\n            area.center,\n            area.radius / 6371 // 轉換為弧度\n          ]\n        }\n      }\n    }).populate('owner');\n\n    if (nearbyPets.length > 0) {\n      await this.sendGeofenceNotification(area, targetPet, nearbyPets);\n    }\n  }\n\n  /**\n   * 發送地理圍欄通知\n   */\n  private static async sendGeofenceNotification(\n    area: GeofenceArea,\n    targetPet: IPet,\n    nearbyPets: IPet[]\n  ): Promise<void> {\n    const distances = nearbyPets.map(pet => {\n      const distance = MatchingService.calculateDistance(\n        area.center,\n        // 暫時跳過地理坐標檢查，因為 Pet 模型中沒有 location.coordinates 字段\n        // TODO: 添加地理坐標字段到 Pet 模型\n        [0, 0] // 暫時使用默認坐標\n      );\n      return { pet, distance };\n    }).sort((a, b) => a.distance - b.distance);\n\n    const closestPet = distances[0];\n\n    if (closestPet) {\n      await NotificationService.sendNotification({\n        userId: area.userId,\n        type: 'GEOFENCE_ALERT' as NotificationType,\n        title: '📍 地理圍欄警報',\n        message: `在您設定的 ${area.radius}km 範圍內發現了 ${nearbyPets.length} 隻${targetPet.status === 'lost' ? '拾獲' : '失蹤'}的寵物，最近距離 ${Math.round(closestPet.distance * 100) / 100}km`,\n        data: {\n          petId: targetPet._id.toString(),\n          geofenceId: area.petId,\n          nearbyCount: nearbyPets.length,\n          closestDistance: Math.round(closestPet.distance * 100) / 100,\n          nearbyPets: distances.slice(0, 3).map(d => ({\n            petId: d.pet._id.toString(),\n            name: d.pet.name,\n            distance: Math.round(d.distance * 100) / 100\n          }))\n        },\n        priority: NotificationPriority.HIGH\n      });\n    }\n  }\n\n  /**\n   * 創建地理圍欄\n   */\n  static async createGeofence(data: {\n    userId: string;\n    petId: string;\n    latitude: number;\n    longitude: number;\n    radius?: number;\n    name?: string;\n  }): Promise<GeofenceArea> {\n    const { userId, petId, latitude, longitude, radius, name } = data;\n    const center: [number, number] = [longitude, latitude];\n    \n    const geofenceArea: GeofenceArea = {\n      center,\n      radius: radius || this.config.defaultRadius,\n      userId,\n      petId,\n      name: name || `${petId} 的地理圍欄`,\n      isActive: true,\n      createdAt: new Date()\n    };\n\n    this.geofenceAreas.set(petId, geofenceArea);\n    \n    // 保存到資料庫（可選）\n    await this.saveGeofenceArea(geofenceArea);\n\n    logger.info('地理圍欄已創建', { \n      userId, \n      petId, \n      center, \n      radius: geofenceArea.radius \n    });\n\n    return geofenceArea;\n  }\n\n  /**\n   * 移除地理圍欄\n   */\n  static async removeGeofence(userId: string, geofenceId: string): Promise<boolean> {\n    const geofence = this.geofenceAreas.get(geofenceId);\n    \n    if (!geofence || geofence.userId !== userId) {\n      throw new Error('地理圍欄不存在或無權限');\n    }\n    \n    const removed = this.geofenceAreas.delete(geofenceId);\n    \n    if (removed) {\n      // 從資料庫移除（可選）\n      await this.deleteGeofenceArea(geofenceId);\n      logger.info('地理圍欄已移除', { userId, geofenceId });\n    }\n\n    return removed;\n  }\n\n  /**\n   * 獲取用戶的地理圍欄列表\n   */\n  static async getUserGeofences(userId: string): Promise<GeofenceArea[]> {\n    const userGeofences: GeofenceArea[] = [];\n    \n    for (const [petId, geofence] of this.geofenceAreas.entries()) {\n      if (geofence.userId === userId && geofence.isActive) {\n        userGeofences.push(geofence);\n      }\n    }\n    \n    return userGeofences;\n  }\n\n  /**\n   * 載入地理圍欄區域\n   */\n  private static async loadGeofenceAreas(): Promise<void> {\n    // 這裡可以從資料庫載入已保存的地理圍欄\n    // 暫時使用記憶體存儲\n    logger.info('地理圍欄區域已載入');\n  }\n\n  /**\n   * 保存地理圍欄區域\n   */\n  private static async saveGeofenceArea(area: GeofenceArea): Promise<void> {\n    // 這裡可以保存到資料庫\n    // 暫時跳過\n  }\n\n  /**\n   * 刪除地理圍欄區域\n   */\n  private static async deleteGeofenceArea(petId: string): Promise<void> {\n    // 這裡可以從資料庫刪除\n    // 暫時跳過\n  }\n\n  /**\n   * 獲取配置\n   */\n  static getConfig(): GeofenceConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * 更新配置\n   */\n  static updateConfig(newConfig: Partial<GeofenceConfig>): GeofenceConfig {\n    this.config = { ...this.config, ...newConfig };\n    \n    // 如果啟用狀態改變，重新啟動或停止服務\n    if (newConfig.enabled !== undefined) {\n      this.stop();\n      if (newConfig.enabled) {\n        this.start();\n      }\n    }\n    \n    logger.info('地理圍欄配置已更新', { config: this.config });\n    return { ...this.config };\n  }\n\n  /**\n   * 獲取統計信息\n   */\n  static getStats(): {\n    enabled: boolean;\n    running: boolean;\n    totalAreas: number;\n    activeAreas: number;\n    config: GeofenceConfig;\n  } {\n    const activeAreas = Array.from(this.geofenceAreas.values())\n      .filter(area => area.isActive).length;\n\n    return {\n      enabled: this.config.enabled,\n      running: this.interval !== null,\n      totalAreas: this.geofenceAreas.size,\n      activeAreas,\n      config: { ...this.config }\n    };\n  }\n}"],"version":3}