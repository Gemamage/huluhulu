874b99b7bf894520a61e4cd2ce7066e3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeofenceService = void 0;
const notificationService_1 = require("../notificationService");
const matchingService_1 = require("../matchingService");
const Pet_1 = require("../../models/Pet");
const Notification_1 = require("../../models/Notification");
const logger_1 = require("../../utils/logger");
class GeofenceService {
    /**
     * 初始化地理圍欄服務
     */
    static async initialize(config) {
        if (config) {
            this.config = { ...this.config, ...config };
        }
        // 載入現有的地理圍欄
        await this.loadGeofenceAreas();
        this.start();
        logger_1.logger.info('地理圍欄服務已初始化', { config: this.config });
    }
    /**
     * 啟動地理圍欄任務
     */
    static start() {
        if (!this.config.enabled || this.interval)
            return;
        const intervalMs = this.config.checkInterval * 60 * 1000;
        this.interval = setInterval(async () => {
            try {
                await this.processGeofenceNotifications();
            }
            catch (error) {
                logger_1.logger.error('地理圍欄通知任務失敗', { error });
            }
        }, intervalMs);
        logger_1.logger.info('地理圍欄通知任務已啟動', {
            interval: this.config.checkInterval
        });
    }
    /**
     * 停止地理圍欄任務
     */
    static stop() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
            logger_1.logger.info('地理圍欄通知任務已停止');
        }
    }
    /**
     * 處理地理圍欄通知
     */
    static async processGeofenceNotifications() {
        try {
            // 檢查每個活躍的地理圍欄
            for (const [areaId, area] of this.geofenceAreas) {
                if (!area.isActive)
                    continue;
                try {
                    await this.checkGeofenceArea(area);
                }
                catch (error) {
                    logger_1.logger.error('檢查地理圍欄失敗', {
                        areaId,
                        error
                    });
                }
            }
        }
        catch (error) {
            logger_1.logger.error('地理圍欄處理失敗', { error });
        }
    }
    /**
     * 檢查地理圍欄區域
     */
    static async checkGeofenceArea(area) {
        const targetPet = await Pet_1.Pet.findById(area.petId);
        if (!targetPet) {
            // 寵物不存在，移除地理圍欄
            this.geofenceAreas.delete(area.petId);
            return;
        }
        // 如果寵物已找到，停用地理圍欄
        if (targetPet.status === 'reunited') {
            area.isActive = false;
            return;
        }
        // 查找圍欄內的相關寵物
        const targetStatus = targetPet.status === 'lost' ? 'found' : 'lost';
        const recentThreshold = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24小時內
        const nearbyPets = await Pet_1.Pet.find({
            _id: { $ne: area.petId },
            status: targetStatus,
            createdAt: { $gte: recentThreshold },
            location: {
                $geoWithin: {
                    $centerSphere: [
                        area.center,
                        area.radius / 6371 // 轉換為弧度
                    ]
                }
            }
        }).populate('owner');
        if (nearbyPets.length > 0) {
            await this.sendGeofenceNotification(area, targetPet, nearbyPets);
        }
    }
    /**
     * 發送地理圍欄通知
     */
    static async sendGeofenceNotification(area, targetPet, nearbyPets) {
        const distances = nearbyPets.map(pet => {
            const distance = matchingService_1.MatchingService.calculateDistance(area.center, 
            // 暫時跳過地理坐標檢查，因為 Pet 模型中沒有 location.coordinates 字段
            // TODO: 添加地理坐標字段到 Pet 模型
            [0, 0] // 暫時使用默認坐標
            );
            return { pet, distance };
        }).sort((a, b) => a.distance - b.distance);
        const closestPet = distances[0];
        if (closestPet) {
            await notificationService_1.NotificationService.sendNotification({
                userId: area.userId,
                type: 'GEOFENCE_ALERT',
                title: '📍 地理圍欄警報',
                message: `在您設定的 ${area.radius}km 範圍內發現了 ${nearbyPets.length} 隻${targetPet.status === 'lost' ? '拾獲' : '失蹤'}的寵物，最近距離 ${Math.round(closestPet.distance * 100) / 100}km`,
                data: {
                    petId: targetPet._id.toString(),
                    geofenceId: area.petId,
                    nearbyCount: nearbyPets.length,
                    closestDistance: Math.round(closestPet.distance * 100) / 100,
                    nearbyPets: distances.slice(0, 3).map(d => ({
                        petId: d.pet._id.toString(),
                        name: d.pet.name,
                        distance: Math.round(d.distance * 100) / 100
                    }))
                },
                priority: Notification_1.NotificationPriority.HIGH
            });
        }
    }
    /**
     * 創建地理圍欄
     */
    static async createGeofence(data) {
        const { userId, petId, latitude, longitude, radius, name } = data;
        const center = [longitude, latitude];
        const geofenceArea = {
            center,
            radius: radius || this.config.defaultRadius,
            userId,
            petId,
            name: name || `${petId} 的地理圍欄`,
            isActive: true,
            createdAt: new Date()
        };
        this.geofenceAreas.set(petId, geofenceArea);
        // 保存到資料庫（可選）
        await this.saveGeofenceArea(geofenceArea);
        logger_1.logger.info('地理圍欄已創建', {
            userId,
            petId,
            center,
            radius: geofenceArea.radius
        });
        return geofenceArea;
    }
    /**
     * 移除地理圍欄
     */
    static async removeGeofence(userId, geofenceId) {
        const geofence = this.geofenceAreas.get(geofenceId);
        if (!geofence || geofence.userId !== userId) {
            throw new Error('地理圍欄不存在或無權限');
        }
        const removed = this.geofenceAreas.delete(geofenceId);
        if (removed) {
            // 從資料庫移除（可選）
            await this.deleteGeofenceArea(geofenceId);
            logger_1.logger.info('地理圍欄已移除', { userId, geofenceId });
        }
        return removed;
    }
    /**
     * 獲取用戶的地理圍欄列表
     */
    static async getUserGeofences(userId) {
        const userGeofences = [];
        for (const [petId, geofence] of this.geofenceAreas.entries()) {
            if (geofence.userId === userId && geofence.isActive) {
                userGeofences.push(geofence);
            }
        }
        return userGeofences;
    }
    /**
     * 載入地理圍欄區域
     */
    static async loadGeofenceAreas() {
        // 這裡可以從資料庫載入已保存的地理圍欄
        // 暫時使用記憶體存儲
        logger_1.logger.info('地理圍欄區域已載入');
    }
    /**
     * 保存地理圍欄區域
     */
    static async saveGeofenceArea(area) {
        // 這裡可以保存到資料庫
        // 暫時跳過
    }
    /**
     * 刪除地理圍欄區域
     */
    static async deleteGeofenceArea(petId) {
        // 這裡可以從資料庫刪除
        // 暫時跳過
    }
    /**
     * 獲取配置
     */
    static getConfig() {
        return { ...this.config };
    }
    /**
     * 更新配置
     */
    static updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        // 如果啟用狀態改變，重新啟動或停止服務
        if (newConfig.enabled !== undefined) {
            this.stop();
            if (newConfig.enabled) {
                this.start();
            }
        }
        logger_1.logger.info('地理圍欄配置已更新', { config: this.config });
        return { ...this.config };
    }
    /**
     * 獲取統計信息
     */
    static getStats() {
        const activeAreas = Array.from(this.geofenceAreas.values())
            .filter(area => area.isActive).length;
        return {
            enabled: this.config.enabled,
            running: this.interval !== null,
            totalAreas: this.geofenceAreas.size,
            activeAreas,
            config: { ...this.config }
        };
    }
}
exports.GeofenceService = GeofenceService;
GeofenceService.config = {
    enabled: true,
    defaultRadius: 10, // 10km
    checkInterval: 15 // 15 minutes
};
GeofenceService.geofenceAreas = new Map();
GeofenceService.interval = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,