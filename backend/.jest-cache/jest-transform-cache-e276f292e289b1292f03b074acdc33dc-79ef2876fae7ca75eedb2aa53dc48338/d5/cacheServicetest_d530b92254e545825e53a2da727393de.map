{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\cacheService.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\cacheService.test.ts"],"sourcesContent":["// CacheService 單元測試\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\n\n// 設置測試環境變數\nprocess.env.NODE_ENV = 'test';\n\n// 模擬 logger\njest.mock('../../src/utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\n// 導入要測試的服務\nimport { CacheService } from '../../src/services/cacheService';\n\ndescribe('CacheService 測試', () => {\n  let cacheService: CacheService;\n\n  beforeEach(() => {\n    // 重置單例實例\n    CacheService.resetInstance();\n    // 為每個測試創建新的快取實例\n    cacheService = CacheService.getInstance({\n      defaultTTL: 1000, // 1秒，方便測試\n      maxSize: 5,\n      cleanupInterval: 500\n    });\n    cacheService.clear();\n  });\n\n  afterEach(() => {\n    cacheService.clear();\n    cacheService.stopCleanup();\n    CacheService.resetInstance();\n  });\n\n  describe('基本快取操作', () => {\n    it('應該能夠設置和獲取快取', () => {\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      cacheService.set(key, value);\n      const result = cacheService.get(key);\n      \n      expect(result).toEqual(value);\n    });\n\n    it('應該在快取不存在時返回 null', () => {\n      const result = cacheService.get('non-existent-key');\n      expect(result).toBeNull();\n    });\n\n    it('應該能夠刪除快取', () => {\n      const key = 'test-key';\n      const value = 'test-value';\n      \n      cacheService.set(key, value);\n      expect(cacheService.get(key)).toBe(value);\n      \n      const deleted = cacheService.delete(key);\n      expect(deleted).toBe(true);\n      expect(cacheService.get(key)).toBeNull();\n    });\n\n    it('應該能夠清空所有快取', () => {\n      cacheService.set('key1', 'value1');\n      cacheService.set('key2', 'value2');\n      \n      cacheService.clear();\n      \n      expect(cacheService.get('key1')).toBeNull();\n      expect(cacheService.get('key2')).toBeNull();\n    });\n  });\n\n  describe('TTL 功能', () => {\n    it('應該在 TTL 過期後自動清除快取', async () => {\n      const key = 'ttl-test';\n      const value = 'test-value';\n      \n      cacheService.set(key, value, 100); // 100ms TTL\n      expect(cacheService.get(key)).toBe(value);\n      \n      // 等待 TTL 過期\n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      expect(cacheService.get(key)).toBeNull();\n    });\n\n    it('應該使用預設 TTL', () => {\n      const key = 'default-ttl-test';\n      const value = 'test-value';\n      \n      cacheService.set(key, value); // 使用預設 TTL\n      expect(cacheService.get(key)).toBe(value);\n    });\n  });\n\n  describe('withCache 方法', () => {\n    it('應該執行函數並快取結果', async () => {\n      const mockFn = jest.fn().mockResolvedValue('function-result');\n      const cacheKey = 'function-cache';\n      \n      const result = await cacheService.withCache(cacheKey, mockFn);\n      \n      expect(result).toBe('function-result');\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      \n      // 第二次調用應該使用快取\n      const result2 = await cacheService.withCache(cacheKey, mockFn);\n      expect(result2).toBe('function-result');\n      expect(mockFn).toHaveBeenCalledTimes(1); // 沒有再次調用\n    });\n\n    it('應該實現請求去重', async () => {\n      const mockFn = jest.fn().mockImplementation(() => {\n        return new Promise(resolve => {\n          setTimeout(() => resolve('async-result'), 50);\n        });\n      });\n      \n      const cacheKey = 'dedup-test';\n      \n      // 同時發起多個相同的請求\n      const promises = [\n        cacheService.withCache(cacheKey, mockFn),\n        cacheService.withCache(cacheKey, mockFn),\n        cacheService.withCache(cacheKey, mockFn)\n      ];\n      \n      const results = await Promise.all(promises);\n      \n      // 所有結果應該相同\n      expect(results).toEqual(['async-result', 'async-result', 'async-result']);\n      // 函數只應該被調用一次（請求去重）\n      expect(mockFn).toHaveBeenCalledTimes(1);\n    });\n\n    it('應該處理函數執行錯誤', async () => {\n      const mockFn = jest.fn().mockRejectedValue(new Error('Function error'));\n      const cacheKey = 'error-test';\n      \n      await expect(cacheService.withCache(cacheKey, mockFn))\n        .rejects.toThrow('Function error');\n      \n      // 錯誤不應該被快取\n      expect(cacheService.get(cacheKey)).toBeNull();\n    });\n  });\n\n  describe('模式匹配刪除', () => {\n    it('應該能夠根據模式刪除快取', () => {\n      cacheService.set('pets:1', 'pet1');\n      cacheService.set('pets:2', 'pet2');\n      cacheService.set('users:1', 'user1');\n      cacheService.set('pets:owner:123', 'owner-pets');\n      \n      const deletedCount = cacheService.deletePattern('^pets:');\n      \n      expect(deletedCount).toBe(3);\n      expect(cacheService.get('pets:1')).toBeNull();\n      expect(cacheService.get('pets:2')).toBeNull();\n      expect(cacheService.get('pets:owner:123')).toBeNull();\n      expect(cacheService.get('users:1')).toBe('user1'); // 不應該被刪除\n    });\n  });\n\n  describe('快取大小限制', () => {\n    it('應該在達到最大大小時移除最舊的項目', () => {\n      // 設置最大大小為 5\n      for (let i = 1; i <= 6; i++) {\n        cacheService.set(`key${i}`, `value${i}`);\n      }\n      \n      // 第一個項目應該被移除\n      expect(cacheService.get('key1')).toBeNull();\n      expect(cacheService.get('key6')).toBe('value6');\n    });\n  });\n\n  describe('統計資訊', () => {\n    it('應該提供正確的統計資訊', () => {\n      cacheService.set('key1', 'value1');\n      cacheService.set('key2', 'value2');\n      \n      const stats = cacheService.getStats();\n      \n      expect(stats.cacheSize).toBe(2);\n      expect(stats.pendingRequests).toBe(0);\n      expect(stats.maxSize).toBe(5);\n      expect(stats.defaultTTL).toBe(1000);\n    });\n  });\n\n  describe('單例模式', () => {\n    it('應該返回相同的實例', () => {\n      const instance1 = CacheService.getInstance();\n      const instance2 = CacheService.getInstance();\n      \n      expect(instance1).toBe(instance2);\n    });\n  });\n});\n\nconsole.log('✅ CacheService 測試檔案已載入');"],"version":3}