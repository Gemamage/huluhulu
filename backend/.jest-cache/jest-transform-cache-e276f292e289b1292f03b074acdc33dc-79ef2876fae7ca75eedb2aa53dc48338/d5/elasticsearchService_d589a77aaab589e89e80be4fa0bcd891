881395c56128d10f4630d320dc62127a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.elasticsearchService = void 0;
const logger_1 = require("../utils/logger");
const elasticsearch_1 = require("../config/elasticsearch");
class ElasticsearchService {
    constructor() {
        this.client = null;
        this.isConnected = false;
        this.healthCheckInterval = null;
        this.metrics = {
            totalQueries: 0,
            averageResponseTime: 0,
            slowQueries: 0,
            errorRate: 0,
            lastUpdated: new Date()
        };
    }
    /**
     * 初始化 Elasticsearch 連接
     */
    async connect() {
        try {
            this.client = (0, elasticsearch_1.createElasticsearchClient)();
            // 驗證連接
            const isValid = await (0, elasticsearch_1.validateElasticsearchConnection)(this.client);
            if (isValid) {
                this.isConnected = true;
                // 設置索引模板
                await this.setupIndexTemplate();
                // 啟動健康檢查
                this.startHealthCheck();
                // 獲取叢集資訊
                const clusterInfo = await (0, elasticsearch_1.getClusterInfo)(this.client);
                logger_1.logger.info('Elasticsearch 叢集資訊:', {
                    clusterName: clusterInfo.info.cluster_name,
                    version: clusterInfo.info.version.number,
                    status: clusterInfo.health.status
                });
                return true;
            }
            else {
                this.isConnected = false;
                return false;
            }
        }
        catch (error) {
            logger_1.logger.error('Elasticsearch 連接錯誤:', error);
            this.isConnected = false;
            return false;
        }
    }
    /**
     * 設置索引模板
     */
    async setupIndexTemplate() {
        try {
            if (!this.client)
                throw new Error('Elasticsearch 客戶端未初始化');
            await this.client.indices.putIndexTemplate({
                name: 'pet_finder_template',
                body: elasticsearch_1.indexTemplateSettings
            });
            logger_1.logger.info('索引模板設置成功');
        }
        catch (error) {
            logger_1.logger.error('設置索引模板失敗:', error);
        }
    }
    /**
     * 啟動健康檢查
     */
    startHealthCheck() {
        this.healthCheckInterval = setInterval(async () => {
            try {
                if (this.client) {
                    const isHealthy = await (0, elasticsearch_1.validateElasticsearchConnection)(this.client);
                    if (!isHealthy && this.isConnected) {
                        logger_1.logger.warn('Elasticsearch 連接中斷，嘗試重新連接...');
                        this.isConnected = false;
                        await this.connect();
                    }
                }
            }
            catch (error) {
                logger_1.logger.error('健康檢查失敗:', error);
            }
        }, elasticsearch_1.healthCheckConfig.interval);
    }
    /**
     * 記錄查詢效能
     */
    recordQueryPerformance(responseTime, isError = false) {
        if (!elasticsearch_1.performanceConfig.enableMetrics)
            return;
        this.metrics.totalQueries++;
        this.metrics.averageResponseTime =
            (this.metrics.averageResponseTime * (this.metrics.totalQueries - 1) + responseTime) / this.metrics.totalQueries;
        if (responseTime > elasticsearch_1.performanceConfig.slowQueryThreshold) {
            this.metrics.slowQueries++;
        }
        if (isError) {
            this.metrics.errorRate =
                (this.metrics.errorRate * (this.metrics.totalQueries - 1) + 1) / this.metrics.totalQueries;
        }
        this.metrics.lastUpdated = new Date();
    }
    /**
     * 檢查連接狀態
     */
    async checkConnection() {
        try {
            if (!this.client)
                return false;
            const isValid = await (0, elasticsearch_1.validateElasticsearchConnection)(this.client);
            this.isConnected = isValid;
            return isValid;
        }
        catch (error) {
            this.isConnected = false;
            logger_1.logger.error('Elasticsearch 連接檢查失敗:', error);
            return false;
        }
    }
    /**
     * 獲取客戶端實例
     */
    getClient() {
        return this.client;
    }
    /**
     * 檢查是否已連接
     */
    isElasticsearchConnected() {
        return this.isConnected;
    }
    /**
     * 獲取效能指標
     */
    getPerformanceMetrics() {
        return { ...this.metrics };
    }
    /**
     * 創建索引
     */
    async createIndex(indexName, mapping) {
        const startTime = Date.now();
        try {
            if (!this.client)
                throw new Error('Elasticsearch 客戶端未初始化');
            const exists = await this.client.indices.exists({ index: indexName });
            if (!exists) {
                await this.client.indices.create({
                    index: indexName,
                    body: {
                        mappings: mapping,
                        settings: {
                            ...elasticsearch_1.chineseAnalyzerSettings,
                            number_of_shards: 1,
                            number_of_replicas: 0
                        }
                    }
                });
                logger_1.logger.info(`索引 ${indexName} 創建成功`);
            }
            else {
                logger_1.logger.info(`索引 ${indexName} 已存在`);
            }
            this.recordQueryPerformance(Date.now() - startTime);
            return true;
        }
        catch (error) {
            this.recordQueryPerformance(Date.now() - startTime, true);
            logger_1.logger.error(`創建索引 ${indexName} 失敗:`, error);
            return false;
        }
    }
    /**
     * 刪除索引
     */
    async deleteIndex(indexName) {
        try {
            const exists = await this.client.indices.exists({ index: indexName });
            if (exists) {
                await this.client.indices.delete({ index: indexName });
                logger_1.logger.info(`索引 ${indexName} 刪除成功`);
            }
            return true;
        }
        catch (error) {
            logger_1.logger.error(`刪除索引 ${indexName} 失敗:`, error);
            return false;
        }
    }
    /**
     * 索引文檔
     */
    async indexDocument(indexName, id, document) {
        try {
            await this.client.index({
                index: indexName,
                id: id,
                body: document,
                refresh: 'wait_for'
            });
            logger_1.logger.debug(`文檔 ${id} 索引到 ${indexName} 成功`);
            return true;
        }
        catch (error) {
            logger_1.logger.error(`索引文檔 ${id} 到 ${indexName} 失敗:`, error);
            return false;
        }
    }
    /**
     * 批量索引文檔
     */
    async bulkIndex(indexName, documents) {
        try {
            const body = documents.flatMap(({ id, document }) => [
                { index: { _index: indexName, _id: id } },
                document
            ]);
            const response = await this.client.bulk({
                body,
                refresh: 'wait_for'
            });
            if (response.errors) {
                logger_1.logger.error('批量索引部分失敗:', response.items);
                return false;
            }
            logger_1.logger.info(`批量索引 ${documents.length} 個文檔到 ${indexName} 成功`);
            return true;
        }
        catch (error) {
            logger_1.logger.error(`批量索引到 ${indexName} 失敗:`, error);
            return false;
        }
    }
    /**
     * 刪除文檔
     */
    async deleteDocument(indexName, id) {
        try {
            await this.client.delete({
                index: indexName,
                id: id,
                refresh: 'wait_for'
            });
            logger_1.logger.debug(`文檔 ${id} 從 ${indexName} 刪除成功`);
            return true;
        }
        catch (error) {
            logger_1.logger.error(`從 ${indexName} 刪除文檔 ${id} 失敗:`, error);
            return false;
        }
    }
    /**
     * 更新文檔
     */
    async updateDocument(indexName, id, document) {
        try {
            await this.client.update({
                index: indexName,
                id: id,
                body: {
                    doc: document
                },
                refresh: 'wait_for'
            });
            logger_1.logger.debug(`文檔 ${id} 在 ${indexName} 更新成功`);
            return true;
        }
        catch (error) {
            logger_1.logger.error(`更新 ${indexName} 中的文檔 ${id} 失敗:`, error);
            return false;
        }
    }
    /**
     * 關閉連接
     */
    async close() {
        try {
            // 清除健康檢查定時器
            if (this.healthCheckInterval) {
                clearInterval(this.healthCheckInterval);
                this.healthCheckInterval = null;
            }
            if (this.client) {
                await this.client.close();
                this.client = null;
            }
            this.isConnected = false;
            logger_1.logger.info('Elasticsearch 連接已關閉');
        }
        catch (error) {
            logger_1.logger.error('關閉 Elasticsearch 連接失敗:', error);
        }
    }
}
// 導出單例實例
exports.elasticsearchService = new ElasticsearchService();
exports.default = exports.elasticsearchService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,