{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\elasticsearchService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\elasticsearchService.ts"],"sourcesContent":["import { Client } from '@elastic/elasticsearch';\nimport { logger } from '../utils/logger';\nimport {\n  createElasticsearchClient,\n  validateElasticsearchConnection,\n  getClusterInfo,\n  chineseAnalyzerSettings,\n  indexTemplateSettings,\n  healthCheckConfig,\n  performanceConfig,\n  ElasticsearchConfig\n} from '../config/elasticsearch';\n\n// 搜尋結果介面\nexport interface SearchResult {\n  id: string;\n  score: number;\n  source: any;\n  highlights?: any;\n}\n\n// 搜尋回應介面\nexport interface SearchResponse {\n  hits: SearchResult[];\n  total: number;\n  maxScore: number;\n  took: number;\n}\n\n// 聚合結果介面\nexport interface AggregationResult {\n  [key: string]: any;\n}\n\n// 效能監控介面\nexport interface PerformanceMetrics {\n  totalQueries: number;\n  averageResponseTime: number;\n  slowQueries: number;\n  errorRate: number;\n  lastUpdated: Date;\n}\n\nclass ElasticsearchService {\n  private client: Client | null = null;\n  private isConnected: boolean = false;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n  private metrics: PerformanceMetrics = {\n    totalQueries: 0,\n    averageResponseTime: 0,\n    slowQueries: 0,\n    errorRate: 0,\n    lastUpdated: new Date()\n  };\n\n  /**\n   * 初始化 Elasticsearch 連接\n   */\n  public async connect(): Promise<boolean> {\n    try {\n      this.client = createElasticsearchClient();\n      \n      // 驗證連接\n      const isValid = await validateElasticsearchConnection(this.client);\n      if (isValid) {\n        this.isConnected = true;\n        \n        // 設置索引模板\n        await this.setupIndexTemplate();\n        \n        // 啟動健康檢查\n        this.startHealthCheck();\n        \n        // 獲取叢集資訊\n        const clusterInfo = await getClusterInfo(this.client);\n        logger.info('Elasticsearch 叢集資訊:', {\n          clusterName: clusterInfo.info.cluster_name,\n          version: clusterInfo.info.version.number,\n          status: clusterInfo.health.status\n        });\n        \n        return true;\n      } else {\n        this.isConnected = false;\n        return false;\n      }\n    } catch (error) {\n      logger.error('Elasticsearch 連接錯誤:', error);\n      this.isConnected = false;\n      return false;\n    }\n  }\n\n  /**\n   * 設置索引模板\n   */\n  private async setupIndexTemplate(): Promise<void> {\n    try {\n      if (!this.client) throw new Error('Elasticsearch 客戶端未初始化');\n      \n      await this.client.indices.putIndexTemplate({\n        name: 'pet_finder_template',\n        body: indexTemplateSettings\n      });\n      \n      logger.info('索引模板設置成功');\n    } catch (error) {\n      logger.error('設置索引模板失敗:', error);\n    }\n  }\n\n  /**\n   * 啟動健康檢查\n   */\n  private startHealthCheck(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        if (this.client) {\n          const isHealthy = await validateElasticsearchConnection(this.client);\n          if (!isHealthy && this.isConnected) {\n            logger.warn('Elasticsearch 連接中斷，嘗試重新連接...');\n            this.isConnected = false;\n            await this.connect();\n          }\n        }\n      } catch (error) {\n        logger.error('健康檢查失敗:', error);\n      }\n    }, healthCheckConfig.interval);\n  }\n\n  /**\n   * 記錄查詢效能\n   */\n  private recordQueryPerformance(responseTime: number, isError: boolean = false): void {\n    if (!performanceConfig.enableMetrics) return;\n    \n    this.metrics.totalQueries++;\n    this.metrics.averageResponseTime = \n      (this.metrics.averageResponseTime * (this.metrics.totalQueries - 1) + responseTime) / this.metrics.totalQueries;\n    \n    if (responseTime > performanceConfig.slowQueryThreshold) {\n      this.metrics.slowQueries++;\n    }\n    \n    if (isError) {\n      this.metrics.errorRate = \n        (this.metrics.errorRate * (this.metrics.totalQueries - 1) + 1) / this.metrics.totalQueries;\n    }\n    \n    this.metrics.lastUpdated = new Date();\n  }\n\n  /**\n   * 檢查連接狀態\n   */\n  public async checkConnection(): Promise<boolean> {\n    try {\n      if (!this.client) return false;\n      const isValid = await validateElasticsearchConnection(this.client);\n      this.isConnected = isValid;\n      return isValid;\n    } catch (error) {\n      this.isConnected = false;\n      logger.error('Elasticsearch 連接檢查失敗:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 獲取客戶端實例\n   */\n  public getClient(): Client | null {\n    return this.client;\n  }\n\n  /**\n   * 檢查是否已連接\n   */\n  public isElasticsearchConnected(): boolean {\n    return this.isConnected;\n  }\n\n  /**\n   * 獲取效能指標\n   */\n  public getPerformanceMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * 創建索引\n   */\n  public async createIndex(indexName: string, mapping: any): Promise<boolean> {\n    const startTime = Date.now();\n    try {\n      if (!this.client) throw new Error('Elasticsearch 客戶端未初始化');\n      \n      const exists = await this.client.indices.exists({ index: indexName });\n      \n      if (!exists) {\n        await this.client.indices.create({\n          index: indexName,\n          body: {\n            mappings: mapping,\n            settings: {\n              ...chineseAnalyzerSettings,\n              number_of_shards: 1,\n              number_of_replicas: 0\n            }\n          }\n        });\n        logger.info(`索引 ${indexName} 創建成功`);\n      } else {\n        logger.info(`索引 ${indexName} 已存在`);\n      }\n      \n      this.recordQueryPerformance(Date.now() - startTime);\n      return true;\n    } catch (error) {\n      this.recordQueryPerformance(Date.now() - startTime, true);\n      logger.error(`創建索引 ${indexName} 失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 刪除索引\n   */\n  public async deleteIndex(indexName: string): Promise<boolean> {\n    try {\n      const exists = await this.client.indices.exists({ index: indexName });\n      \n      if (exists) {\n        await this.client.indices.delete({ index: indexName });\n        logger.info(`索引 ${indexName} 刪除成功`);\n      }\n      return true;\n    } catch (error) {\n      logger.error(`刪除索引 ${indexName} 失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 索引文檔\n   */\n  public async indexDocument(indexName: string, id: string, document: any): Promise<boolean> {\n    try {\n      await this.client.index({\n        index: indexName,\n        id: id,\n        body: document,\n        refresh: 'wait_for'\n      });\n      logger.debug(`文檔 ${id} 索引到 ${indexName} 成功`);\n      return true;\n    } catch (error) {\n      logger.error(`索引文檔 ${id} 到 ${indexName} 失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 批量索引文檔\n   */\n  public async bulkIndex(indexName: string, documents: Array<{ id: string; document: any }>): Promise<boolean> {\n    try {\n      const body = documents.flatMap(({ id, document }) => [\n        { index: { _index: indexName, _id: id } },\n        document\n      ]);\n\n      const response = await this.client.bulk({\n        body,\n        refresh: 'wait_for'\n      });\n\n      if (response.errors) {\n        logger.error('批量索引部分失敗:', response.items);\n        return false;\n      }\n\n      logger.info(`批量索引 ${documents.length} 個文檔到 ${indexName} 成功`);\n      return true;\n    } catch (error) {\n      logger.error(`批量索引到 ${indexName} 失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 刪除文檔\n   */\n  public async deleteDocument(indexName: string, id: string): Promise<boolean> {\n    try {\n      await this.client.delete({\n        index: indexName,\n        id: id,\n        refresh: 'wait_for'\n      });\n      logger.debug(`文檔 ${id} 從 ${indexName} 刪除成功`);\n      return true;\n    } catch (error) {\n      logger.error(`從 ${indexName} 刪除文檔 ${id} 失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 更新文檔\n   */\n  public async updateDocument(indexName: string, id: string, document: any): Promise<boolean> {\n    try {\n      await this.client.update({\n        index: indexName,\n        id: id,\n        body: {\n          doc: document\n        },\n        refresh: 'wait_for'\n      });\n      logger.debug(`文檔 ${id} 在 ${indexName} 更新成功`);\n      return true;\n    } catch (error) {\n      logger.error(`更新 ${indexName} 中的文檔 ${id} 失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 關閉連接\n   */\n  public async close(): Promise<void> {\n    try {\n      // 清除健康檢查定時器\n      if (this.healthCheckInterval) {\n        clearInterval(this.healthCheckInterval);\n        this.healthCheckInterval = null;\n      }\n      \n      if (this.client) {\n        await this.client.close();\n        this.client = null;\n      }\n      \n      this.isConnected = false;\n      logger.info('Elasticsearch 連接已關閉');\n    } catch (error) {\n      logger.error('關閉 Elasticsearch 連接失敗:', error);\n    }\n  }\n}\n\n// 導出單例實例\nexport const elasticsearchService = new ElasticsearchService();\nexport default elasticsearchService;"],"version":3}