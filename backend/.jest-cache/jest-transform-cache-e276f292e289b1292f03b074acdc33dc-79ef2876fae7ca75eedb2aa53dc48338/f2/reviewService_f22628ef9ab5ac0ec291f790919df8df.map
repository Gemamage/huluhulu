{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\reviewService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\reviewService.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport { Review, ReviewStats, IReview, IReviewStats } from '../models/Review';\nimport { User } from '../models/User';\nimport { Pet } from '../models/Pet';\nimport { Conversation } from '../models/Message';\nimport { NotificationService } from './notificationService';\nimport { NotificationType } from '../models/Notification';\n\nexport interface CreateReviewData {\n  reviewerId: string;\n  revieweeId: string;\n  petId?: string;\n  conversationId?: string;\n  rating: number;\n  content?: string;\n  tags?: string[];\n  isAnonymous?: boolean;\n}\n\nexport interface UpdateReviewData {\n  rating?: number;\n  content?: string;\n  tags?: string[];\n  isAnonymous?: boolean;\n}\n\nexport interface ReviewQuery {\n  revieweeId?: string;\n  reviewerId?: string;\n  petId?: string;\n  rating?: number;\n  page?: number;\n  limit?: number;\n  sortBy?: 'createdAt' | 'rating';\n  sortOrder?: 'asc' | 'desc';\n  includeDeleted?: boolean;\n}\n\nexport class ReviewService {\n  private notificationService: NotificationService;\n\n  constructor() {\n    this.notificationService = new NotificationService();\n  }\n\n  /**\n   * 創建評價\n   */\n  async createReview(data: CreateReviewData): Promise<IReview> {\n    const {\n      reviewerId,\n      revieweeId,\n      petId,\n      conversationId,\n      rating,\n      content = '',\n      tags = [],\n      isAnonymous = false\n    } = data;\n\n    // 驗證評價者和被評價者\n    if (reviewerId === revieweeId) {\n      throw new Error('不能評價自己');\n    }\n\n    const [reviewer, reviewee] = await Promise.all([\n      User.findById(reviewerId),\n      User.findById(revieweeId)\n    ]);\n\n    if (!reviewer) {\n      throw new Error('評價者不存在');\n    }\n    if (!reviewee) {\n      throw new Error('被評價者不存在');\n    }\n\n    // 驗證寵物是否存在（如果提供）\n    if (petId) {\n      const pet = await Pet.findById(petId);\n      if (!pet) {\n        throw new Error('寵物不存在');\n      }\n    }\n\n    // 驗證對話是否存在（如果提供）\n    if (conversationId) {\n      const conversation = await Conversation.findById(conversationId);\n      if (!conversation) {\n        throw new Error('對話不存在');\n      }\n      \n      // 檢查評價者是否為對話參與者\n      const reviewerObjectId = new mongoose.Types.ObjectId(reviewerId);\n      if (!conversation.participants.some(p => p.equals(reviewerObjectId))) {\n        throw new Error('您不是此對話的參與者，無法進行評價');\n      }\n    }\n\n    // 檢查是否已經評價過\n    const existingReview = await Review.findOne({\n      reviewerId: new mongoose.Types.ObjectId(reviewerId),\n      revieweeId: new mongoose.Types.ObjectId(revieweeId)\n    });\n\n    if (existingReview) {\n      throw new Error('您已經評價過此用戶');\n    }\n\n    // 創建評價\n    const review = new Review({\n      reviewerId: new mongoose.Types.ObjectId(reviewerId),\n      revieweeId: new mongoose.Types.ObjectId(revieweeId),\n      petId: petId ? new mongoose.Types.ObjectId(petId) : null,\n      conversationId: conversationId ? new mongoose.Types.ObjectId(conversationId) : null,\n      rating,\n      content: content.trim(),\n      tags: tags.map(tag => tag.trim()).filter(tag => tag.length > 0),\n      isAnonymous\n    });\n\n    await review.save();\n\n    // 發送通知\n    await this.sendReviewNotification(review, reviewer, reviewee);\n\n    const createdReview = await this.getReviewById(review._id.toString());\n    if (!createdReview) {\n      throw new Error('創建評價後無法獲取評價詳情');\n    }\n    return createdReview;\n  }\n\n  /**\n   * 獲取評價詳情\n   */\n  async getReviewById(reviewId: string): Promise<IReview | null> {\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      throw new Error('無效的評價ID');\n    }\n\n    return await Review.findById(reviewId)\n      .populate('reviewerId', 'username avatar email')\n      .populate('revieweeId', 'username avatar email')\n      .populate('petId', 'name images')\n      .lean();\n  }\n\n  /**\n   * 獲取評價列表\n   */\n  async getReviews(query: ReviewQuery): Promise<{\n    reviews: IReview[];\n    total: number;\n    page: number;\n    totalPages: number;\n    stats?: {\n      averageRating: number;\n      ratingDistribution: { [key: number]: number };\n    };\n  }> {\n    const {\n      revieweeId,\n      reviewerId,\n      petId,\n      rating,\n      page = 1,\n      limit = 20,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n      includeDeleted = false\n    } = query;\n\n    // 構建查詢條件\n    const filter: any = {};\n    if (revieweeId) filter.revieweeId = new mongoose.Types.ObjectId(revieweeId);\n    if (reviewerId) filter.reviewerId = new mongoose.Types.ObjectId(reviewerId);\n    if (petId) filter.petId = new mongoose.Types.ObjectId(petId);\n    if (rating) filter.rating = rating;\n    if (includeDeleted) {\n      filter.includeDeleted = true;\n    }\n\n    // 計算分頁\n    const skip = (page - 1) * limit;\n    const sortOptions: any = {};\n    sortOptions[sortBy] = sortOrder === 'asc' ? 1 : -1;\n\n    // 執行查詢\n    const [reviews, total] = await Promise.all([\n      Review.find(filter)\n        .populate('reviewerId', 'username avatar email')\n        .populate('revieweeId', 'username avatar email')\n        .populate('petId', 'name images')\n        .sort(sortOptions)\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      Review.countDocuments(filter)\n    ]);\n\n    // 如果查詢特定用戶的評價，計算統計資料\n    let stats;\n    if (revieweeId) {\n      const allReviews = await Review.find({ revieweeId: new mongoose.Types.ObjectId(revieweeId) });\n      const totalRating = allReviews.reduce((sum, review) => sum + review.rating, 0);\n      const averageRating = allReviews.length > 0 ? totalRating / allReviews.length : 0;\n      \n      const ratingDistribution: { [key: number]: number } = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n      allReviews.forEach(review => {\n        const rating = review.rating;\n        if (rating !== undefined && rating !== null && typeof rating === 'number' && rating >= 1 && rating <= 5) {\n          const ratingKey = Math.floor(rating);\n          if (ratingDistribution[ratingKey] !== undefined) {\n            ratingDistribution[ratingKey]++;\n          }\n        }\n      });\n\n      stats = {\n        averageRating: Math.round(averageRating * 10) / 10,\n        ratingDistribution\n      };\n    }\n\n    return {\n      reviews,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n      stats\n    };\n  }\n\n  /**\n   * 更新評價\n   */\n  async updateReview(\n    reviewId: string,\n    reviewerId: string,\n    data: UpdateReviewData\n  ): Promise<IReview | null> {\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      throw new Error('無效的評價ID');\n    }\n\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      throw new Error('評價不存在');\n    }\n\n    // 檢查權限\n    if (review.reviewerId.toString() !== reviewerId) {\n      throw new Error('無權限修改此評價');\n    }\n\n    // 更新評價\n    const updateData: any = {};\n    if (data.rating !== undefined) updateData.rating = data.rating;\n    if (data.content !== undefined) updateData.content = data.content.trim();\n    if (data.tags !== undefined) {\n      updateData.tags = data.tags.map(tag => tag.trim()).filter(tag => tag.length > 0);\n    }\n    if (data.isAnonymous !== undefined) updateData.isAnonymous = data.isAnonymous;\n\n    const updatedReview = await Review.findByIdAndUpdate(\n      reviewId,\n      updateData,\n      { new: true }\n    )\n      .populate('reviewerId', 'username avatar email')\n      .populate('revieweeId', 'username avatar email')\n      .populate('petId', 'name images');\n\n    return updatedReview;\n  }\n\n  /**\n   * 刪除評價\n   */\n  async deleteReview(\n    reviewId: string,\n    userId: string,\n    isAdmin: boolean = false\n  ): Promise<boolean> {\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      throw new Error('無效的評價ID');\n    }\n\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      throw new Error('評價不存在');\n    }\n\n    // 檢查權限\n    if (!isAdmin && review.reviewerId.toString() !== userId) {\n      throw new Error('無權限刪除此評價');\n    }\n\n    // 軟刪除\n    await Review.findByIdAndUpdate(reviewId, {\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: new mongoose.Types.ObjectId(userId)\n    });\n\n    return true;\n  }\n\n  /**\n   * 舉報評價\n   */\n  async reportReview(reviewId: string, reporterId: string): Promise<boolean> {\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      throw new Error('無效的評價ID');\n    }\n\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      throw new Error('評價不存在');\n    }\n\n    // 增加舉報次數\n    await Review.findByIdAndUpdate(reviewId, {\n      $inc: { reportCount: 1 }\n    });\n\n    // 如果舉報次數超過閾值，自動隱藏\n    const updatedReview = await Review.findById(reviewId);\n    if (updatedReview && updatedReview.reportCount >= 3) {\n      await Review.findByIdAndUpdate(reviewId, {\n        isHidden: true\n      });\n    }\n\n    return true;\n  }\n\n  /**\n   * 獲取用戶評價統計\n   */\n  async getUserReviewStats(userId: string): Promise<IReviewStats | null> {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      throw new Error('無效的用戶ID');\n    }\n\n    return await ReviewStats.findOne({ \n      userId: new mongoose.Types.ObjectId(userId) \n    }).lean();\n  }\n\n  /**\n   * 獲取評價標籤統計\n   */\n  async getTagStats(userId?: string): Promise<Array<{ tag: string; count: number }>> {\n    const matchStage: any = { isDeleted: false, isHidden: false };\n    if (userId) {\n      matchStage.revieweeId = new mongoose.Types.ObjectId(userId);\n    }\n\n    const tagStats = await Review.aggregate([\n      { $match: matchStage },\n      { $unwind: '$tags' },\n      {\n        $group: {\n          _id: '$tags',\n          count: { $sum: 1 }\n        }\n      },\n      {\n        $project: {\n          tag: '$_id',\n          count: 1,\n          _id: 0\n        }\n      },\n      { $sort: { count: -1 } },\n      { $limit: 20 }\n    ]);\n\n    return tagStats;\n  }\n\n  /**\n   * 獲取評價趨勢\n   */\n  async getReviewTrends(userId: string, days: number = 30): Promise<Array<{\n    date: string;\n    count: number;\n    averageRating: number;\n  }>> {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      throw new Error('無效的用戶ID');\n    }\n\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const trends = await Review.aggregate([\n      {\n        $match: {\n          revieweeId: new mongoose.Types.ObjectId(userId),\n          createdAt: { $gte: startDate },\n          isDeleted: false,\n          isHidden: false\n        }\n      },\n      {\n        $group: {\n          _id: {\n            $dateToString: {\n              format: '%Y-%m-%d',\n              date: '$createdAt'\n            }\n          },\n          count: { $sum: 1 },\n          totalRating: { $sum: '$rating' }\n        }\n      },\n      {\n        $project: {\n          date: '$_id',\n          count: 1,\n          averageRating: {\n            $round: [{ $divide: ['$totalRating', '$count'] }, 1]\n          },\n          _id: 0\n        }\n      },\n      { $sort: { date: 1 } }\n    ]);\n\n    return trends;\n  }\n\n  /**\n   * 檢查是否可以評價\n   */\n  async canReview(reviewerId: string, revieweeId: string): Promise<{\n    canReview: boolean;\n    reason?: string;\n  }> {\n    if (reviewerId === revieweeId) {\n      return { canReview: false, reason: '不能評價自己' };\n    }\n\n    // 檢查是否已經評價過\n    const existingReview = await Review.findOne({\n      reviewerId: new mongoose.Types.ObjectId(reviewerId),\n      revieweeId: new mongoose.Types.ObjectId(revieweeId)\n    });\n\n    if (existingReview) {\n      return { canReview: false, reason: '您已經評價過此用戶' };\n    }\n\n    // 檢查是否有互動記錄（對話或寵物相關）\n    const hasInteraction = await Conversation.findOne({\n      participants: {\n        $all: [\n          new mongoose.Types.ObjectId(reviewerId),\n          new mongoose.Types.ObjectId(revieweeId)\n        ]\n      }\n    });\n\n    if (!hasInteraction) {\n      return { canReview: false, reason: '您需要先與此用戶有互動才能進行評價' };\n    }\n\n    return { canReview: true };\n  }\n\n  /**\n   * 發送評價通知\n   */\n  private async sendReviewNotification(\n    review: IReview,\n    reviewer: any,\n    reviewee: any\n  ): Promise<void> {\n    try {\n      const stars = '★'.repeat(review.rating) + '☆'.repeat(5 - review.rating);\n      \n      await NotificationService.sendNotification({\n        userId: reviewee._id.toString(),\n        type: NotificationType.REVIEW,\n        title: '收到新評價',\n        message: review.isAnonymous \n          ? `有人給了您 ${stars} 的評價`\n          : `${reviewer.username} 給了您 ${stars} 的評價`,\n        data: {\n          reviewId: review._id.toString(),\n          reviewerId: review.isAnonymous ? null : reviewer._id.toString(),\n          rating: review.rating\n        }\n      });\n    } catch (error) {\n      console.error('發送評價通知失敗:', error);\n    }\n  }\n}\n\nexport const reviewService = new ReviewService();"],"version":3}