{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\verificationService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\verificationService.ts"],"sourcesContent":["import crypto from 'crypto';\nimport { User, IUser } from '../models/User';\nimport { EmailService } from './emailService';\nimport { AppError } from '../utils/errors';\nimport { logger } from '../utils/logger';\n\nexport interface VerificationResult {\n  success: boolean;\n  message: string;\n  user?: IUser;\n}\n\nexport interface ResendResult {\n  success: boolean;\n  message: string;\n  cooldownRemaining?: number;\n}\n\n/**\n * 郵箱驗證服務類別\n */\nexport class VerificationService {\n  // 驗證令牌有效期（24小時）\n  private static readonly TOKEN_EXPIRY_HOURS = 24;\n  \n  // 重發郵件冷卻時間（5分鐘）\n  private static readonly RESEND_COOLDOWN_MINUTES = 5;\n  \n  // 每日最大重發次數\n  private static readonly MAX_DAILY_RESENDS = 5;\n\n  /**\n   * 生成驗證令牌\n   */\n  private static generateVerificationToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  /**\n   * 計算令牌過期時間\n   */\n  private static getTokenExpiry(): Date {\n    const expiry = new Date();\n    expiry.setHours(expiry.getHours() + this.TOKEN_EXPIRY_HOURS);\n    return expiry;\n  }\n\n  /**\n   * 發送驗證郵件\n   */\n  static async sendVerificationEmail(user: IUser): Promise<void> {\n    try {\n      // 生成新的驗證令牌\n      const token = this.generateVerificationToken();\n      const expiry = this.getTokenExpiry();\n\n      // 更新用戶的驗證令牌\n      await User.findByIdAndUpdate(user._id, {\n        emailVerificationToken: token,\n        emailVerificationExpires: expiry,\n      });\n\n      // 發送驗證郵件\n      await EmailService.sendVerificationEmail(user.email, token, user.name);\n\n      logger.info('驗證郵件發送成功', {\n        userId: user._id,\n        email: user.email,\n      });\n    } catch (error) {\n      logger.error('發送驗證郵件失敗', {\n        userId: user._id,\n        email: user.email,\n        error,\n      });\n      throw new AppError('發送驗證郵件失敗，請稍後再試', 500);\n    }\n  }\n\n  /**\n   * 驗證郵箱令牌\n   */\n  static async verifyEmailToken(token: string): Promise<VerificationResult> {\n    try {\n      // 查找具有該令牌的用戶\n      const user = await User.findOne({\n        emailVerificationToken: token,\n        emailVerificationExpires: { $gt: new Date() },\n      }).select('+emailVerificationToken +emailVerificationExpires');\n\n      if (!user) {\n        return {\n          success: false,\n          message: '驗證令牌無效或已過期',\n        };\n      }\n\n      // 檢查用戶是否已經驗證過\n      if (user.isEmailVerified) {\n        return {\n          success: true,\n          message: '您的郵箱已經驗證過了',\n          user,\n        };\n      }\n\n      // 更新用戶狀態\n      user.isEmailVerified = true;\n      user.emailVerificationToken = undefined;\n      user.emailVerificationExpires = undefined;\n      await user.save();\n\n      // 發送歡迎郵件\n      try {\n        await EmailService.sendWelcomeEmail(user.email, user.name);\n      } catch (error) {\n        // 歡迎郵件發送失敗不應該影響驗證流程\n        logger.warn('歡迎郵件發送失敗', {\n          userId: user._id,\n          error,\n        });\n      }\n\n      logger.info('郵箱驗證成功', {\n        userId: user._id,\n        email: user.email,\n      });\n\n      return {\n        success: true,\n        message: '郵箱驗證成功！歡迎加入呼嚕寵物協尋網站',\n        user,\n      };\n    } catch (error) {\n      logger.error('郵箱驗證失敗', { token, error });\n      throw new AppError('驗證過程中發生錯誤，請稍後再試', 500);\n    }\n  }\n\n  /**\n   * 重新發送驗證郵件\n   */\n  static async resendVerificationEmail(email: string): Promise<ResendResult> {\n    try {\n      // 查找用戶\n      const user = await User.findOne({ email }).select(\n        '+emailVerificationToken +emailVerificationExpires'\n      );\n\n      if (!user) {\n        return {\n          success: false,\n          message: '找不到該郵箱對應的用戶',\n        };\n      }\n\n      // 檢查用戶是否已經驗證\n      if (user.isEmailVerified) {\n        return {\n          success: false,\n          message: '您的郵箱已經驗證過了',\n        };\n      }\n\n      // 檢查冷卻時間\n      const cooldownResult = await this.checkResendCooldown(user);\n      if (!cooldownResult.canResend) {\n        return {\n          success: false,\n          message: `請等待 ${cooldownResult.remainingMinutes} 分鐘後再重新發送`,\n          cooldownRemaining: cooldownResult.remainingMinutes,\n        };\n      }\n\n      // 檢查每日重發限制\n      const dailyLimitResult = await this.checkDailyResendLimit(user);\n      if (!dailyLimitResult.canResend) {\n        return {\n          success: false,\n          message: '今日重發次數已達上限，請明天再試',\n        };\n      }\n\n      // 發送驗證郵件\n      await this.sendVerificationEmail(user);\n\n      // 記錄重發次數\n      await this.recordResendAttempt(user);\n\n      return {\n        success: true,\n        message: '驗證郵件已重新發送，請檢查您的郵箱',\n      };\n    } catch (error) {\n      logger.error('重發驗證郵件失敗', { email, error });\n      throw new AppError('重發驗證郵件失敗，請稍後再試', 500);\n    }\n  }\n\n  /**\n   * 檢查重發冷卻時間\n   */\n  private static async checkResendCooldown(\n    user: IUser\n  ): Promise<{ canResend: boolean; remainingMinutes: number }> {\n    if (!user.emailVerificationExpires) {\n      return { canResend: true, remainingMinutes: 0 };\n    }\n\n    const now = new Date();\n    const tokenCreatedAt = new Date(\n      user.emailVerificationExpires.getTime() - this.TOKEN_EXPIRY_HOURS * 60 * 60 * 1000\n    );\n    const cooldownEnd = new Date(\n      tokenCreatedAt.getTime() + this.RESEND_COOLDOWN_MINUTES * 60 * 1000\n    );\n\n    if (now < cooldownEnd) {\n      const remainingMs = cooldownEnd.getTime() - now.getTime();\n      const remainingMinutes = Math.ceil(remainingMs / (60 * 1000));\n      return { canResend: false, remainingMinutes };\n    }\n\n    return { canResend: true, remainingMinutes: 0 };\n  }\n\n  /**\n   * 檢查每日重發限制\n   */\n  private static async checkDailyResendLimit(\n    user: IUser\n  ): Promise<{ canResend: boolean; attemptsToday: number }> {\n    // 這裡可以實現更複雜的限制邏輯，比如使用 Redis 或數據庫記錄\n    // 暫時簡化實現\n    return { canResend: true, attemptsToday: 0 };\n  }\n\n  /**\n   * 記錄重發嘗試\n   */\n  private static async recordResendAttempt(user: IUser): Promise<void> {\n    // 這裡可以記錄重發嘗試到數據庫或 Redis\n    // 暫時簡化實現\n    logger.info('記錄重發嘗試', {\n      userId: user._id,\n      email: user.email,\n      timestamp: new Date(),\n    });\n  }\n\n  /**\n   * 檢查用戶是否需要驗證郵箱\n   */\n  static async checkVerificationStatus(user: IUser): Promise<{\n    needsVerification: boolean;\n    hasValidToken: boolean;\n    tokenExpiry?: Date;\n  }> {\n    if (user.isEmailVerified) {\n      return {\n        needsVerification: false,\n        hasValidToken: false,\n      };\n    }\n\n    const userWithToken = await User.findById(user._id).select(\n      '+emailVerificationToken +emailVerificationExpires'\n    );\n\n    if (!userWithToken?.emailVerificationToken || !userWithToken.emailVerificationExpires) {\n      return {\n        needsVerification: true,\n        hasValidToken: false,\n      };\n    }\n\n    const now = new Date();\n    const hasValidToken = userWithToken.emailVerificationExpires > now;\n\n    return {\n      needsVerification: true,\n      hasValidToken,\n      tokenExpiry: userWithToken.emailVerificationExpires,\n    };\n  }\n\n  /**\n   * 清理過期的驗證令牌\n   */\n  static async cleanupExpiredTokens(): Promise<number> {\n    try {\n      const result = await User.updateMany(\n        {\n          emailVerificationExpires: { $lt: new Date() },\n          isEmailVerified: false,\n        },\n        {\n          $unset: {\n            emailVerificationToken: 1,\n            emailVerificationExpires: 1,\n          },\n        }\n      );\n\n      logger.info('清理過期驗證令牌', {\n        cleanedCount: result.modifiedCount,\n      });\n\n      return result.modifiedCount;\n    } catch (error) {\n      logger.error('清理過期驗證令牌失敗', { error });\n      throw error;\n    }\n  }\n}"],"version":3}