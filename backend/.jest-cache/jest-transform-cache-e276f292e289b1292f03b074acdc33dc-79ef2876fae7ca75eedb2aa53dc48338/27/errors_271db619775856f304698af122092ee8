30d72077c9f9f4eb94983b48a96ca269
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatErrorForLogging = exports.formatErrorResponse = exports.isOperationalError = exports.ErrorFactory = exports.DatabaseError = exports.ExternalServiceError = exports.BusinessRuleError = exports.ServiceUnavailableError = exports.InternalServerError = exports.RateLimitError = exports.ConflictError = exports.NotFoundError = exports.ForbiddenError = exports.AuthorizationError = exports.AuthenticationError = exports.ValidationError = exports.AppError = exports.ErrorCode = void 0;
/**
 * 錯誤代碼枚舉
 */
var ErrorCode;
(function (ErrorCode) {
    // 通用錯誤
    ErrorCode["INTERNAL_SERVER_ERROR"] = "INTERNAL_SERVER_ERROR";
    ErrorCode["SERVICE_UNAVAILABLE"] = "SERVICE_UNAVAILABLE";
    // 驗證錯誤
    ErrorCode["VALIDATION_ERROR"] = "VALIDATION_ERROR";
    ErrorCode["INVALID_INPUT"] = "INVALID_INPUT";
    ErrorCode["MISSING_REQUIRED_FIELD"] = "MISSING_REQUIRED_FIELD";
    // 認證錯誤
    ErrorCode["AUTHENTICATION_FAILED"] = "AUTHENTICATION_FAILED";
    ErrorCode["INVALID_TOKEN"] = "INVALID_TOKEN";
    ErrorCode["TOKEN_EXPIRED"] = "TOKEN_EXPIRED";
    ErrorCode["INVALID_CREDENTIALS"] = "INVALID_CREDENTIALS";
    // 授權錯誤
    ErrorCode["INSUFFICIENT_PERMISSIONS"] = "INSUFFICIENT_PERMISSIONS";
    ErrorCode["ACCESS_DENIED"] = "ACCESS_DENIED";
    // 資源錯誤
    ErrorCode["RESOURCE_NOT_FOUND"] = "RESOURCE_NOT_FOUND";
    ErrorCode["RESOURCE_ALREADY_EXISTS"] = "RESOURCE_ALREADY_EXISTS";
    ErrorCode["RESOURCE_CONFLICT"] = "RESOURCE_CONFLICT";
    // 業務邏輯錯誤
    ErrorCode["BUSINESS_RULE_VIOLATION"] = "BUSINESS_RULE_VIOLATION";
    ErrorCode["OPERATION_NOT_ALLOWED"] = "OPERATION_NOT_ALLOWED";
    // 外部服務錯誤
    ErrorCode["EXTERNAL_SERVICE_ERROR"] = "EXTERNAL_SERVICE_ERROR";
    ErrorCode["DATABASE_ERROR"] = "DATABASE_ERROR";
    // 速率限制
    ErrorCode["RATE_LIMIT_EXCEEDED"] = "RATE_LIMIT_EXCEEDED";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));
/**
 * 自定義錯誤類別
 */
class AppError extends Error {
    constructor(message, statusCode = 500, errorCode = ErrorCode.INTERNAL_SERVER_ERROR, details, isOperational = true) {
        super(message);
        this.statusCode = statusCode;
        this.errorCode = errorCode;
        this.details = details;
        this.isOperational = isOperational;
        this.timestamp = new Date().toISOString();
        // 確保錯誤堆疊追蹤正確
        Error.captureStackTrace(this, this.constructor);
    }
    /**
     * 轉換為 JSON 格式
     */
    toJSON() {
        return {
            message: this.message,
            statusCode: this.statusCode,
            errorCode: this.errorCode,
            details: this.details,
            timestamp: this.timestamp,
            isOperational: this.isOperational,
        };
    }
}
exports.AppError = AppError;
/**
 * 驗證錯誤
 */
class ValidationError extends AppError {
    constructor(message = "輸入資料驗證失敗", details) {
        super(message, 400, ErrorCode.VALIDATION_ERROR, details);
    }
}
exports.ValidationError = ValidationError;
/**
 * 認證錯誤
 */
class AuthenticationError extends AppError {
    constructor(message = "認證失敗", errorCode = ErrorCode.AUTHENTICATION_FAILED) {
        super(message, 401, errorCode);
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * 授權錯誤
 */
class AuthorizationError extends AppError {
    constructor(message = "權限不足", errorCode = ErrorCode.INSUFFICIENT_PERMISSIONS) {
        super(message, 403, errorCode);
    }
}
exports.AuthorizationError = AuthorizationError;
/**
 * 禁止訪問錯誤（AuthorizationError 的別名）
 */
class ForbiddenError extends AuthorizationError {
    constructor(message = "禁止訪問") {
        super(message, ErrorCode.ACCESS_DENIED);
    }
}
exports.ForbiddenError = ForbiddenError;
/**
 * 資源未找到錯誤
 */
class NotFoundError extends AppError {
    constructor(message = "資源未找到", details) {
        super(message, 404, ErrorCode.RESOURCE_NOT_FOUND, details);
    }
}
exports.NotFoundError = NotFoundError;
/**
 * 衝突錯誤
 */
class ConflictError extends AppError {
    constructor(message = "資源衝突", details) {
        super(message, 409, ErrorCode.RESOURCE_CONFLICT, details);
    }
}
exports.ConflictError = ConflictError;
/**
 * 速率限制錯誤
 */
class RateLimitError extends AppError {
    constructor(message = "請求過於頻繁", details) {
        super(message, 429, ErrorCode.RATE_LIMIT_EXCEEDED, details);
    }
}
exports.RateLimitError = RateLimitError;
/**
 * 內部伺服器錯誤
 */
class InternalServerError extends AppError {
    constructor(message = "內部伺服器錯誤", details) {
        super(message, 500, ErrorCode.INTERNAL_SERVER_ERROR, details, false);
    }
}
exports.InternalServerError = InternalServerError;
/**
 * 服務不可用錯誤
 */
class ServiceUnavailableError extends AppError {
    constructor(message = "服務暫時不可用", details) {
        super(message, 503, ErrorCode.SERVICE_UNAVAILABLE, details, false);
    }
}
exports.ServiceUnavailableError = ServiceUnavailableError;
/**
 * 業務邏輯錯誤
 */
class BusinessRuleError extends AppError {
    constructor(message, details) {
        super(message, 400, ErrorCode.BUSINESS_RULE_VIOLATION, details);
    }
}
exports.BusinessRuleError = BusinessRuleError;
/**
 * 外部服務錯誤
 */
class ExternalServiceError extends AppError {
    constructor(message = "外部服務錯誤", details) {
        super(message, 502, ErrorCode.EXTERNAL_SERVICE_ERROR, details, false);
    }
}
exports.ExternalServiceError = ExternalServiceError;
/**
 * 資料庫錯誤
 */
class DatabaseError extends AppError {
    constructor(message = "資料庫操作失敗", details) {
        super(message, 500, ErrorCode.DATABASE_ERROR, details, false);
    }
}
exports.DatabaseError = DatabaseError;
/**
 * 錯誤工廠函數
 */
class ErrorFactory {
    /**
     * 創建驗證錯誤
     */
    static createValidationError(message = "輸入資料驗證失敗", field, value, constraint) {
        const details = [];
        if (field) {
            details.push({ field, value, constraint });
        }
        return new ValidationError(message, details);
    }
    /**
     * 創建認證錯誤
     */
    static createAuthenticationError(type = "invalid_credentials") {
        const messages = {
            invalid_credentials: "用戶名或密碼錯誤",
            invalid_token: "無效的認證令牌",
            token_expired: "認證令牌已過期",
        };
        const errorCodes = {
            invalid_credentials: ErrorCode.INVALID_CREDENTIALS,
            invalid_token: ErrorCode.INVALID_TOKEN,
            token_expired: ErrorCode.TOKEN_EXPIRED,
        };
        return new AuthenticationError(messages[type], errorCodes[type]);
    }
    /**
     * 創建資源未找到錯誤
     */
    static createNotFoundError(resource, identifier) {
        const message = identifier
            ? `${resource} (${identifier}) 未找到`
            : `${resource} 未找到`;
        const details = [
            {
                resource,
                identifier,
            },
        ];
        return new NotFoundError(message, details);
    }
    /**
     * 創建衝突錯誤
     */
    static createConflictError(resource, field, value) {
        const message = `${resource} 的 ${field} 已存在`;
        const details = [
            {
                resource,
                field,
                value,
                constraint: "unique",
            },
        ];
        return new ConflictError(message, details);
    }
    /**
     * 創建速率限制錯誤
     */
    static createRateLimitError(message = "請求過於頻繁，請稍後再試", details) {
        return new RateLimitError(message, details);
    }
    /**
     * 從 Mongoose 錯誤創建 AppError
     */
    static fromMongooseError(error) {
        if (error.name === "ValidationError") {
            const details = Object.values(error.errors).map((err) => ({
                field: err.path,
                value: err.value,
                constraint: err.kind,
                message: err.message,
            }));
            return new ValidationError("資料驗證失敗", details);
        }
        if (error.name === "MongoServerError" && error.code === 11000) {
            const field = Object.keys(error.keyValue || {})[0];
            if (field) {
                const value = error.keyValue[field];
                return ErrorFactory.createConflictError("資源", field, value);
            }
            return new ConflictError("資源衝突");
        }
        if (error.name === "CastError") {
            const details = [
                {
                    field: error.path,
                    value: error.value,
                    constraint: "type",
                    message: "無效的資料格式",
                },
            ];
            return new ValidationError("無效的資料格式", details);
        }
        return new DatabaseError(error.message);
    }
    /**
     * 從 Zod 錯誤創建 ValidationError
     */
    static fromZodError(error) {
        const details = error.errors.map((err) => ({
            field: err.path.join("."),
            value: err.received,
            constraint: err.code,
            message: err.message,
        }));
        return new ValidationError("輸入資料驗證失敗", details);
    }
}
exports.ErrorFactory = ErrorFactory;
/**
 * 檢查錯誤是否為操作性錯誤
 */
const isOperationalError = (error) => {
    if (error instanceof AppError) {
        return error.isOperational;
    }
    return false;
};
exports.isOperationalError = isOperationalError;
/**
 * 格式化錯誤響應
 */
const formatErrorResponse = (error, includeStack = false) => {
    const response = {
        success: false,
        error: {
            message: error.message,
            code: error.errorCode,
            statusCode: error.statusCode,
            timestamp: error.timestamp,
        },
    };
    if (error.details && error.details.length > 0) {
        response.error.details = error.details;
    }
    if (includeStack && error.stack) {
        response.error.stack = error.stack;
    }
    return response;
};
exports.formatErrorResponse = formatErrorResponse;
/**
 * 錯誤日誌格式化
 */
const formatErrorForLogging = (error, context) => {
    const logData = {
        message: error.message,
        name: error.name,
        stack: error.stack,
    };
    if (error instanceof AppError) {
        logData.errorCode = error.errorCode;
        logData.statusCode = error.statusCode;
        logData.isOperational = error.isOperational;
        logData.details = error.details;
    }
    if (context) {
        logData.context = context;
    }
    return logData;
};
exports.formatErrorForLogging = formatErrorForLogging;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc2VyXFxEZXNrdG9wXFx0cmFlcHJvamVjdFxcdGVzdDJcXHBldC1maW5kZXItYXBwXFxiYWNrZW5kXFxzcmNcXHV0aWxzXFxlcnJvcnMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCxJQUFZLFNBbUNYO0FBbkNELFdBQVksU0FBUztJQUNuQixPQUFPO0lBQ1AsNERBQStDLENBQUE7SUFDL0Msd0RBQTJDLENBQUE7SUFFM0MsT0FBTztJQUNQLGtEQUFxQyxDQUFBO0lBQ3JDLDRDQUErQixDQUFBO0lBQy9CLDhEQUFpRCxDQUFBO0lBRWpELE9BQU87SUFDUCw0REFBK0MsQ0FBQTtJQUMvQyw0Q0FBK0IsQ0FBQTtJQUMvQiw0Q0FBK0IsQ0FBQTtJQUMvQix3REFBMkMsQ0FBQTtJQUUzQyxPQUFPO0lBQ1Asa0VBQXFELENBQUE7SUFDckQsNENBQStCLENBQUE7SUFFL0IsT0FBTztJQUNQLHNEQUF5QyxDQUFBO0lBQ3pDLGdFQUFtRCxDQUFBO0lBQ25ELG9EQUF1QyxDQUFBO0lBRXZDLFNBQVM7SUFDVCxnRUFBbUQsQ0FBQTtJQUNuRCw0REFBK0MsQ0FBQTtJQUUvQyxTQUFTO0lBQ1QsOERBQWlELENBQUE7SUFDakQsOENBQWlDLENBQUE7SUFFakMsT0FBTztJQUNQLHdEQUEyQyxDQUFBO0FBQzdDLENBQUMsRUFuQ1csU0FBUyx5QkFBVCxTQUFTLFFBbUNwQjtBQWFEOztHQUVHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsS0FBSztJQU9qQyxZQUNFLE9BQWUsRUFDZixhQUFxQixHQUFHLEVBQ3hCLFlBQXVCLFNBQVMsQ0FBQyxxQkFBcUIsRUFDdEQsT0FBd0IsRUFDeEIsZ0JBQXlCLElBQUk7UUFFN0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWYsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxD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QzlCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNwQyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDdEMsT0FBTyxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNaLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzVCLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLENBQUM7QUF0QlcsUUFBQSxxQkFBcUIseUJBc0JoQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVzZXJcXERlc2t0b3BcXHRyYWVwcm9qZWN0XFx0ZXN0MlxccGV0LWZpbmRlci1hcHBcXGJhY2tlbmRcXHNyY1xcdXRpbHNcXGVycm9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOmMr+iqpOS7o+eivOaemuiIiVxuICovXG5leHBvcnQgZW51bSBFcnJvckNvZGUge1xuICAvLyDpgJrnlKjpjK/oqqRcbiAgSU5URVJOQUxfU0VSVkVSX0VSUk9SID0gXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgU0VSVklDRV9VTkFWQUlMQUJMRSA9IFwiU0VSVklDRV9VTkFWQUlMQUJMRVwiLFxuXG4gIC8vIOmpl+itiemMr+iqpFxuICBWQUxJREFUSU9OX0VSUk9SID0gXCJWQUxJREFUSU9OX0VSUk9SXCIsXG4gIElOVkFMSURfSU5QVVQgPSBcIklOVkFMSURfSU5QVVRcIixcbiAgTUlTU0lOR19SRVFVSVJFRF9GSUVMRCA9IFwiTUlTU0lOR19SRVFVSVJFRF9GSUVMRFwiLFxuXG4gIC8vIOiqjeitiemMr+iqpFxuICBBVVRIRU5USUNBVElPTl9GQUlMRUQgPSBcIkFVVEhFTlRJQ0FUSU9OX0ZBSUxFRFwiLFxuICBJTlZBTElEX1RPS0VOID0gXCJJTlZBTElEX1RPS0VOXCIsXG4gIFRPS0VOX0VYUElSRUQgPSBcIlRPS0VOX0VYUElSRURcIixcbiAgSU5WQUxJRF9DUkVERU5USUFMUyA9IFwiSU5WQUxJRF9DUkVERU5USUFMU1wiLFxuXG4gIC8vIOaOiOasiumMr+iqpFxuICBJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMgPSBcIklOU1VGRklDSUVOVF9QRVJNSVNTSU9OU1wiLFxuICBBQ0NFU1NfREVOSUVEID0gXCJBQ0NFU1NfREVOSUVEXCIsXG5cbiAgLy8g6LOH5rqQ6Yyv6KqkXG4gIFJFU09VUkNFX05PVF9GT1VORCA9IFwiUkVTT1VSQ0VfTk9UX0ZPVU5EXCIsXG4gIFJFU09VUkNFX0FMUkVBRFlfRVhJU1RTID0gXCJSRVNPVVJDRV9BTFJFQURZX0VYSVNUU1wiLFxuICBSRVNPVVJDRV9DT05GTElDVCA9IFwiUkVTT1VSQ0VfQ09ORkxJQ1RcIixcblxuICAvLyDmpa3li5npgo/ovK/pjK/oqqRcbiAgQlVTSU5FU1NfUlVMRV9WSU9MQVRJT04gPSBcIkJVU0lORVNTX1JVTEVfVklPTEFUSU9OXCIsXG4gIE9QRVJBVElPTl9OT1RfQUxMT1dFRCA9IFwiT1BFUkFUSU9OX05PVF9BTExPV0VEXCIsXG5cbiAgLy8g5aSW6YOo5pyN5YuZ6Yyv6KqkXG4gIEVYVEVSTkFMX1NFUlZJQ0VfRVJST1IgPSBcIkVYVEVSTkFMX1NFUlZJQ0VfRVJST1JcIixcbiAgREFUQUJBU0VfRVJST1IgPSBcIkRBVEFCQVNFX0VSUk9SXCIsXG5cbiAgLy8g6YCf546H6ZmQ5Yi2XG4gIFJBVEVfTElNSVRfRVhDRUVERUQgPSBcIlJBVEVfTElNSVRfRVhDRUVERURcIixcbn1cblxuLyoqXG4gKiDpjK/oqqToqbPmg4Xku4vpnaJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvckRldGFpbHMge1xuICBmaWVsZD86IHN0cmluZztcbiAgdmFsdWU/OiBhbnk7XG4gIGNvbnN0cmFpbnQ/OiBzdHJpbmc7XG4gIGNvZGU/OiBzdHJpbmc7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuLyoqXG4gKiDoh6rlrprnvqnpjK/oqqTpoZ7liKVcbiAqL1xuZXhwb3J0IGNsYXNzIEFwcEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgcmVhZG9ubHkgc3RhdHVzQ29kZTogbnVtYmVyO1xuICBwdWJsaWMgcmVhZG9ubHkgaXNPcGVyYXRpb25hbDogYm9vbGVhbjtcbiAgcHVibGljIHJlYWRvbmx5IGVycm9yQ29kZTogRXJyb3JDb2RlO1xuICBwdWJsaWMgcmVhZG9ubHkgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdO1xuICBwdWJsaWMgcmVhZG9ubHkgdGltZXN0YW1wOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHN0YXR1c0NvZGU6IG51bWJlciA9IDUwMCxcbiAgICBlcnJvckNvZGU6IEVycm9yQ29kZSA9IEVycm9yQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IsXG4gICAgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdLFxuICAgIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW4gPSB0cnVlLFxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICB0aGlzLmlzT3BlcmF0aW9uYWwgPSBpc09wZXJhdGlvbmFsO1xuICAgIHRoaXMudGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuXG4gICAgLy8g56K65L+d6Yyv6Kqk5aCG55aK6L+96Lmk5q2j56K6XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cblxuICAvKipcbiAgICog6L2J5o+b54K6IEpTT04g5qC85byPXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIHN0YXR1c0NvZGU6IHRoaXMuc3RhdHVzQ29kZSxcbiAgICAgIGVycm9yQ29kZTogdGhpcy5lcnJvckNvZGUsXG4gICAgICBkZXRhaWxzOiB0aGlzLmRldGFpbHMsXG4gICAgICB0aW1lc3RhbXA6IHRoaXMudGltZXN0YW1wLFxuICAgICAgaXNPcGVyYXRpb25hbDogdGhpcy5pc09wZXJhdGlvbmFsLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiDpqZforYnpjK/oqqRcbiAqL1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gXCLovLjlhaXos4fmlpnpqZforYnlpLHmlZdcIiwgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNDAwLCBFcnJvckNvZGUuVkFMSURBVElPTl9FUlJPUiwgZGV0YWlscyk7XG4gIH1cbn1cblxuLyoqXG4gKiDoqo3orYnpjK/oqqRcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIG1lc3NhZ2U6IHN0cmluZyA9IFwi6KqN6K2J5aSx5pWXXCIsXG4gICAgZXJyb3JDb2RlOiBFcnJvckNvZGUgPSBFcnJvckNvZGUuQVVUSEVOVElDQVRJT05fRkFJTEVELFxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDEsIGVycm9yQ29kZSk7XG4gIH1cbn1cblxuLyoqXG4gKiDmjojmrIrpjK/oqqRcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhvcml6YXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgbWVzc2FnZTogc3RyaW5nID0gXCLmrIrpmZDkuI3otrNcIixcbiAgICBlcnJvckNvZGU6IEVycm9yQ29kZSA9IEVycm9yQ29kZS5JTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMsXG4gICkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIDQwMywgZXJyb3JDb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIOemgeatouioquWVj+mMr+iqpO+8iEF1dGhvcml6YXRpb25FcnJvciDnmoTliKXlkI3vvIlcbiAqL1xuZXhwb3J0IGNsYXNzIEZvcmJpZGRlbkVycm9yIGV4dGVuZHMgQXV0aG9yaXphdGlvbkVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gXCLnpoHmraLoqKrllY9cIikge1xuICAgIHN1cGVyKG1lc3NhZ2UsIEVycm9yQ29kZS5BQ0NFU1NfREVOSUVEKTtcbiAgfVxufVxuXG4vKipcbiAqIOizh+a6kOacquaJvuWIsOmMr+iqpFxuICovXG5leHBvcnQgY2xhc3MgTm90Rm91bmRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gXCLos4fmupDmnKrmib7liLBcIiwgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNDA0LCBFcnJvckNvZGUuUkVTT1VSQ0VfTk9UX0ZPVU5ELCBkZXRhaWxzKTtcbiAgfVxufVxuXG4vKipcbiAqIOihneeqgemMr+iqpFxuICovXG5leHBvcnQgY2xhc3MgQ29uZmxpY3RFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gXCLos4fmupDooZ3nqoFcIiwgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNDA5LCBFcnJvckNvZGUuUkVTT1VSQ0VfQ09ORkxJQ1QsIGRldGFpbHMpO1xuICB9XG59XG5cbi8qKlxuICog6YCf546H6ZmQ5Yi26Yyv6KqkXG4gKi9cbmV4cG9ydCBjbGFzcyBSYXRlTGltaXRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gXCLoq4vmsYLpgY7mlrzpoLvnuYFcIiwgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNDI5LCBFcnJvckNvZGUuUkFURV9MSU1JVF9FWENFRURFRCwgZGV0YWlscyk7XG4gIH1cbn1cblxuLyoqXG4gKiDlhafpg6jkvLrmnI3lmajpjK/oqqRcbiAqL1xuZXhwb3J0IGNsYXNzIEludGVybmFsU2VydmVyRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZyA9IFwi5YWn6YOo5Ly65pyN5Zmo6Yyv6KqkXCIsIGRldGFpbHM/OiBFcnJvckRldGFpbHNbXSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIDUwMCwgRXJyb3JDb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUiwgZGV0YWlscywgZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICog5pyN5YuZ5LiN5Y+v55So6Yyv6KqkXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlVW5hdmFpbGFibGVFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gXCLmnI3li5nmmqvmmYLkuI3lj6/nlKhcIiwgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNTAzLCBFcnJvckNvZGUuU0VSVklDRV9VTkFWQUlMQUJMRSwgZGV0YWlscywgZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICog5qWt5YuZ6YKP6Lyv6Yyv6KqkXG4gKi9cbmV4cG9ydCBjbGFzcyBCdXNpbmVzc1J1bGVFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBkZXRhaWxzPzogRXJyb3JEZXRhaWxzW10pIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDAsIEVycm9yQ29kZS5CVVNJTkVTU19SVUxFX1ZJT0xBVElPTiwgZGV0YWlscyk7XG4gIH1cbn1cblxuLyoqXG4gKiDlpJbpg6jmnI3li5npjK/oqqRcbiAqL1xuZXhwb3J0IGNsYXNzIEV4dGVybmFsU2VydmljZUVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcgPSBcIuWklumDqOacjeWLmemMr+iqpFwiLCBkZXRhaWxzPzogRXJyb3JEZXRhaWxzW10pIHtcbiAgICBzdXBlcihtZXNzYWdlLCA1MDIsIEVycm9yQ29kZS5FWFRFUk5BTF9TRVJWSUNFX0VSUk9SLCBkZXRhaWxzLCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiDos4fmlpnluqvpjK/oqqRcbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFiYXNlRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZyA9IFwi6LOH5paZ5bqr5pON5L2c5aSx5pWXXCIsIGRldGFpbHM/OiBFcnJvckRldGFpbHNbXSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIDUwMCwgRXJyb3JDb2RlLkRBVEFCQVNFX0VSUk9SLCBkZXRhaWxzLCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiDpjK/oqqTlt6Xlu6Dlh73mlbhcbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yRmFjdG9yeSB7XG4gIC8qKlxuICAgKiDlibXlu7rpqZforYnpjK/oqqRcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVWYWxpZGF0aW9uRXJyb3IoXG4gICAgbWVzc2FnZTogc3RyaW5nID0gXCLovLjlhaXos4fmlpnpqZforYnlpLHmlZdcIixcbiAgICBmaWVsZD86IHN0cmluZyxcbiAgICB2YWx1ZT86IGFueSxcbiAgICBjb25zdHJhaW50Pzogc3RyaW5nLFxuICApOiBWYWxpZGF0aW9uRXJyb3Ige1xuICAgIGNvbnN0IGRldGFpbHM6IEVycm9yRGV0YWlsc1tdID0gW107XG4gICAgaWYgKGZpZWxkKSB7XG4gICAgICBkZXRhaWxzLnB1c2goeyBmaWVsZCwgdmFsdWUsIGNvbnN0cmFpbnQgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVmFsaWRhdGlvbkVycm9yKG1lc3NhZ2UsIGRldGFpbHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWJteW7uuiqjeitiemMr+iqpFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUF1dGhlbnRpY2F0aW9uRXJyb3IoXG4gICAgdHlwZTpcbiAgICAgIHwgXCJpbnZhbGlkX2NyZWRlbnRpYWxzXCJcbiAgICAgIHwgXCJpbnZhbGlkX3Rva2VuXCJcbiAgICAgIHwgXCJ0b2tlbl9leHBpcmVkXCIgPSBcImludmFsaWRfY3JlZGVudGlhbHNcIixcbiAgKTogQXV0aGVudGljYXRpb25FcnJvciB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSB7XG4gICAgICBpbnZhbGlkX2NyZWRlbnRpYWxzOiBcIueUqOaItuWQjeaIluWvhueivOmMr+iqpFwiLFxuICAgICAgaW52YWxpZF90b2tlbjogXCLnhKHmlYjnmoToqo3orYnku6TniYxcIixcbiAgICAgIHRva2VuX2V4cGlyZWQ6IFwi6KqN6K2J5Luk54mM5bey6YGO5pyfXCIsXG4gICAgfTtcblxuICAgIGNvbnN0IGVycm9yQ29kZXMgPSB7XG4gICAgICBpbnZhbGlkX2NyZWRlbnRpYWxzOiBFcnJvckNvZGUuSU5WQUxJRF9DUkVERU5USUFMUyxcbiAgICAgIGludmFsaWRfdG9rZW46IEVycm9yQ29kZS5JTlZBTElEX1RPS0VOLFxuICAgICAgdG9rZW5fZXhwaXJlZDogRXJyb3JDb2RlLlRPS0VOX0VYUElSRUQsXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgQXV0aGVudGljYXRpb25FcnJvcihtZXNzYWdlc1t0eXBlXSwgZXJyb3JDb2Rlc1t0eXBlXSk7XG4gIH1cblxuICAvKipcbiAgICog5Ym15bu66LOH5rqQ5pyq5om+5Yiw6Yyv6KqkXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlTm90Rm91bmRFcnJvcihcbiAgICByZXNvdXJjZTogc3RyaW5nLFxuICAgIGlkZW50aWZpZXI/OiBzdHJpbmcgfCBudW1iZXIsXG4gICk6IE5vdEZvdW5kRXJyb3Ige1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBpZGVudGlmaWVyXG4gICAgICA/IGAke3Jlc291cmNlfSAoJHtpZGVudGlmaWVyfSkg5pyq5om+5YiwYFxuICAgICAgOiBgJHtyZXNvdXJjZX0g5pyq5om+5YiwYDtcblxuICAgIGNvbnN0IGRldGFpbHM6IEVycm9yRGV0YWlsc1tdID0gW1xuICAgICAge1xuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIHJldHVybiBuZXcgTm90Rm91bmRFcnJvcihtZXNzYWdlLCBkZXRhaWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlibXlu7rooZ3nqoHpjK/oqqRcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVDb25mbGljdEVycm9yKFxuICAgIHJlc291cmNlOiBzdHJpbmcsXG4gICAgZmllbGQ6IHN0cmluZyxcbiAgICB2YWx1ZTogYW55LFxuICApOiBDb25mbGljdEVycm9yIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYCR7cmVzb3VyY2V9IOeahCAke2ZpZWxkfSDlt7LlrZjlnKhgO1xuICAgIGNvbnN0IGRldGFpbHM6IEVycm9yRGV0YWlsc1tdID0gW1xuICAgICAge1xuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgZmllbGQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjb25zdHJhaW50OiBcInVuaXF1ZVwiLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIG5ldyBDb25mbGljdEVycm9yKG1lc3NhZ2UsIGRldGFpbHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWJteW7uumAn+eOh+mZkOWItumMr+iqpFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVJhdGVMaW1pdEVycm9yKFxuICAgIG1lc3NhZ2U6IHN0cmluZyA9IFwi6KuL5rGC6YGO5pa86aC757mB77yM6KuL56iN5b6M5YaN6KmmXCIsXG4gICAgZGV0YWlscz86IEVycm9yRGV0YWlsc1tdLFxuICApOiBSYXRlTGltaXRFcnJvciB7XG4gICAgcmV0dXJuIG5ldyBSYXRlTGltaXRFcnJvcihtZXNzYWdlLCBkZXRhaWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvp4gTW9uZ29vc2Ug6Yyv6Kqk5Ym15bu6IEFwcEVycm9yXG4gICAqL1xuICBzdGF0aWMgZnJvbU1vbmdvb3NlRXJyb3IoZXJyb3I6IGFueSk6IEFwcEVycm9yIHtcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gXCJWYWxpZGF0aW9uRXJyb3JcIikge1xuICAgICAgY29uc3QgZGV0YWlsczogRXJyb3JEZXRhaWxzW10gPSBPYmplY3QudmFsdWVzKGVycm9yLmVycm9ycykubWFwKFxuICAgICAgICAoZXJyOiBhbnkpID0+ICh7XG4gICAgICAgICAgZmllbGQ6IGVyci5wYXRoLFxuICAgICAgICAgIHZhbHVlOiBlcnIudmFsdWUsXG4gICAgICAgICAgY29uc3RyYWludDogZXJyLmtpbmQsXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXcgVmFsaWRhdGlvbkVycm9yKFwi6LOH5paZ6amX6K2J5aSx5pWXXCIsIGRldGFpbHMpO1xuICAgIH1cblxuICAgIGlmIChlcnJvci5uYW1lID09PSBcIk1vbmdvU2VydmVyRXJyb3JcIiAmJiBlcnJvci5jb2RlID09PSAxMTAwMCkge1xuICAgICAgY29uc3QgZmllbGQgPSBPYmplY3Qua2V5cyhlcnJvci5rZXlWYWx1ZSB8fCB7fSlbMF07XG4gICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlcnJvci5rZXlWYWx1ZVtmaWVsZF07XG4gICAgICAgIHJldHVybiBFcnJvckZhY3RvcnkuY3JlYXRlQ29uZmxpY3RFcnJvcihcIuizh+a6kFwiLCBmaWVsZCwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDb25mbGljdEVycm9yKFwi6LOH5rqQ6KGd56qBXCIpO1xuICAgIH1cblxuICAgIGlmIChlcnJvci5uYW1lID09PSBcIkNhc3RFcnJvclwiKSB7XG4gICAgICBjb25zdCBkZXRhaWxzOiBFcnJvckRldGFpbHNbXSA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkOiBlcnJvci5wYXRoLFxuICAgICAgICAgIHZhbHVlOiBlcnJvci52YWx1ZSxcbiAgICAgICAgICBjb25zdHJhaW50OiBcInR5cGVcIixcbiAgICAgICAgICBtZXNzYWdlOiBcIueEoeaViOeahOizh+aWmeagvOW8j1wiLFxuICAgICAgICB9LFxuICAgICAgXTtcbiAgICAgIHJldHVybiBuZXcgVmFsaWRhdGlvbkVycm9yKFwi54Sh5pWI55qE6LOH5paZ5qC85byPXCIsIGRldGFpbHMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0YWJhc2VFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvp4gWm9kIOmMr+iqpOWJteW7uiBWYWxpZGF0aW9uRXJyb3JcbiAgICovXG4gIHN0YXRpYyBmcm9tWm9kRXJyb3IoZXJyb3I6IGFueSk6IFZhbGlkYXRpb25FcnJvciB7XG4gICAgY29uc3QgZGV0YWlsczogRXJyb3JEZXRhaWxzW10gPSBlcnJvci5lcnJvcnMubWFwKChlcnI6IGFueSkgPT4gKHtcbiAgICAgIGZpZWxkOiBlcnIucGF0aC5qb2luKFwiLlwiKSxcbiAgICAgIHZhbHVlOiBlcnIucmVjZWl2ZWQsXG4gICAgICBjb25zdHJhaW50OiBlcnIuY29kZSxcbiAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgIH0pKTtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRpb25FcnJvcihcIui8uOWFpeizh+aWmempl+itieWkseaVl1wiLCBkZXRhaWxzKTtcbiAgfVxufVxuXG4vKipcbiAqIOaqouafpemMr+iqpOaYr+WQpueCuuaTjeS9nOaAp+mMr+iqpFxuICovXG5leHBvcnQgY29uc3QgaXNPcGVyYXRpb25hbEVycm9yID0gKGVycm9yOiBFcnJvcik6IGJvb2xlYW4gPT4ge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBcHBFcnJvcikge1xuICAgIHJldHVybiBlcnJvci5pc09wZXJhdGlvbmFsO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICog5qC85byP5YyW6Yyv6Kqk6Z+/5oeJXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JtYXRFcnJvclJlc3BvbnNlID0gKFxuICBlcnJvcjogQXBwRXJyb3IsXG4gIGluY2x1ZGVTdGFjazogYm9vbGVhbiA9IGZhbHNlLFxuKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSB7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgZXJyb3I6IHtcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBjb2RlOiBlcnJvci5lcnJvckNvZGUsXG4gICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXNDb2RlLFxuICAgICAgdGltZXN0YW1wOiBlcnJvci50aW1lc3RhbXAsXG4gICAgfSxcbiAgfTtcblxuICBpZiAoZXJyb3IuZGV0YWlscyAmJiBlcnJvci5kZXRhaWxzLmxlbmd0aCA+IDApIHtcbiAgICByZXNwb25zZS5lcnJvci5kZXRhaWxzID0gZXJyb3IuZGV0YWlscztcbiAgfVxuXG4gIGlmIChpbmNsdWRlU3RhY2sgJiYgZXJyb3Iuc3RhY2spIHtcbiAgICByZXNwb25zZS5lcnJvci5zdGFjayA9IGVycm9yLnN0YWNrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcblxuLyoqXG4gKiDpjK/oqqTml6XoqozmoLzlvI/ljJZcbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdEVycm9yRm9yTG9nZ2luZyA9IChcbiAgZXJyb3I6IEVycm9yLFxuICBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PixcbikgPT4ge1xuICBjb25zdCBsb2dEYXRhOiBhbnkgPSB7XG4gICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICBuYW1lOiBlcnJvci5uYW1lLFxuICAgIHN0YWNrOiBlcnJvci5zdGFjayxcbiAgfTtcblxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBcHBFcnJvcikge1xuICAgIGxvZ0RhdGEuZXJyb3JDb2RlID0gZXJyb3IuZXJyb3JDb2RlO1xuICAgIGxvZ0RhdGEuc3RhdHVzQ29kZSA9IGVycm9yLnN0YXR1c0NvZGU7XG4gICAgbG9nRGF0YS5pc09wZXJhdGlvbmFsID0gZXJyb3IuaXNPcGVyYXRpb25hbDtcbiAgICBsb2dEYXRhLmRldGFpbHMgPSBlcnJvci5kZXRhaWxzO1xuICB9XG5cbiAgaWYgKGNvbnRleHQpIHtcbiAgICBsb2dEYXRhLmNvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgcmV0dXJuIGxvZ0RhdGE7XG59O1xuIl0sInZlcnNpb24iOjN9