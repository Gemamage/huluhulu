{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\search.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\search.ts"],"sourcesContent":["import { Router } from 'express';\nimport { asyncHandler } from '../middleware/error-handler';\nimport { ValidationError } from '../utils/errors';\nimport { logger } from '../utils/logger';\nimport { authenticate } from '../middleware/auth';\nimport { requireActiveAccount } from '../middleware/rbac';\nimport { SearchHistory } from '../models/SearchHistory';\nimport { validateQuery } from '../utils/validation';\nimport { searchHistoryQuerySchema } from '../schemas/upload';\n\nconst router = Router();\n\n/**\n * @route   GET /api/search/history\n * @desc    獲取用戶搜尋歷史\n * @access  Private\n */\nrouter.get('/history', \n  authenticate, \n  requireActiveAccount, \n  validateQuery(searchHistoryQuerySchema),\n  asyncHandler(async (req, res) => {\n    const { limit = 10 } = req.query;\n    const userId = req.user!.id;\n    const limitNumber = typeof limit === 'string' ? parseInt(limit, 10) : Number(limit);\n\n    logger.info('獲取搜尋歷史請求', { userId, limit: limitNumber });\n\n    const searchHistory = await SearchHistory.getUserSearchHistory(userId, limitNumber);\n\n    res.json({\n      success: true,\n      data: {\n        searchHistory\n      }\n    });\n  })\n);\n\n/**\n * @route   DELETE /api/search/history\n * @desc    清除用戶搜尋歷史\n * @access  Private\n */\nrouter.delete('/history', \n  authenticate, \n  requireActiveAccount,\n  asyncHandler(async (req, res) => {\n    const userId = req.user!.id;\n\n    logger.info('清除搜尋歷史請求', { userId });\n\n    await SearchHistory.clearUserHistory(userId);\n\n    res.json({\n      success: true,\n      message: '搜尋歷史已清除'\n    });\n  })\n);\n\n/**\n * @route   GET /api/search/popular\n * @desc    獲取熱門搜尋關鍵字\n * @access  Public\n */\nrouter.get('/popular', \n  validateQuery(searchHistoryQuerySchema),\n  asyncHandler(async (req, res) => {\n    const { limit = 10 } = req.query;\n    const limitNumber = typeof limit === 'string' ? parseInt(limit, 10) : Number(limit);\n\n    logger.info('獲取熱門搜尋請求', { limit: limitNumber });\n\n    const popularSearches = await SearchHistory.getPopularSearches(limitNumber);\n\n    res.json({\n      success: true,\n      data: {\n        popularSearches\n      }\n    });\n  })\n);\n\n/**\n * @route   POST /api/search/suggestions\n * @desc    獲取搜尋建議\n * @access  Public\n */\nrouter.post('/suggestions', asyncHandler(async (req, res) => {\n  const { query } = req.body;\n\n  if (!query || typeof query !== 'string' || query.trim().length < 2) {\n    throw new ValidationError('搜尋查詢至少需要 2 個字元');\n  }\n\n  logger.info('獲取搜尋建議請求', { query });\n\n  // 基於搜尋歷史提供建議\n  const suggestions = await SearchHistory.aggregate([\n    {\n      $match: {\n        searchQuery: { $regex: query.trim(), $options: 'i' },\n        searchedAt: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } // 最近 30 天\n      }\n    },\n    {\n      $group: {\n        _id: '$searchQuery',\n        count: { $sum: 1 },\n        lastSearched: { $max: '$searchedAt' }\n      }\n    },\n    {\n      $sort: { count: -1, lastSearched: -1 }\n    },\n    {\n      $limit: 5\n    },\n    {\n      $project: {\n        suggestion: '$_id',\n        count: 1,\n        _id: 0\n      }\n    }\n  ]);\n\n  res.json({\n    success: true,\n    data: {\n      suggestions: suggestions.map(s => s.suggestion)\n    }\n  });\n}));\n\nexport { router as searchRoutes };"],"version":3}