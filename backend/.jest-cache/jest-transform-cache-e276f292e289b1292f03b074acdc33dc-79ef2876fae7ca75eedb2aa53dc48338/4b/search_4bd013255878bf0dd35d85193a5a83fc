f888d243dba55636265ec0e6ccd739ab
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchRoutes = void 0;
const express_1 = require("express");
const error_handler_1 = require("../middleware/error-handler");
const errors_1 = require("../utils/errors");
const logger_1 = require("../utils/logger");
const auth_1 = require("../middleware/auth");
const rbac_1 = require("../middleware/rbac");
const SearchHistory_1 = require("../models/SearchHistory");
const validation_1 = require("../utils/validation");
const upload_1 = require("../schemas/upload");
const router = (0, express_1.Router)();
exports.searchRoutes = router;
/**
 * @route   GET /api/search/history
 * @desc    獲取用戶搜尋歷史
 * @access  Private
 */
router.get('/history', auth_1.authenticate, rbac_1.requireActiveAccount, (0, validation_1.validateQuery)(upload_1.searchHistoryQuerySchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { limit = 10 } = req.query;
    const userId = req.user.id;
    const limitNumber = typeof limit === 'string' ? parseInt(limit, 10) : Number(limit);
    logger_1.logger.info('獲取搜尋歷史請求', { userId, limit: limitNumber });
    const searchHistory = await SearchHistory_1.SearchHistory.getUserSearchHistory(userId, limitNumber);
    res.json({
        success: true,
        data: {
            searchHistory
        }
    });
}));
/**
 * @route   DELETE /api/search/history
 * @desc    清除用戶搜尋歷史
 * @access  Private
 */
router.delete('/history', auth_1.authenticate, rbac_1.requireActiveAccount, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user.id;
    logger_1.logger.info('清除搜尋歷史請求', { userId });
    await SearchHistory_1.SearchHistory.clearUserHistory(userId);
    res.json({
        success: true,
        message: '搜尋歷史已清除'
    });
}));
/**
 * @route   GET /api/search/popular
 * @desc    獲取熱門搜尋關鍵字
 * @access  Public
 */
router.get('/popular', (0, validation_1.validateQuery)(upload_1.searchHistoryQuerySchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { limit = 10 } = req.query;
    const limitNumber = typeof limit === 'string' ? parseInt(limit, 10) : Number(limit);
    logger_1.logger.info('獲取熱門搜尋請求', { limit: limitNumber });
    const popularSearches = await SearchHistory_1.SearchHistory.getPopularSearches(limitNumber);
    res.json({
        success: true,
        data: {
            popularSearches
        }
    });
}));
/**
 * @route   POST /api/search/suggestions
 * @desc    獲取搜尋建議
 * @access  Public
 */
router.post('/suggestions', (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { query } = req.body;
    if (!query || typeof query !== 'string' || query.trim().length < 2) {
        throw new errors_1.ValidationError('搜尋查詢至少需要 2 個字元');
    }
    logger_1.logger.info('獲取搜尋建議請求', { query });
    // 基於搜尋歷史提供建議
    const suggestions = await SearchHistory_1.SearchHistory.aggregate([
        {
            $match: {
                searchQuery: { $regex: query.trim(), $options: 'i' },
                searchedAt: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } // 最近 30 天
            }
        },
        {
            $group: {
                _id: '$searchQuery',
                count: { $sum: 1 },
                lastSearched: { $max: '$searchedAt' }
            }
        },
        {
            $sort: { count: -1, lastSearched: -1 }
        },
        {
            $limit: 5
        },
        {
            $project: {
                suggestion: '$_id',
                count: 1,
                _id: 0
            }
        }
    ]);
    res.json({
        success: true,
        data: {
            suggestions: suggestions.map(s => s.suggestion)
        }
    });
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,