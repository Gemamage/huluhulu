56a1b10a8947c3268881ec94289e7600
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordService = void 0;
const mongoose_1 = __importDefault(require("mongoose"));
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const crypto_1 = __importDefault(require("crypto"));
const UserRepository_1 = require("../../repositories/UserRepository");
const errors_1 = require("../../utils/errors");
const logger_1 = require("../../utils/logger");
const validation_1 = require("../../utils/validation");
const emailService_1 = require("../emailService");
/**
 * 密碼管理服務 - 處理密碼變更、重設等功能
 */
class PasswordService {
    constructor() {
        this.userRepository = new UserRepository_1.UserRepository();
        this.emailService = new emailService_1.EmailService();
    }
    /**
     * 變更密碼
     */
    async changePassword(userId, currentPassword, newPassword) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
                throw new errors_1.ValidationError("無效的用戶 ID");
            }
            // 驗證新密碼
            if (!(0, validation_1.validatePassword)(newPassword)) {
                throw new errors_1.ValidationError("新密碼必須至少8位，包含字母和數字");
            }
            // 獲取用戶（包含密碼）
            const user = await this.userRepository.findByIdWithPassword(userId);
            if (!user) {
                throw new errors_1.NotFoundError("用戶不存在");
            }
            // 驗證當前密碼
            const isCurrentPasswordValid = await bcryptjs_1.default.compare(currentPassword, user.password);
            if (!isCurrentPasswordValid) {
                throw new errors_1.ValidationError("當前密碼錯誤");
            }
            // 檢查新密碼是否與當前密碼相同
            const isSamePassword = await bcryptjs_1.default.compare(newPassword, user.password);
            if (isSamePassword) {
                throw new errors_1.ValidationError("新密碼不能與當前密碼相同");
            }
            // 更新密碼
            await this.userRepository.updatePassword(userId, newPassword);
            logger_1.logger.info("用戶密碼變更成功", { userId });
            // 發送密碼變更通知郵件
            try {
                await this.emailService.sendPasswordChangeNotification(user.email, user.name);
            }
            catch (emailError) {
                logger_1.logger.warn("密碼變更通知郵件發送失敗", { error: emailError, userId });
            }
        }
        catch (error) {
            logger_1.logger.error("變更密碼失敗", { error, userId });
            throw error;
        }
    }
    /**
     * 請求密碼重設
     */
    async requestPasswordReset(email) {
        try {
            // 查找用戶
            const user = await this.userRepository.findByEmail(email);
            if (!user) {
                // 為了安全考慮，即使用戶不存在也返回成功
                logger_1.logger.info("密碼重設請求 - 用戶不存在", { email });
                return;
            }
            // 檢查帳號狀態
            if (!user.isActive) {
                throw new errors_1.ValidationError("帳號已被停用，無法重設密碼");
            }
            // 生成重設令牌
            const resetToken = crypto_1.default.randomBytes(32).toString("hex");
            const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1小時後過期
            // 保存重設令牌
            await this.userRepository.updateWithValidation(user._id.toString(), {
                passwordResetToken: resetToken,
                passwordResetExpires: resetExpires,
            });
            // 發送重設郵件
            await this.emailService.sendPasswordResetEmail(email, user.name, resetToken);
            logger_1.logger.info("密碼重設郵件發送成功", { userId: user._id, email });
        }
        catch (error) {
            logger_1.logger.error("請求密碼重設失敗", { error, email });
            throw error;
        }
    }
    /**
     * 重設密碼
     */
    async resetPassword(token, newPassword) {
        try {
            // 驗證新密碼
            if (!(0, validation_1.validatePassword)(newPassword)) {
                throw new errors_1.ValidationError("密碼必須至少8位，包含字母和數字");
            }
            // 查找有效的重設令牌
            const user = await this.userRepository.findByResetToken(token);
            if (!user) {
                throw new errors_1.ValidationError("無效或已過期的重設令牌");
            }
            // 檢查令牌是否過期
            if (!user.passwordResetExpires ||
                user.passwordResetExpires < new Date()) {
                throw new errors_1.ValidationError("重設令牌已過期");
            }
            // 更新密碼並清除重設令牌
            await this.userRepository.updateWithValidation(user._id.toString(), {
                password: await bcryptjs_1.default.hash(newPassword, 12),
                passwordResetToken: undefined,
                passwordResetExpires: undefined,
            });
            logger_1.logger.info("密碼重設成功", { userId: user._id });
            // 發送密碼重設成功通知
            try {
                await this.emailService.sendPasswordResetSuccessNotification(user.email, user.name);
            }
            catch (emailError) {
                logger_1.logger.warn("密碼重設成功通知郵件發送失敗", {
                    error: emailError,
                    userId: user._id,
                });
            }
        }
        catch (error) {
            logger_1.logger.error("重設密碼失敗", { error, token });
            throw error;
        }
    }
    /**
     * 驗證密碼重設令牌
     */
    async validateResetToken(token) {
        try {
            const user = await this.userRepository.findByResetToken(token);
            if (!user ||
                !user.passwordResetExpires ||
                user.passwordResetExpires < new Date()) {
                return false;
            }
            return true;
        }
        catch (error) {
            logger_1.logger.error("驗證重設令牌失敗", { error, token });
            return false;
        }
    }
    /**
     * 清理過期的密碼重設令牌
     */
    async cleanupExpiredResetTokens() {
        try {
            const result = await this.userRepository.cleanupExpiredPasswordResetTokens();
            logger_1.logger.info("清理過期密碼重設令牌成功", {
                deletedCount: result.deletedCount,
            });
            return result;
        }
        catch (error) {
            logger_1.logger.error("清理過期密碼重設令牌失敗", { error });
            throw error;
        }
    }
}
exports.PasswordService = PasswordService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,