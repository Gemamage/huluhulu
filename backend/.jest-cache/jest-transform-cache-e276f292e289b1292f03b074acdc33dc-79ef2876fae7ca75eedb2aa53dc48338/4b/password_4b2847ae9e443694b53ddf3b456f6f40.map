{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\password.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\password.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport crypto from \"crypto\";\nimport { IUser } from \"../../models/User\";\nimport { UserRepository } from \"../../repositories/UserRepository\";\nimport { ValidationError, NotFoundError } from \"../../utils/errors\";\nimport { logger } from \"../../utils/logger\";\nimport { validatePassword } from \"../../utils/validation\";\nimport { EmailService } from \"../emailService\";\n\n/**\n * 密碼管理服務 - 處理密碼變更、重設等功能\n */\nexport class PasswordService {\n  private userRepository: UserRepository;\n  private emailService: EmailService;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n    this.emailService = new EmailService();\n  }\n\n  /**\n   * 變更密碼\n   */\n  async changePassword(\n    userId: string,\n    currentPassword: string,\n    newPassword: string,\n  ): Promise<void> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      // 驗證新密碼\n      if (!validatePassword(newPassword)) {\n        throw new ValidationError(\"新密碼必須至少8位，包含字母和數字\");\n      }\n\n      // 獲取用戶（包含密碼）\n      const user = await this.userRepository.findByIdWithPassword(userId);\n      if (!user) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      // 驗證當前密碼\n      const isCurrentPasswordValid = await bcrypt.compare(\n        currentPassword,\n        user.password,\n      );\n      if (!isCurrentPasswordValid) {\n        throw new ValidationError(\"當前密碼錯誤\");\n      }\n\n      // 檢查新密碼是否與當前密碼相同\n      const isSamePassword = await bcrypt.compare(newPassword, user.password);\n      if (isSamePassword) {\n        throw new ValidationError(\"新密碼不能與當前密碼相同\");\n      }\n\n      // 更新密碼\n      await this.userRepository.updatePassword(userId, newPassword);\n\n      logger.info(\"用戶密碼變更成功\", { userId });\n\n      // 發送密碼變更通知郵件\n      try {\n        await this.emailService.sendPasswordChangeNotification(\n          user.email,\n          user.name,\n        );\n      } catch (emailError) {\n        logger.warn(\"密碼變更通知郵件發送失敗\", { error: emailError, userId });\n      }\n    } catch (error) {\n      logger.error(\"變更密碼失敗\", { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 請求密碼重設\n   */\n  async requestPasswordReset(email: string): Promise<void> {\n    try {\n      // 查找用戶\n      const user = await this.userRepository.findByEmail(email);\n      if (!user) {\n        // 為了安全考慮，即使用戶不存在也返回成功\n        logger.info(\"密碼重設請求 - 用戶不存在\", { email });\n        return;\n      }\n\n      // 檢查帳號狀態\n      if (!user.isActive) {\n        throw new ValidationError(\"帳號已被停用，無法重設密碼\");\n      }\n\n      // 生成重設令牌\n      const resetToken = crypto.randomBytes(32).toString(\"hex\");\n      const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1小時後過期\n\n      // 保存重設令牌\n      await this.userRepository.updateWithValidation(user._id.toString(), {\n        passwordResetToken: resetToken,\n        passwordResetExpires: resetExpires,\n      });\n\n      // 發送重設郵件\n      await this.emailService.sendPasswordResetEmail(\n        email,\n        user.name,\n        resetToken,\n      );\n\n      logger.info(\"密碼重設郵件發送成功\", { userId: user._id, email });\n    } catch (error) {\n      logger.error(\"請求密碼重設失敗\", { error, email });\n      throw error;\n    }\n  }\n\n  /**\n   * 重設密碼\n   */\n  async resetPassword(token: string, newPassword: string): Promise<void> {\n    try {\n      // 驗證新密碼\n      if (!validatePassword(newPassword)) {\n        throw new ValidationError(\"密碼必須至少8位，包含字母和數字\");\n      }\n\n      // 查找有效的重設令牌\n      const user = await this.userRepository.findByResetToken(token);\n      if (!user) {\n        throw new ValidationError(\"無效或已過期的重設令牌\");\n      }\n\n      // 檢查令牌是否過期\n      if (\n        !user.passwordResetExpires ||\n        user.passwordResetExpires < new Date()\n      ) {\n        throw new ValidationError(\"重設令牌已過期\");\n      }\n\n      // 更新密碼並清除重設令牌\n      await this.userRepository.updateWithValidation(user._id.toString(), {\n        password: await bcrypt.hash(newPassword, 12),\n        passwordResetToken: undefined,\n        passwordResetExpires: undefined,\n      });\n\n      logger.info(\"密碼重設成功\", { userId: user._id });\n\n      // 發送密碼重設成功通知\n      try {\n        await this.emailService.sendPasswordResetSuccessNotification(\n          user.email,\n          user.name,\n        );\n      } catch (emailError) {\n        logger.warn(\"密碼重設成功通知郵件發送失敗\", {\n          error: emailError,\n          userId: user._id,\n        });\n      }\n    } catch (error) {\n      logger.error(\"重設密碼失敗\", { error, token });\n      throw error;\n    }\n  }\n\n  /**\n   * 驗證密碼重設令牌\n   */\n  async validateResetToken(token: string): Promise<boolean> {\n    try {\n      const user = await this.userRepository.findByResetToken(token);\n\n      if (\n        !user ||\n        !user.passwordResetExpires ||\n        user.passwordResetExpires < new Date()\n      ) {\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      logger.error(\"驗證重設令牌失敗\", { error, token });\n      return false;\n    }\n  }\n\n  /**\n   * 清理過期的密碼重設令牌\n   */\n  async cleanupExpiredResetTokens(): Promise<{ deletedCount: number }> {\n    try {\n      const result =\n        await this.userRepository.cleanupExpiredPasswordResetTokens();\n\n      logger.info(\"清理過期密碼重設令牌成功\", {\n        deletedCount: result.deletedCount,\n      });\n      return result;\n    } catch (error) {\n      logger.error(\"清理過期密碼重設令牌失敗\", { error });\n      throw error;\n    }\n  }\n}\n"],"version":3}