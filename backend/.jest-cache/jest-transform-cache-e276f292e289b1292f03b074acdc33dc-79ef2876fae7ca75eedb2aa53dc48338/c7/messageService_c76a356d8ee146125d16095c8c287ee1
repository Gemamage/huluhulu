289ea32adb9b9911893ffc11b195180c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageService = exports.MessageService = void 0;
const mongoose_1 = __importDefault(require("mongoose"));
const Message_1 = require("../models/Message");
const User_1 = require("../models/User");
const Pet_1 = require("../models/Pet");
const notificationService_1 = require("./notificationService");
const Notification_1 = require("../models/Notification");
const socketService_1 = require("./socketService");
class MessageService {
    constructor() {
        this.notificationService = new notificationService_1.NotificationService();
        this.socketService = new socketService_1.SocketService();
    }
    /**
     * 創建或獲取對話
     */
    async createOrGetConversation(data) {
        const { participants, petId } = data;
        if (participants.length !== 2) {
            throw new Error('對話必須包含兩個參與者');
        }
        // 驗證參與者是否存在
        const users = await User_1.User.find({
            _id: { $in: participants.map(id => new mongoose_1.default.Types.ObjectId(id)) }
        });
        if (users.length !== 2) {
            throw new Error('參與者不存在');
        }
        // 驗證寵物是否存在（如果提供）
        if (petId) {
            const pet = await Pet_1.Pet.findById(petId);
            if (!pet) {
                throw new Error('寵物不存在');
            }
        }
        // 查找現有對話
        const participantIds = participants.map(id => new mongoose_1.default.Types.ObjectId(id));
        let conversation = await Message_1.Conversation.findOne({
            participants: { $all: participantIds, $size: 2 }
        }).populate('participants', 'username avatar email');
        // 如果不存在，創建新對話
        if (!conversation) {
            conversation = new Message_1.Conversation({
                participants: participantIds,
                petId: petId ? new mongoose_1.default.Types.ObjectId(petId) : null,
                lastMessageAt: new Date()
            });
            await conversation.save();
            await conversation.populate('participants', 'username avatar email');
        }
        return conversation;
    }
    /**
     * 發送訊息
     */
    async sendMessage(data) {
        const { conversationId, senderId, content, messageType = 'text', imageUrl } = data;
        // 驗證對話是否存在
        const conversation = await Message_1.Conversation.findById(conversationId);
        if (!conversation) {
            throw new Error('對話不存在');
        }
        // 驗證發送者是否為對話參與者
        const senderObjectId = new mongoose_1.default.Types.ObjectId(senderId);
        if (!conversation.participants.some(p => p.equals(senderObjectId))) {
            throw new Error('您不是此對話的參與者');
        }
        // 獲取接收者
        const receiverId = conversation.participants.find(p => !p.equals(senderObjectId));
        if (!receiverId) {
            throw new Error('找不到接收者');
        }
        // 創建訊息
        const message = new Message_1.Message({
            conversationId: new mongoose_1.default.Types.ObjectId(conversationId),
            senderId: senderObjectId,
            receiverId,
            content: content.trim(),
            messageType,
            imageUrl: messageType === 'image' ? imageUrl : undefined
        });
        await message.save();
        // 更新對話的最後訊息
        await Message_1.Conversation.findByIdAndUpdate(conversationId, {
            lastMessage: message._id,
            lastMessageAt: new Date()
        });
        // 填充訊息資料
        await message.populate([
            { path: 'senderId', select: 'username avatar email' },
            { path: 'receiverId', select: 'username avatar email' }
        ]);
        // 發送即時通知
        await this.sendMessageNotification(message);
        return message;
    }
    /**
     * 獲取對話訊息
     */
    async getMessages(query) {
        const { conversationId, page = 1, limit = 50, before, after } = query;
        if (!mongoose_1.default.Types.ObjectId.isValid(conversationId)) {
            throw new Error('無效的對話ID');
        }
        // 構建查詢條件
        const filter = { conversationId: new mongoose_1.default.Types.ObjectId(conversationId) };
        if (before)
            filter.createdAt = { $lt: before };
        if (after)
            filter.createdAt = { ...filter.createdAt, $gt: after };
        // 計算分頁
        const skip = (page - 1) * limit;
        // 執行查詢
        const [messages, total] = await Promise.all([
            Message_1.Message.find(filter)
                .populate('senderId', 'username avatar email')
                .populate('receiverId', 'username avatar email')
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit)
                .lean(),
            Message_1.Message.countDocuments(filter)
        ]);
        const totalPages = Math.ceil(total / limit);
        const hasMore = page < totalPages;
        return {
            messages: messages.reverse(), // 反轉順序，最新的在底部
            total,
            page,
            totalPages,
            hasMore
        };
    }
    /**
     * 獲取用戶對話列表
     */
    async getConversations(query) {
        const { userId, page = 1, limit = 20, search } = query;
        if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
            throw new Error('無效的用戶ID');
        }
        const userObjectId = new mongoose_1.default.Types.ObjectId(userId);
        // 構建查詢條件
        const filter = {
            participants: userObjectId,
            isActive: true
        };
        // 如果有搜索條件，需要先找到匹配的用戶
        if (search) {
            const searchUsers = await User_1.User.find({
                $or: [
                    { username: { $regex: search, $options: 'i' } },
                    { email: { $regex: search, $options: 'i' } }
                ]
            }).select('_id');
            const searchUserIds = searchUsers.map(u => u._id);
            filter.participants = { $in: [userObjectId, ...searchUserIds] };
        }
        // 計算分頁
        const skip = (page - 1) * limit;
        // 執行查詢
        const [conversations, total] = await Promise.all([
            Message_1.Conversation.find(filter)
                .populate('participants', 'username avatar email lastActiveAt')
                .populate('lastMessage')
                .populate('petId', 'name images')
                .sort({ lastMessageAt: -1 })
                .skip(skip)
                .limit(limit)
                .lean(),
            Message_1.Conversation.countDocuments(filter)
        ]);
        // 為每個對話添加未讀訊息數量
        const conversationsWithUnread = await Promise.all(conversations.map(async (conv) => {
            const unreadCount = await Message_1.Message.countDocuments({
                conversationId: conv._id,
                receiverId: userObjectId,
                isRead: false
            });
            // 獲取對話夥伴資訊
            const partner = conv.participants.find((p) => !p._id.equals(userObjectId));
            return {
                ...conv,
                unreadCount,
                partner
            };
        }));
        return {
            conversations: conversationsWithUnread,
            total,
            page,
            totalPages: Math.ceil(total / limit)
        };
    }
    /**
     * 標記訊息為已讀
     */
    async markMessagesAsRead(conversationId, userId) {
        if (!mongoose_1.default.Types.ObjectId.isValid(conversationId)) {
            throw new Error('無效的對話ID');
        }
        const result = await Message_1.Message.updateMany({
            conversationId: new mongoose_1.default.Types.ObjectId(conversationId),
            receiverId: new mongoose_1.default.Types.ObjectId(userId),
            isRead: false
        }, {
            isRead: true,
            readAt: new Date()
        });
        return result.modifiedCount;
    }
    /**
     * 刪除訊息
     */
    async deleteMessage(messageId, userId) {
        if (!mongoose_1.default.Types.ObjectId.isValid(messageId)) {
            throw new Error('無效的訊息ID');
        }
        const message = await Message_1.Message.findById(messageId);
        if (!message) {
            throw new Error('訊息不存在');
        }
        // 檢查權限（只有發送者可以刪除）
        if (message.senderId.toString() !== userId) {
            throw new Error('無權限刪除此訊息');
        }
        // 軟刪除
        await Message_1.Message.findByIdAndUpdate(messageId, {
            isDeleted: true,
            deletedAt: new Date(),
            deletedBy: new mongoose_1.default.Types.ObjectId(userId)
        });
        return true;
    }
    /**
     * 刪除對話
     */
    async deleteConversation(conversationId, userId) {
        if (!mongoose_1.default.Types.ObjectId.isValid(conversationId)) {
            throw new Error('無效的對話ID');
        }
        const conversation = await Message_1.Conversation.findById(conversationId);
        if (!conversation) {
            throw new Error('對話不存在');
        }
        // 檢查權限
        const userObjectId = new mongoose_1.default.Types.ObjectId(userId);
        if (!conversation.participants.some(p => p.equals(userObjectId))) {
            throw new Error('您不是此對話的參與者');
        }
        // 將對話標記為非活躍
        await Message_1.Conversation.findByIdAndUpdate(conversationId, {
            isActive: false
        });
        return true;
    }
    /**
     * 獲取未讀訊息統計
     */
    async getUnreadStats(userId) {
        if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
            throw new Error('無效的用戶ID');
        }
        const userObjectId = new mongoose_1.default.Types.ObjectId(userId);
        const [totalUnread, conversationsWithUnread] = await Promise.all([
            Message_1.Message.countDocuments({
                receiverId: userObjectId,
                isRead: false
            }),
            Message_1.Message.aggregate([
                {
                    $match: {
                        receiverId: userObjectId,
                        isRead: false
                    }
                },
                {
                    $group: {
                        _id: '$conversationId'
                    }
                },
                {
                    $count: 'count'
                }
            ])
        ]);
        return {
            totalUnread,
            conversationsWithUnread: conversationsWithUnread[0]?.count || 0
        };
    }
    /**
     * 搜索訊息
     */
    async searchMessages(userId, keyword, conversationId) {
        if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
            throw new Error('無效的用戶ID');
        }
        const userObjectId = new mongoose_1.default.Types.ObjectId(userId);
        // 構建查詢條件
        const filter = {
            $or: [
                { senderId: userObjectId },
                { receiverId: userObjectId }
            ],
            content: { $regex: keyword, $options: 'i' },
            messageType: 'text'
        };
        if (conversationId) {
            filter.conversationId = new mongoose_1.default.Types.ObjectId(conversationId);
        }
        const messages = await Message_1.Message.find(filter)
            .populate('senderId', 'username avatar')
            .populate('receiverId', 'username avatar')
            .populate('conversationId')
            .sort({ createdAt: -1 })
            .limit(50)
            .lean();
        return messages;
    }
    /**
     * 發送訊息通知
     */
    async sendMessageNotification(message) {
        try {
            const sender = await User_1.User.findById(message.senderId).lean();
            const receiver = await User_1.User.findById(message.receiverId).lean();
            if (!sender || !receiver)
                return;
            // 發送推播通知
            await notificationService_1.NotificationService.sendNotification({
                userId: message.receiverId.toString(),
                type: Notification_1.NotificationType.MESSAGE,
                title: `來自 ${sender?.username || '用戶'} 的訊息`,
                message: message.messageType === 'text'
                    ? message.content.substring(0, 50) + (message.content.length > 50 ? '...' : '')
                    : '發送了一張圖片',
                data: {
                    conversationId: message.conversationId.toString(),
                    messageId: message._id.toString(),
                    senderId: message.senderId.toString()
                }
            });
            // 發送即時 Socket 通知（如果 SocketService 有 sendToUser 方法）
            if (typeof this.socketService.sendToUser === 'function') {
                this.socketService.sendToUser(message.receiverId.toString(), 'new_message', {
                    message: {
                        ...message.toObject(),
                        sender: { username: sender?.username || '用戶' }
                    }
                });
            }
        }
        catch (error) {
            console.error('發送訊息通知失敗:', error);
        }
    }
}
exports.MessageService = MessageService;
exports.messageService = new MessageService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,