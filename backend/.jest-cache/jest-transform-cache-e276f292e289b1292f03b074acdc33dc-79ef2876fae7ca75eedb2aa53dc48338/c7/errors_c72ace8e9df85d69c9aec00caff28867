e3ba054f8e26a6fd201ea4d70e4475d4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatErrorForLogging = exports.formatErrorResponse = exports.isOperationalError = exports.ErrorFactory = exports.DatabaseError = exports.ExternalServiceError = exports.BusinessRuleError = exports.ServiceUnavailableError = exports.InternalServerError = exports.RateLimitError = exports.ConflictError = exports.NotFoundError = exports.ForbiddenError = exports.AuthorizationError = exports.AuthenticationError = exports.ValidationError = exports.AppError = exports.ErrorCode = void 0;
/**
 * 錯誤代碼枚舉
 */
var ErrorCode;
(function (ErrorCode) {
    // 通用錯誤
    ErrorCode["INTERNAL_SERVER_ERROR"] = "INTERNAL_SERVER_ERROR";
    ErrorCode["SERVICE_UNAVAILABLE"] = "SERVICE_UNAVAILABLE";
    // 驗證錯誤
    ErrorCode["VALIDATION_ERROR"] = "VALIDATION_ERROR";
    ErrorCode["INVALID_INPUT"] = "INVALID_INPUT";
    ErrorCode["MISSING_REQUIRED_FIELD"] = "MISSING_REQUIRED_FIELD";
    // 認證錯誤
    ErrorCode["AUTHENTICATION_FAILED"] = "AUTHENTICATION_FAILED";
    ErrorCode["INVALID_TOKEN"] = "INVALID_TOKEN";
    ErrorCode["TOKEN_EXPIRED"] = "TOKEN_EXPIRED";
    ErrorCode["INVALID_CREDENTIALS"] = "INVALID_CREDENTIALS";
    // 授權錯誤
    ErrorCode["INSUFFICIENT_PERMISSIONS"] = "INSUFFICIENT_PERMISSIONS";
    ErrorCode["ACCESS_DENIED"] = "ACCESS_DENIED";
    // 資源錯誤
    ErrorCode["RESOURCE_NOT_FOUND"] = "RESOURCE_NOT_FOUND";
    ErrorCode["RESOURCE_ALREADY_EXISTS"] = "RESOURCE_ALREADY_EXISTS";
    ErrorCode["RESOURCE_CONFLICT"] = "RESOURCE_CONFLICT";
    // 業務邏輯錯誤
    ErrorCode["BUSINESS_RULE_VIOLATION"] = "BUSINESS_RULE_VIOLATION";
    ErrorCode["OPERATION_NOT_ALLOWED"] = "OPERATION_NOT_ALLOWED";
    // 外部服務錯誤
    ErrorCode["EXTERNAL_SERVICE_ERROR"] = "EXTERNAL_SERVICE_ERROR";
    ErrorCode["DATABASE_ERROR"] = "DATABASE_ERROR";
    // 速率限制
    ErrorCode["RATE_LIMIT_EXCEEDED"] = "RATE_LIMIT_EXCEEDED";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));
/**
 * 自定義錯誤類別
 */
class AppError extends Error {
    constructor(message, statusCode = 500, errorCode = ErrorCode.INTERNAL_SERVER_ERROR, details, isOperational = true) {
        super(message);
        this.statusCode = statusCode;
        this.errorCode = errorCode;
        this.details = details;
        this.isOperational = isOperational;
        this.timestamp = new Date().toISOString();
        // 確保錯誤堆疊追蹤正確
        Error.captureStackTrace(this, this.constructor);
    }
    /**
     * 轉換為 JSON 格式
     */
    toJSON() {
        return {
            message: this.message,
            statusCode: this.statusCode,
            errorCode: this.errorCode,
            details: this.details,
            timestamp: this.timestamp,
            isOperational: this.isOperational,
        };
    }
}
exports.AppError = AppError;
/**
 * 驗證錯誤
 */
class ValidationError extends AppError {
    constructor(message = '輸入資料驗證失敗', details) {
        super(message, 400, ErrorCode.VALIDATION_ERROR, details);
    }
}
exports.ValidationError = ValidationError;
/**
 * 認證錯誤
 */
class AuthenticationError extends AppError {
    constructor(message = '認證失敗', errorCode = ErrorCode.AUTHENTICATION_FAILED) {
        super(message, 401, errorCode);
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * 授權錯誤
 */
class AuthorizationError extends AppError {
    constructor(message = '權限不足', errorCode = ErrorCode.INSUFFICIENT_PERMISSIONS) {
        super(message, 403, errorCode);
    }
}
exports.AuthorizationError = AuthorizationError;
/**
 * 禁止訪問錯誤（AuthorizationError 的別名）
 */
class ForbiddenError extends AuthorizationError {
    constructor(message = '禁止訪問') {
        super(message, ErrorCode.ACCESS_DENIED);
    }
}
exports.ForbiddenError = ForbiddenError;
/**
 * 資源未找到錯誤
 */
class NotFoundError extends AppError {
    constructor(message = '資源未找到', details) {
        super(message, 404, ErrorCode.RESOURCE_NOT_FOUND, details);
    }
}
exports.NotFoundError = NotFoundError;
/**
 * 衝突錯誤
 */
class ConflictError extends AppError {
    constructor(message = '資源衝突', details) {
        super(message, 409, ErrorCode.RESOURCE_CONFLICT, details);
    }
}
exports.ConflictError = ConflictError;
/**
 * 速率限制錯誤
 */
class RateLimitError extends AppError {
    constructor(message = '請求過於頻繁', details) {
        super(message, 429, ErrorCode.RATE_LIMIT_EXCEEDED, details);
    }
}
exports.RateLimitError = RateLimitError;
/**
 * 內部伺服器錯誤
 */
class InternalServerError extends AppError {
    constructor(message = '內部伺服器錯誤', details) {
        super(message, 500, ErrorCode.INTERNAL_SERVER_ERROR, details, false);
    }
}
exports.InternalServerError = InternalServerError;
/**
 * 服務不可用錯誤
 */
class ServiceUnavailableError extends AppError {
    constructor(message = '服務暫時不可用', details) {
        super(message, 503, ErrorCode.SERVICE_UNAVAILABLE, details, false);
    }
}
exports.ServiceUnavailableError = ServiceUnavailableError;
/**
 * 業務邏輯錯誤
 */
class BusinessRuleError extends AppError {
    constructor(message, details) {
        super(message, 400, ErrorCode.BUSINESS_RULE_VIOLATION, details);
    }
}
exports.BusinessRuleError = BusinessRuleError;
/**
 * 外部服務錯誤
 */
class ExternalServiceError extends AppError {
    constructor(message = '外部服務錯誤', details) {
        super(message, 502, ErrorCode.EXTERNAL_SERVICE_ERROR, details, false);
    }
}
exports.ExternalServiceError = ExternalServiceError;
/**
 * 資料庫錯誤
 */
class DatabaseError extends AppError {
    constructor(message = '資料庫操作失敗', details) {
        super(message, 500, ErrorCode.DATABASE_ERROR, details, false);
    }
}
exports.DatabaseError = DatabaseError;
/**
 * 錯誤工廠函數
 */
class ErrorFactory {
    /**
     * 創建驗證錯誤
     */
    static createValidationError(message = '輸入資料驗證失敗', field, value, constraint) {
        const details = [];
        if (field) {
            details.push({ field, value, constraint });
        }
        return new ValidationError(message, details);
    }
    /**
     * 創建認證錯誤
     */
    static createAuthenticationError(type = 'invalid_credentials') {
        const messages = {
            invalid_credentials: '用戶名或密碼錯誤',
            invalid_token: '無效的認證令牌',
            token_expired: '認證令牌已過期',
        };
        const errorCodes = {
            invalid_credentials: ErrorCode.INVALID_CREDENTIALS,
            invalid_token: ErrorCode.INVALID_TOKEN,
            token_expired: ErrorCode.TOKEN_EXPIRED,
        };
        return new AuthenticationError(messages[type], errorCodes[type]);
    }
    /**
     * 創建資源未找到錯誤
     */
    static createNotFoundError(resource, identifier) {
        const message = identifier
            ? `${resource} (${identifier}) 未找到`
            : `${resource} 未找到`;
        const details = [{
                resource,
                identifier,
            }];
        return new NotFoundError(message, details);
    }
    /**
     * 創建衝突錯誤
     */
    static createConflictError(resource, field, value) {
        const message = `${resource} 的 ${field} 已存在`;
        const details = [{
                resource,
                field,
                value,
                constraint: 'unique',
            }];
        return new ConflictError(message, details);
    }
    /**
     * 創建速率限制錯誤
     */
    static createRateLimitError(message = '請求過於頻繁，請稍後再試', details) {
        return new RateLimitError(message, details);
    }
    /**
     * 從 Mongoose 錯誤創建 AppError
     */
    static fromMongooseError(error) {
        if (error.name === 'ValidationError') {
            const details = Object.values(error.errors).map((err) => ({
                field: err.path,
                value: err.value,
                constraint: err.kind,
                message: err.message,
            }));
            return new ValidationError('資料驗證失敗', details);
        }
        if (error.name === 'MongoServerError' && error.code === 11000) {
            const field = Object.keys(error.keyValue)[0];
            const value = error.keyValue[field];
            return ErrorFactory.createConflictError('資源', field, value);
        }
        if (error.name === 'CastError') {
            const details = [{
                    field: error.path,
                    value: error.value,
                    constraint: 'type',
                    message: '無效的資料格式',
                }];
            return new ValidationError('無效的資料格式', details);
        }
        return new DatabaseError(error.message);
    }
    /**
     * 從 Zod 錯誤創建 ValidationError
     */
    static fromZodError(error) {
        const details = error.errors.map((err) => ({
            field: err.path.join('.'),
            value: err.received,
            constraint: err.code,
            message: err.message,
        }));
        return new ValidationError('輸入資料驗證失敗', details);
    }
}
exports.ErrorFactory = ErrorFactory;
/**
 * 檢查錯誤是否為操作性錯誤
 */
const isOperationalError = (error) => {
    if (error instanceof AppError) {
        return error.isOperational;
    }
    return false;
};
exports.isOperationalError = isOperationalError;
/**
 * 格式化錯誤響應
 */
const formatErrorResponse = (error, includeStack = false) => {
    const response = {
        success: false,
        error: {
            message: error.message,
            code: error.errorCode,
            statusCode: error.statusCode,
            timestamp: error.timestamp,
        },
    };
    if (error.details && error.details.length > 0) {
        response.error.details = error.details;
    }
    if (includeStack && error.stack) {
        response.error.stack = error.stack;
    }
    return response;
};
exports.formatErrorResponse = formatErrorResponse;
/**
 * 錯誤日誌格式化
 */
const formatErrorForLogging = (error, context) => {
    const logData = {
        message: error.message,
        name: error.name,
        stack: error.stack,
    };
    if (error instanceof AppError) {
        logData.errorCode = error.errorCode;
        logData.statusCode = error.statusCode;
        logData.isOperational = error.isOperational;
        logData.details = error.details;
    }
    if (context) {
        logData.context = context;
    }
    return logData;
};
exports.formatErrorForLogging = formatErrorForLogging;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,