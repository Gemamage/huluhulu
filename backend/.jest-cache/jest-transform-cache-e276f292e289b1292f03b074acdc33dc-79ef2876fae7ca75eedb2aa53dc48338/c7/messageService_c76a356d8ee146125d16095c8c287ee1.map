{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\messageService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\messageService.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport { Message, Conversation, IMessage, IConversation } from '../models/Message';\nimport { User } from '../models/User';\nimport { Pet } from '../models/Pet';\nimport { NotificationService } from './notificationService';\nimport { NotificationType } from '../models/Notification';\nimport { SocketService } from './socketService';\n\nexport interface CreateConversationData {\n  participants: string[];\n  petId?: string;\n}\n\nexport interface SendMessageData {\n  conversationId: string;\n  senderId: string;\n  content: string;\n  messageType?: 'text' | 'image' | 'system';\n  imageUrl?: string;\n}\n\nexport interface MessageQuery {\n  conversationId: string;\n  page?: number;\n  limit?: number;\n  before?: Date;\n  after?: Date;\n}\n\nexport interface ConversationQuery {\n  userId: string;\n  page?: number;\n  limit?: number;\n  search?: string;\n}\n\nexport class MessageService {\n  private notificationService: NotificationService;\n  private socketService: SocketService;\n\n  constructor() {\n    this.notificationService = new NotificationService();\n    this.socketService = new SocketService();\n  }\n\n  /**\n   * 創建或獲取對話\n   */\n  async createOrGetConversation(data: CreateConversationData): Promise<IConversation> {\n    const { participants, petId } = data;\n\n    if (participants.length !== 2) {\n      throw new Error('對話必須包含兩個參與者');\n    }\n\n    // 驗證參與者是否存在\n    const users = await User.find({ \n      _id: { $in: participants.map(id => new mongoose.Types.ObjectId(id)) } \n    });\n    if (users.length !== 2) {\n      throw new Error('參與者不存在');\n    }\n\n    // 驗證寵物是否存在（如果提供）\n    if (petId) {\n      const pet = await Pet.findById(petId);\n      if (!pet) {\n        throw new Error('寵物不存在');\n      }\n    }\n\n    // 查找現有對話\n    const participantIds = participants.map(id => new mongoose.Types.ObjectId(id));\n    let conversation = await Conversation.findOne({\n      participants: { $all: participantIds, $size: 2 }\n    }).populate('participants', 'username avatar email');\n\n    // 如果不存在，創建新對話\n    if (!conversation) {\n      conversation = new Conversation({\n        participants: participantIds,\n        petId: petId ? new mongoose.Types.ObjectId(petId) : null,\n        lastMessageAt: new Date()\n      });\n      await conversation.save();\n      await conversation.populate('participants', 'username avatar email');\n    }\n\n    return conversation;\n  }\n\n  /**\n   * 發送訊息\n   */\n  async sendMessage(data: SendMessageData): Promise<IMessage> {\n    const { conversationId, senderId, content, messageType = 'text', imageUrl } = data;\n\n    // 驗證對話是否存在\n    const conversation = await Conversation.findById(conversationId);\n    if (!conversation) {\n      throw new Error('對話不存在');\n    }\n\n    // 驗證發送者是否為對話參與者\n    const senderObjectId = new mongoose.Types.ObjectId(senderId);\n    if (!conversation.participants.some(p => p.equals(senderObjectId))) {\n      throw new Error('您不是此對話的參與者');\n    }\n\n    // 獲取接收者\n    const receiverId = conversation.participants.find(p => !p.equals(senderObjectId));\n    if (!receiverId) {\n      throw new Error('找不到接收者');\n    }\n\n    // 創建訊息\n    const message = new Message({\n      conversationId: new mongoose.Types.ObjectId(conversationId),\n      senderId: senderObjectId,\n      receiverId,\n      content: content.trim(),\n      messageType,\n      imageUrl: messageType === 'image' ? imageUrl : undefined\n    });\n\n    await message.save();\n\n    // 更新對話的最後訊息\n    await Conversation.findByIdAndUpdate(conversationId, {\n      lastMessage: message._id,\n      lastMessageAt: new Date()\n    });\n\n    // 填充訊息資料\n    await message.populate([\n      { path: 'senderId', select: 'username avatar email' },\n      { path: 'receiverId', select: 'username avatar email' }\n    ]);\n\n    // 發送即時通知\n    await this.sendMessageNotification(message);\n\n    return message;\n  }\n\n  /**\n   * 獲取對話訊息\n   */\n  async getMessages(query: MessageQuery): Promise<{\n    messages: IMessage[];\n    total: number;\n    page: number;\n    totalPages: number;\n    hasMore: boolean;\n  }> {\n    const { conversationId, page = 1, limit = 50, before, after } = query;\n\n    if (!mongoose.Types.ObjectId.isValid(conversationId)) {\n      throw new Error('無效的對話ID');\n    }\n\n    // 構建查詢條件\n    const filter: any = { conversationId: new mongoose.Types.ObjectId(conversationId) };\n    if (before) filter.createdAt = { $lt: before };\n    if (after) filter.createdAt = { ...filter.createdAt, $gt: after };\n\n    // 計算分頁\n    const skip = (page - 1) * limit;\n\n    // 執行查詢\n    const [messages, total] = await Promise.all([\n      Message.find(filter)\n        .populate('senderId', 'username avatar email')\n        .populate('receiverId', 'username avatar email')\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      Message.countDocuments(filter)\n    ]);\n\n    const totalPages = Math.ceil(total / limit);\n    const hasMore = page < totalPages;\n\n    return {\n      messages: messages.reverse(), // 反轉順序，最新的在底部\n      total,\n      page,\n      totalPages,\n      hasMore\n    };\n  }\n\n  /**\n   * 獲取用戶對話列表\n   */\n  async getConversations(query: ConversationQuery): Promise<{\n    conversations: any[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const { userId, page = 1, limit = 20, search } = query;\n\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      throw new Error('無效的用戶ID');\n    }\n\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n\n    // 構建查詢條件\n    const filter: any = {\n      participants: userObjectId,\n      isActive: true\n    };\n\n    // 如果有搜索條件，需要先找到匹配的用戶\n    if (search) {\n      const searchUsers = await User.find({\n        $or: [\n          { username: { $regex: search, $options: 'i' } },\n          { email: { $regex: search, $options: 'i' } }\n        ]\n      }).select('_id');\n      \n      const searchUserIds = searchUsers.map(u => u._id);\n      filter.participants = { $in: [userObjectId, ...searchUserIds] };\n    }\n\n    // 計算分頁\n    const skip = (page - 1) * limit;\n\n    // 執行查詢\n    const [conversations, total] = await Promise.all([\n      Conversation.find(filter)\n        .populate('participants', 'username avatar email lastActiveAt')\n        .populate('lastMessage')\n        .populate('petId', 'name images')\n        .sort({ lastMessageAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      Conversation.countDocuments(filter)\n    ]);\n\n    // 為每個對話添加未讀訊息數量\n    const conversationsWithUnread = await Promise.all(\n      conversations.map(async (conv: any) => {\n        const unreadCount = await Message.countDocuments({\n          conversationId: conv._id,\n          receiverId: userObjectId,\n          isRead: false\n        });\n\n        // 獲取對話夥伴資訊\n        const partner = conv.participants.find((p: any) => \n          !p._id.equals(userObjectId)\n        );\n\n        return {\n          ...conv,\n          unreadCount,\n          partner\n        };\n      })\n    );\n\n    return {\n      conversations: conversationsWithUnread,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * 標記訊息為已讀\n   */\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<number> {\n    if (!mongoose.Types.ObjectId.isValid(conversationId)) {\n      throw new Error('無效的對話ID');\n    }\n\n    const result = await Message.updateMany(\n      {\n        conversationId: new mongoose.Types.ObjectId(conversationId),\n        receiverId: new mongoose.Types.ObjectId(userId),\n        isRead: false\n      },\n      {\n        isRead: true,\n        readAt: new Date()\n      }\n    );\n\n    return result.modifiedCount;\n  }\n\n  /**\n   * 刪除訊息\n   */\n  async deleteMessage(messageId: string, userId: string): Promise<boolean> {\n    if (!mongoose.Types.ObjectId.isValid(messageId)) {\n      throw new Error('無效的訊息ID');\n    }\n\n    const message = await Message.findById(messageId);\n    if (!message) {\n      throw new Error('訊息不存在');\n    }\n\n    // 檢查權限（只有發送者可以刪除）\n    if (message.senderId.toString() !== userId) {\n      throw new Error('無權限刪除此訊息');\n    }\n\n    // 軟刪除\n    await Message.findByIdAndUpdate(messageId, {\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: new mongoose.Types.ObjectId(userId)\n    });\n\n    return true;\n  }\n\n  /**\n   * 刪除對話\n   */\n  async deleteConversation(conversationId: string, userId: string): Promise<boolean> {\n    if (!mongoose.Types.ObjectId.isValid(conversationId)) {\n      throw new Error('無效的對話ID');\n    }\n\n    const conversation = await Conversation.findById(conversationId);\n    if (!conversation) {\n      throw new Error('對話不存在');\n    }\n\n    // 檢查權限\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n    if (!conversation.participants.some(p => p.equals(userObjectId))) {\n      throw new Error('您不是此對話的參與者');\n    }\n\n    // 將對話標記為非活躍\n    await Conversation.findByIdAndUpdate(conversationId, {\n      isActive: false\n    });\n\n    return true;\n  }\n\n  /**\n   * 獲取未讀訊息統計\n   */\n  async getUnreadStats(userId: string): Promise<{\n    totalUnread: number;\n    conversationsWithUnread: number;\n  }> {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      throw new Error('無效的用戶ID');\n    }\n\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n\n    const [totalUnread, conversationsWithUnread] = await Promise.all([\n      Message.countDocuments({\n        receiverId: userObjectId,\n        isRead: false\n      }),\n      Message.aggregate([\n        {\n          $match: {\n            receiverId: userObjectId,\n            isRead: false\n          }\n        },\n        {\n          $group: {\n            _id: '$conversationId'\n          }\n        },\n        {\n          $count: 'count'\n        }\n      ])\n    ]);\n\n    return {\n      totalUnread,\n      conversationsWithUnread: conversationsWithUnread[0]?.count || 0\n    };\n  }\n\n  /**\n   * 搜索訊息\n   */\n  async searchMessages(\n    userId: string, \n    keyword: string, \n    conversationId?: string\n  ): Promise<IMessage[]> {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      throw new Error('無效的用戶ID');\n    }\n\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n\n    // 構建查詢條件\n    const filter: any = {\n      $or: [\n        { senderId: userObjectId },\n        { receiverId: userObjectId }\n      ],\n      content: { $regex: keyword, $options: 'i' },\n      messageType: 'text'\n    };\n\n    if (conversationId) {\n      filter.conversationId = new mongoose.Types.ObjectId(conversationId);\n    }\n\n    const messages = await Message.find(filter)\n      .populate('senderId', 'username avatar')\n      .populate('receiverId', 'username avatar')\n      .populate('conversationId')\n      .sort({ createdAt: -1 })\n      .limit(50)\n      .lean();\n\n    return messages;\n  }\n\n  /**\n   * 發送訊息通知\n   */\n  private async sendMessageNotification(message: IMessage): Promise<void> {\n    try {\n      const sender = await User.findById(message.senderId).lean();\n      const receiver = await User.findById(message.receiverId).lean();\n      \n      if (!sender || !receiver) return;\n\n      // 發送推播通知\n      await NotificationService.sendNotification({\n        userId: message.receiverId.toString(),\n        type: NotificationType.MESSAGE,\n        title: `來自 ${(sender as any)?.username || '用戶'} 的訊息`,\n        message: message.messageType === 'text' \n          ? message.content.substring(0, 50) + (message.content.length > 50 ? '...' : '')\n          : '發送了一張圖片',\n        data: {\n          conversationId: message.conversationId.toString(),\n          messageId: message._id.toString(),\n          senderId: message.senderId.toString()\n        }\n      });\n\n      // 發送即時 Socket 通知（如果 SocketService 有 sendToUser 方法）\n      if (typeof (this.socketService as any).sendToUser === 'function') {\n        (this.socketService as any).sendToUser(message.receiverId.toString(), 'new_message', {\n          message: {\n            ...message.toObject(),\n            sender: { username: (sender as any)?.username || '用戶' }\n          }\n        });\n      }\n\n    } catch (error) {\n      console.error('發送訊息通知失敗:', error);\n    }\n  }\n}\n\nexport const messageService = new MessageService();"],"version":3}