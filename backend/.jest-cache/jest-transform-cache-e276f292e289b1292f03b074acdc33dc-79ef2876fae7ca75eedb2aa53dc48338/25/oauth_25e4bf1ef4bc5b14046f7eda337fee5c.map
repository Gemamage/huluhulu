{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\oauth.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\oauth.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport passport from '../config/passport';\nimport { logger } from '../utils/logger';\nimport { config } from '../config/environment';\nimport { IUser } from '../models/User';\n\nconst router = Router();\n\n// Google OAuth 登入路由\nrouter.get('/google',\n  passport.authenticate('google', {\n    scope: ['profile', 'email']\n  })\n);\n\n// Google OAuth 回調路由\nrouter.get('/google/callback',\n  passport.authenticate('google', { failureRedirect: `${config.clientUrl}/login?error=oauth_failed` }),\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const user = req.user as IUser;\n      \n      if (!user) {\n        logger.error('Google OAuth 回調中沒有用戶資料');\n        res.redirect(`${config.clientUrl}/login?error=oauth_failed`);\n        return;\n      }\n\n      // 生成 JWT 令牌\n      const token = user.generateAuthToken();\n      \n      logger.info('Google OAuth 登入成功', { \n        userId: user._id, \n        email: user.email,\n        googleId: user.googleId \n      });\n\n      // 重定向到前端，並在 URL 中包含令牌\n      // 注意：在生產環境中，建議使用更安全的方式傳遞令牌\n      res.redirect(`${config.clientUrl}/auth/callback?token=${token}&user=${encodeURIComponent(JSON.stringify({\n        id: user._id,\n        email: user.email,\n        name: user.name,\n        avatar: user.avatar,\n        role: user.role,\n        isEmailVerified: user.isEmailVerified\n      }))}`);      \n    } catch (error) {\n      logger.error('Google OAuth 回調處理失敗', { error });\n      res.redirect(`${config.clientUrl}/login?error=oauth_callback_failed`);\n    }\n  }\n);\n\n// 檢查 OAuth 連結狀態\nrouter.get('/status', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      res.status(401).json({\n        success: false,\n        message: '未提供認證令牌',\n      });\n      return;\n    }\n\n    // 這裡可以添加 JWT 驗證邏輯\n    // 暫時返回基本狀態\n    res.json({\n      success: true,\n      data: {\n        hasGoogleAccount: false, // 需要根據實際用戶資料判斷\n        providers: ['email'], // 可用的登入方式\n      },\n    });\n  } catch (error) {\n    logger.error('獲取 OAuth 狀態失敗', { error });\n    res.status(500).json({\n      success: false,\n      message: '獲取狀態失敗',\n    });\n  }\n});\n\n// 解除 Google 帳號連結\nrouter.delete('/google/unlink', async (req: Request, res: Response): Promise<void> => {\n  try {\n    // 這裡需要添加認證中介軟體\n    // 暫時返回成功響應\n    res.json({\n      success: true,\n      message: 'Google 帳號連結已解除',\n    });\n  } catch (error) {\n    logger.error('解除 Google 帳號連結失敗', { error });\n    res.status(500).json({\n      success: false,\n      message: '解除連結失敗',\n    });\n  }\n});\n\nexport { router as oauthRoutes };"],"version":3}