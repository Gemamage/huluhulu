3978bda51f1da7d4033076c01424a3c1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mongoose = exports.checkDatabaseHealth = exports.isDatabaseConnected = exports.clearDatabase = exports.disconnectDatabase = exports.connectDatabase = void 0;
const mongoose_1 = __importDefault(require("mongoose"));
exports.mongoose = mongoose_1.default;
const mongodb_memory_server_1 = require("mongodb-memory-server");
const environment_1 = require("./environment");
const logger_1 = require("../utils/logger");
let mongoServer = null;
/**
 * 連接到 MongoDB 資料庫（開發環境使用內存資料庫）
 */
const connectDatabase = async () => {
    try {
        // 設置 Mongoose 選項
        mongoose_1.default.set("strictQuery", true);
        let uri;
        // 如果是開發環境且沒有配置 MongoDB URI，使用內存資料庫
        if (environment_1.config.env === "development" &&
            environment_1.config.database.uri.includes("localhost:27017")) {
            logger_1.logger.info("啟動 MongoDB Memory Server...");
            mongoServer = await mongodb_memory_server_1.MongoMemoryServer.create({
                instance: {
                    port: 27017,
                    dbName: "pet-finder-dev",
                },
            });
            uri = mongoServer.getUri();
            logger_1.logger.info("MongoDB Memory Server 已啟動");
        }
        else {
            uri = environment_1.config.database.uri;
        }
        // 連接資料庫
        await mongoose_1.default.connect(uri, {
            ...environment_1.config.database.options,
            dbName: getDatabaseName(),
        });
        logger_1.logger.info(`MongoDB 連接成功: ${getDatabaseName()}`);
        // 監聽連接事件
        mongoose_1.default.connection.on("error", (error) => {
            logger_1.logger.error("MongoDB 連接錯誤:", error);
        });
        mongoose_1.default.connection.on("disconnected", () => {
            logger_1.logger.warn("MongoDB 連接中斷");
        });
        mongoose_1.default.connection.on("reconnected", () => {
            logger_1.logger.info("MongoDB 重新連接成功");
        });
    }
    catch (error) {
        logger_1.logger.error("MongoDB 連接失敗:", error);
        throw error;
    }
};
exports.connectDatabase = connectDatabase;
/**
 * 斷開資料庫連接
 */
const disconnectDatabase = async () => {
    try {
        await mongoose_1.default.disconnect();
        if (mongoServer) {
            await mongoServer.stop();
            mongoServer = null;
            logger_1.logger.info("MongoDB Memory Server 已停止");
        }
        logger_1.logger.info("MongoDB 連接已關閉");
    }
    catch (error) {
        logger_1.logger.error("關閉 MongoDB 連接時發生錯誤:", error);
        throw error;
    }
};
exports.disconnectDatabase = disconnectDatabase;
/**
 * 清空資料庫（僅用於測試環境）
 */
const clearDatabase = async () => {
    if (environment_1.config.env !== "test") {
        throw new Error("清空資料庫操作僅允許在測試環境中執行");
    }
    try {
        if (!mongoose_1.default.connection.db) {
            throw new Error("資料庫連接未建立");
        }
        const collections = await mongoose_1.default.connection.db.collections();
        await Promise.all(collections.map((collection) => collection.deleteMany({})));
        logger_1.logger.info("測試資料庫已清空");
    }
    catch (error) {
        logger_1.logger.error("清空資料庫時發生錯誤:", error);
        throw error;
    }
};
exports.clearDatabase = clearDatabase;
/**
 * 檢查資料庫連接狀態
 */
const isDatabaseConnected = () => {
    return mongoose_1.default.connection.readyState === 1;
};
exports.isDatabaseConnected = isDatabaseConnected;
/**
 * 獲取資料庫名稱
 */
function getDatabaseName() {
    const baseDbName = "pet-finder";
    switch (environment_1.config.env) {
        case "test":
            return `${baseDbName}-test`;
        case "development":
            return `${baseDbName}-dev`;
        case "production":
            return baseDbName;
        default:
            return `${baseDbName}-dev`;
    }
}
/**
 * 資料庫健康檢查
 */
const checkDatabaseHealth = async () => {
    try {
        const isConnected = (0, exports.isDatabaseConnected)();
        return {
            status: isConnected ? "healthy" : "unhealthy",
            details: {
                connected: isConnected,
                readyState: mongoose_1.default.connection.readyState,
                host: mongoose_1.default.connection.host,
                name: mongoose_1.default.connection.name,
                usingMemoryServer: mongoServer !== null,
            },
        };
    }
    catch (error) {
        logger_1.logger.error("資料庫健康檢查失敗:", error);
        return {
            status: "unhealthy",
            details: {
                connected: false,
                readyState: mongoose_1.default.connection.readyState,
                usingMemoryServer: mongoServer !== null,
            },
        };
    }
};
exports.checkDatabaseHealth = checkDatabaseHealth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,