{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\index.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\index.ts"],"sourcesContent":["import { BasicUserService, RegisterUserData, LoginUserData, UpdateUserData } from './basic';\nimport { PasswordService } from './password';\nimport { VerificationService } from './verification';\nimport { AdminUserService, AdminUpdateUserData, UserQueryOptions } from './admin';\nimport { UserQueryService, UserListResult } from './query';\nimport { IUser } from '../../models/User';\nimport { logger } from '../../utils/logger';\n\n/**\n * 統一的用戶服務 - 整合所有用戶相關功能\n */\nexport class UserService {\n  private basicService: BasicUserService;\n  private passwordService: PasswordService;\n  private verificationService: VerificationService;\n  private adminService: AdminUserService;\n  private queryService: UserQueryService;\n\n  constructor() {\n    this.basicService = new BasicUserService();\n    this.passwordService = new PasswordService();\n    this.verificationService = new VerificationService();\n    this.adminService = new AdminUserService();\n    this.queryService = new UserQueryService();\n  }\n\n  // ===== 基本用戶操作 =====\n\n  /**\n   * 用戶註冊\n   */\n  async register(userData: RegisterUserData): Promise<{\n    user: IUser;\n    token: string;\n  }> {\n    const result = await this.basicService.register(userData);\n    \n    // 自動發送郵件驗證\n    try {\n      await this.verificationService.sendEmailVerification(result.user._id.toString());\n    } catch (error) {\n      logger.warn('註冊後發送驗證郵件失敗', { error, userId: result.user._id });\n    }\n    \n    return result;\n  }\n\n  /**\n   * 用戶登入\n   */\n  async login(loginData: LoginUserData): Promise<{\n    user: IUser;\n    token: string;\n  }> {\n    return this.basicService.login(loginData);\n  }\n\n  /**\n   * 根據 ID 獲取用戶\n   */\n  async getUserById(userId: string): Promise<IUser> {\n    return this.basicService.getUserById(userId);\n  }\n\n  /**\n   * 根據郵箱獲取用戶\n   */\n  async getUserByEmail(email: string): Promise<IUser | null> {\n    return this.basicService.getUserByEmail(email);\n  }\n\n  /**\n   * 更新用戶資料\n   */\n  async updateUser(userId: string, updateData: UpdateUserData): Promise<IUser> {\n    return this.basicService.updateUser(userId, updateData);\n  }\n\n  /**\n   * 停用用戶帳號\n   */\n  async deactivateUser(userId: string): Promise<void> {\n    return this.basicService.deactivateUser(userId);\n  }\n\n  // ===== 密碼管理 =====\n\n  /**\n   * 變更密碼\n   */\n  async changePassword(\n    userId: string,\n    currentPassword: string,\n    newPassword: string\n  ): Promise<void> {\n    return this.passwordService.changePassword(userId, currentPassword, newPassword);\n  }\n\n  /**\n   * 請求密碼重設\n   */\n  async requestPasswordReset(email: string): Promise<void> {\n    return this.passwordService.requestPasswordReset(email);\n  }\n\n  /**\n   * 重設密碼\n   */\n  async resetPassword(token: string, newPassword: string): Promise<void> {\n    return this.passwordService.resetPassword(token, newPassword);\n  }\n\n  /**\n   * 驗證密碼重設令牌\n   */\n  async validateResetToken(token: string): Promise<boolean> {\n    return this.passwordService.validateResetToken(token);\n  }\n\n  // ===== 郵件驗證 =====\n\n  /**\n   * 發送郵件驗證\n   */\n  async sendEmailVerification(userId: string): Promise<void> {\n    return this.verificationService.sendEmailVerification(userId);\n  }\n\n  /**\n   * 驗證郵箱（通過用戶ID）\n   */\n  async verifyEmailByUserId(userId: string): Promise<void> {\n    return this.verificationService.verifyEmailByUserId(userId);\n  }\n\n  /**\n   * 驗證郵箱（通過令牌）\n   */\n  async verifyEmailByToken(token: string): Promise<void> {\n    return this.verificationService.verifyEmailByToken(token);\n  }\n\n  /**\n   * 重新發送驗證郵件\n   */\n  async resendEmailVerification(email: string): Promise<void> {\n    return this.verificationService.resendEmailVerification(email);\n  }\n\n  /**\n   * 驗證郵件驗證令牌\n   */\n  async validateVerificationToken(token: string): Promise<boolean> {\n    return this.verificationService.validateVerificationToken(token);\n  }\n\n  /**\n   * 獲取用戶驗證狀態\n   */\n  async getVerificationStatus(userId: string): Promise<{\n    isEmailVerified: boolean;\n    hasVerificationToken: boolean;\n    tokenExpires?: Date;\n  }> {\n    return this.verificationService.getVerificationStatus(userId);\n  }\n\n  // ===== 用戶查詢和統計 =====\n\n  /**\n   * 獲取用戶列表（帶篩選和分頁）\n   */\n  async getUserList(options: UserQueryOptions = {}): Promise<UserListResult> {\n    return this.queryService.getUserList(options);\n  }\n\n  /**\n   * 搜索用戶\n   */\n  async searchUsers(\n    searchTerm: string,\n    options: {\n      limit?: number;\n      includeInactive?: boolean;\n      role?: 'user' | 'admin';\n    } = {}\n  ): Promise<IUser[]> {\n    return this.queryService.searchUsers(searchTerm, options);\n  }\n\n  /**\n   * 根據角色獲取用戶列表\n   */\n  async getUsersByRole(\n    role: 'user' | 'admin',\n    options: {\n      page?: number;\n      limit?: number;\n      isActive?: boolean;\n    } = {}\n  ): Promise<UserListResult> {\n    return this.queryService.getUsersByRole(role, options);\n  }\n\n  /**\n   * 獲取最近註冊的用戶\n   */\n  async getRecentUsers(limit: number = 10): Promise<IUser[]> {\n    return this.queryService.getRecentUsers(limit);\n  }\n\n  /**\n   * 獲取活躍用戶列表\n   */\n  async getActiveUsers(options: {\n    page?: number;\n    limit?: number;\n    sortBy?: 'lastLogin' | 'createdAt';\n  } = {}): Promise<UserListResult> {\n    return this.queryService.getActiveUsers(options);\n  }\n\n  /**\n   * 獲取用戶統計信息\n   */\n  async getUserStatistics(): Promise<{\n    total: number;\n    active: number;\n    verified: number;\n    admins: number;\n    recent: number;\n    byRole: { [key: string]: number };\n    byStatus: {\n      active: number;\n      inactive: number;\n      verified: number;\n      unverified: number;\n    };\n  }> {\n    return this.queryService.getUserStatistics();\n  }\n\n  /**\n   * 檢查用戶是否存在\n   */\n  async userExists(identifier: string, type: 'id' | 'email' = 'id'): Promise<boolean> {\n    return this.queryService.userExists(identifier, type);\n  }\n\n  // ===== 管理員功能 =====\n\n  /**\n   * 管理員獲取用戶列表（帶篩選和分頁）\n   */\n  async getAdminUserList(options: UserQueryOptions = {}): Promise<{\n    users: IUser[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return this.adminService.getAdminUserList(options);\n  }\n\n  /**\n   * 管理員獲取單個用戶詳情\n   */\n  async getAdminUserById(userId: string): Promise<IUser> {\n    return this.adminService.getAdminUserById(userId);\n  }\n\n  /**\n   * 管理員更新用戶資料\n   */\n  async adminUpdateUser(\n    userId: string,\n    updateData: AdminUpdateUserData,\n    adminUser: IUser\n  ): Promise<IUser> {\n    return this.adminService.adminUpdateUser(userId, updateData, adminUser);\n  }\n\n  /**\n   * 管理員刪除用戶（軟刪除）\n   */\n  async adminDeleteUser(userId: string, adminUser: IUser): Promise<void> {\n    return this.adminService.adminDeleteUser(userId, adminUser);\n  }\n\n  /**\n   * 管理員重設用戶密碼\n   */\n  async adminResetUserPassword(userId: string, adminUser: IUser): Promise<string> {\n    return this.adminService.adminResetUserPassword(userId, adminUser);\n  }\n\n  /**\n   * 管理員批量操作用戶\n   */\n  async adminBatchUpdateUsers(\n    userIds: string[],\n    updateData: Partial<AdminUpdateUserData>,\n    adminUser: IUser\n  ): Promise<{ successCount: number; failedCount: number; errors: string[] }> {\n    return this.adminService.adminBatchUpdateUsers(userIds, updateData, adminUser);\n  }\n\n  /**\n   * 獲取系統統計\n   */\n  async getSystemStatistics(): Promise<{\n    users: {\n      total: number;\n      active: number;\n      verified: number;\n      admins: number;\n      recent: number;\n    };\n  }> {\n    return this.adminService.getSystemStatistics();\n  }\n\n  /**\n   * 管理員搜索用戶\n   */\n  async adminSearchUsers(\n    searchTerm: string,\n    options: {\n      limit?: number;\n      includeInactive?: boolean;\n    } = {}\n  ): Promise<IUser[]> {\n    return this.adminService.adminSearchUsers(searchTerm, options);\n  }\n\n  // ===== 維護功能 =====\n\n  /**\n   * 清理過期令牌\n   */\n  async cleanupExpiredTokens(): Promise<{ deletedCount: number }> {\n    const [passwordTokens, verificationTokens, queryTokens] = await Promise.all([\n      this.passwordService.cleanupExpiredResetTokens(),\n      this.verificationService.cleanupExpiredVerificationTokens(),\n      this.queryService.cleanupExpiredTokens(),\n    ]);\n\n    const totalDeleted = passwordTokens.deletedCount + verificationTokens.deletedCount + queryTokens.deletedCount;\n    \n    logger.info('清理過期令牌完成', {\n      passwordTokens: passwordTokens.deletedCount,\n      verificationTokens: verificationTokens.deletedCount,\n      queryTokens: queryTokens.deletedCount,\n      total: totalDeleted,\n    });\n\n    return { deletedCount: totalDeleted };\n  }\n}\n\n// 導出類型\nexport {\n  RegisterUserData,\n  LoginUserData,\n  UpdateUserData,\n  AdminUpdateUserData,\n  UserQueryOptions,\n  UserListResult,\n};\n\n// 導出默認實例\nexport const userService = new UserService();"],"version":3}