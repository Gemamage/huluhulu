{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\middleware\\error-handler.ts","mappings":";;;AACA,4CAAyC;AACzC,uDAA+C;AAC/C,4CAIyB;AAEzB,WAAW;AACJ,MAAM,YAAY,GAAG,CAC1B,KAAY,EACZ,GAAY,EACZ,GAAa,EACb,IAAkB,EACZ,EAAE;IACR,IAAI,UAAU,GAAG,GAAG,CAAC;IACrB,IAAI,OAAO,GAAG,SAAS,CAAC;IACxB,IAAI,OAAO,GAAQ,SAAS,CAAC;IAE7B,OAAO;IACP,eAAM,CAAC,KAAK,CAAC,eAAe,EAAE;QAC5B,KAAK,EAAE,KAAK,CAAC,OAAO;QACpB,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,GAAG,EAAE,GAAG,CAAC,GAAG;QACZ,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;KACjC,CAAC,CAAC;IAEH,cAAc;IACd,IAAI,KAAK,YAAY,iBAAQ,EAAE,CAAC;QAC9B,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QAC9B,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;IAC1B,CAAC;IACD,mBAAmB;SACd,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;QAC1C,UAAU,GAAG,GAAG,CAAC;QACjB,OAAO,GAAG,QAAQ,CAAC;QACnB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAE,KAAa,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;YAChE,KAAK,EAAE,GAAG,CAAC,IAAI;YACf,OAAO,EAAE,GAAG,CAAC,OAAO;SACrB,CAAC,CAAC,CAAC;IACN,CAAC;IACD,oBAAoB;SACf,IAAI,KAAK,CAAC,IAAI,KAAK,kBAAkB,IAAK,KAAa,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;QAC5E,UAAU,GAAG,GAAG,CAAC;QACjB,OAAO,GAAG,OAAO,CAAC;QAClB,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAE,KAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,OAAO,EAAE,CAAC;IAChD,CAAC;IACD,wBAAwB;SACnB,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;QACpC,UAAU,GAAG,GAAG,CAAC;QACjB,OAAO,GAAG,SAAS,CAAC;QACpB,OAAO,GAAG,EAAE,KAAK,EAAG,KAAa,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;IACjE,CAAC;IACD,YAAY;SACP,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;QAC5C,UAAU,GAAG,GAAG,CAAC;QACjB,OAAO,GAAG,SAAS,CAAC;IACtB,CAAC;SACI,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;QAC5C,UAAU,GAAG,GAAG,CAAC;QACjB,OAAO,GAAG,SAAS,CAAC;IACtB,CAAC;IACD,cAAc;SACT,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,IAAK,KAAa,CAAC,KAAK,EAAE,CAAC;QAClE,UAAU,GAAG,GAAG,CAAC;QACjB,OAAO,GAAG,UAAU,CAAC;QACrB,OAAO,GAAI,KAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;YACrD,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YAC5B,OAAO,EAAE,MAAM,CAAC,OAAO;SACxB,CAAC,CAAC,CAAC;IACN,CAAC;IAED,SAAS;IACT,MAAM,aAAa,GAAQ;QACzB,OAAO,EAAE,KAAK;QACd,KAAK,EAAE;YACL,OAAO;YACP,UAAU;YACV,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,MAAM,EAAE,GAAG,CAAC,MAAM;SACnB;KACF,CAAC;IAEF,iBAAiB;IACjB,IAAI,oBAAM,CAAC,GAAG,KAAK,aAAa,EAAE,CAAC;QACjC,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACxC,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IACxC,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC;QACnB,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IACxC,CAAC;IAED,SAAS;IACT,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC7C,CAAC,CAAC;AAxFW,QAAA,YAAY,gBAwFvB;AAEF,aAAa;AACN,MAAM,YAAY,GAAG,CAC1B,EAAqE,EACrE,EAAE;IACF,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;QAC/D,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,YAAY,gBAMvB;AAEF,WAAW;AACJ,MAAM,eAAe,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;IACvF,MAAM,KAAK,GAAG,IAAI,sBAAa,CAAC,MAAM,GAAG,CAAC,WAAW,MAAM,CAAC,CAAC;IAC7D,IAAI,CAAC,KAAK,CAAC,CAAC;AACd,CAAC,CAAC;AAHW,QAAA,eAAe,mBAG1B;AAEF,kBAAe,oBAAY,CAAC","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\middleware\\error-handler.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { logger } from '../utils/logger';\nimport { config } from '../config/environment';\nimport {\n  AppError,\n  NotFoundError,\n  ServiceUnavailableError,\n} from '../utils/errors';\n\n// 錯誤處理中介軟體\nexport const errorHandler = (\n  error: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void => {\n  let statusCode = 500;\n  let message = '伺服器內部錯誤';\n  let details: any = undefined;\n\n  // 記錄錯誤\n  logger.error('錯誤處理中介軟體捕獲錯誤:', {\n    error: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n  });\n\n  // 處理自定義應用程式錯誤\n  if (error instanceof AppError) {\n    statusCode = error.statusCode;\n    message = error.message;\n  }\n  // 處理 Mongoose 驗證錯誤\n  else if (error.name === 'ValidationError') {\n    statusCode = 400;\n    message = '資料驗證失敗';\n    details = Object.values((error as any).errors).map((err: any) => ({\n      field: err.path,\n      message: err.message,\n    }));\n  }\n  // 處理 Mongoose 重複鍵錯誤\n  else if (error.name === 'MongoServerError' && (error as any).code === 11000) {\n    statusCode = 409;\n    message = '資料已存在';\n    const field = Object.keys((error as any).keyValue)[0];\n    details = { field, message: `${field} 已被使用` };\n  }\n  // 處理 Mongoose CastError\n  else if (error.name === 'CastError') {\n    statusCode = 400;\n    message = '無效的資料格式';\n    details = { field: (error as any).path, message: '無效的 ID 格式' };\n  }\n  // 處理 JWT 錯誤\n  else if (error.name === 'JsonWebTokenError') {\n    statusCode = 401;\n    message = '無效的認證令牌';\n  }\n  else if (error.name === 'TokenExpiredError') {\n    statusCode = 401;\n    message = '認證令牌已過期';\n  }\n  // 處理 Joi 驗證錯誤\n  else if (error.name === 'ValidationError' && (error as any).isJoi) {\n    statusCode = 400;\n    message = '請求資料驗證失敗';\n    details = (error as any).details.map((detail: any) => ({\n      field: detail.path.join('.'),\n      message: detail.message,\n    }));\n  }\n\n  // 建構錯誤回應\n  const errorResponse: any = {\n    success: false,\n    error: {\n      message,\n      statusCode,\n      timestamp: new Date().toISOString(),\n      path: req.path,\n      method: req.method,\n    },\n  };\n\n  // 在開發環境中包含更多錯誤詳情\n  if (config.env === 'development') {\n    errorResponse.error.stack = error.stack;\n    errorResponse.error.details = details;\n  } else if (details) {\n    errorResponse.error.details = details;\n  }\n\n  // 發送錯誤回應\n  res.status(statusCode).json(errorResponse);\n};\n\n// 非同步錯誤處理包裝器\nexport const asyncHandler = (\n  fn: (req: Request, res: Response, next: NextFunction) => Promise<any>\n) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\n// 404 錯誤處理\nexport const notFoundHandler = (req: Request, res: Response, next: NextFunction): void => {\n  const error = new NotFoundError(`路由 ${req.originalUrl} 不存在`);\n  next(error);\n};\n\nexport default errorHandler;"],"version":3}