aee1f7900424d05cb527238f249030d2
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PetService = void 0;
// 後端寵物服務 - 提供基本的寵物 CRUD 操作
const Pet_1 = require("../models/Pet");
const User_1 = require("../models/User");
const cloudinaryService_1 = require("./cloudinaryService");
const aiService_1 = require("./aiService");
const logger_1 = require("../utils/logger");
const mongoose_1 = __importDefault(require("mongoose"));
class PetService {
    /**
     * 創建新寵物
     */
    static async createPet(ownerId, petData) {
        try {
            // 驗證擁有者是否存在
            const owner = await User_1.User.findById(ownerId);
            if (!owner) {
                throw new Error('擁有者不存在');
            }
            // 處理圖片上傳
            const processedImages = [];
            if (petData.images && petData.images.length > 0) {
                for (const imageUrl of petData.images) {
                    try {
                        const uploadResult = await cloudinaryService_1.CloudinaryService.uploadImage(imageUrl, {
                            folder: 'pets',
                            transformation: [
                                { width: 800, height: 600, crop: 'limit' },
                                { quality: 'auto' }
                            ]
                        });
                        processedImages.push({
                            url: uploadResult.secure_url,
                            publicId: uploadResult.public_id,
                            width: uploadResult.width,
                            height: uploadResult.height
                        });
                    }
                    catch (error) {
                        logger_1.logger.error('圖片上傳失敗:', error);
                    }
                }
            }
            // 創建寵物文檔
            const pet = new Pet_1.Pet({
                ...petData,
                owner: ownerId,
                images: processedImages,
                createdAt: new Date(),
                updatedAt: new Date()
            });
            // AI 圖片分析（如果有圖片）
            if (processedImages.length > 0) {
                try {
                    const aiAnalysis = await aiService_1.aiService.analyzeImage(processedImages[0].url);
                    pet.aiData = {
                        breed: aiAnalysis.breed,
                        confidence: aiAnalysis.confidence,
                        features: aiAnalysis.features
                    };
                }
                catch (error) {
                    logger_1.logger.warn('AI 圖片分析失敗:', error);
                    // 不影響寵物創建流程
                }
            }
            const savedPet = await pet.save();
            await savedPet.populate('owner', 'username email');
            logger_1.logger.info(`寵物創建成功: ${savedPet._id}`);
            return savedPet;
        }
        catch (error) {
            logger_1.logger.error('創建寵物失敗:', error);
            throw error;
        }
    }
    /**
     * 根據 ID 獲取寵物
     */
    static async getPetById(petId) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(petId)) {
                throw new Error('無效的寵物 ID');
            }
            const pet = await Pet_1.Pet.findById(petId)
                .populate('owner', 'username email avatar')
                .exec();
            return pet;
        }
        catch (error) {
            logger_1.logger.error('獲取寵物失敗:', error);
            throw error;
        }
    }
    /**
     * 更新寵物資訊
     */
    static async updatePet(petId, ownerId, updateData) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(petId)) {
                throw new Error('無效的寵物 ID');
            }
            // 檢查寵物是否存在且屬於該用戶
            const pet = await Pet_1.Pet.findOne({ _id: petId, owner: ownerId });
            if (!pet) {
                throw new Error('寵物不存在或您沒有權限修改');
            }
            // 更新寵物資訊
            const updatedPet = await Pet_1.Pet.findByIdAndUpdate(petId, {
                ...updateData,
                updatedAt: new Date()
            }, { new: true, runValidators: true }).populate('owner', 'username email avatar');
            logger_1.logger.info(`寵物更新成功: ${petId}`);
            return updatedPet;
        }
        catch (error) {
            logger_1.logger.error('更新寵物失敗:', error);
            throw error;
        }
    }
    /**
     * 刪除寵物
     */
    static async deletePet(petId, ownerId) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(petId)) {
                throw new Error('無效的寵物 ID');
            }
            // 檢查寵物是否存在且屬於該用戶
            const pet = await Pet_1.Pet.findOne({ _id: petId, owner: ownerId });
            if (!pet) {
                throw new Error('寵物不存在或您沒有權限刪除');
            }
            // 刪除 Cloudinary 上的圖片
            if (pet.images && pet.images.length > 0) {
                for (const image of pet.images) {
                    try {
                        if (image.publicId) {
                            await cloudinaryService_1.CloudinaryService.deleteImage(image.publicId);
                        }
                    }
                    catch (error) {
                        logger_1.logger.warn('刪除圖片失敗:', error);
                    }
                }
            }
            // 刪除寵物文檔
            await Pet_1.Pet.findByIdAndDelete(petId);
            logger_1.logger.info(`寵物刪除成功: ${petId}`);
            return true;
        }
        catch (error) {
            logger_1.logger.error('刪除寵物失敗:', error);
            throw error;
        }
    }
    /**
     * 獲取用戶的所有寵物
     */
    static async getPetsByOwner(ownerId) {
        try {
            const pets = await Pet_1.Pet.find({ owner: ownerId })
                .populate('owner', 'username email avatar')
                .sort({ createdAt: -1 })
                .exec();
            return pets;
        }
        catch (error) {
            logger_1.logger.error('獲取用戶寵物失敗:', error);
            throw error;
        }
    }
    /**
     * 獲取所有寵物（分頁）
     */
    static async getAllPets(page = 1, limit = 10, filters) {
        try {
            const query = {};
            if (filters?.type) {
                query.type = filters.type;
            }
            if (filters?.status) {
                query.status = filters.status;
            }
            if (filters?.location) {
                query['location.city'] = new RegExp(filters.location, 'i');
            }
            const skip = (page - 1) * limit;
            const [pets, total] = await Promise.all([
                Pet_1.Pet.find(query)
                    .populate('owner', 'username email avatar')
                    .sort({ createdAt: -1 })
                    .skip(skip)
                    .limit(limit)
                    .exec(),
                Pet_1.Pet.countDocuments(query)
            ]);
            const totalPages = Math.ceil(total / limit);
            return {
                pets,
                total,
                page,
                totalPages
            };
        }
        catch (error) {
            logger_1.logger.error('獲取所有寵物失敗:', error);
            throw error;
        }
    }
    /**
     * 增加寵物瀏覽次數
     */
    static async incrementViewCount(petId) {
        try {
            await Pet_1.Pet.findByIdAndUpdate(petId, { $inc: { viewCount: 1 } }, { new: true });
        }
        catch (error) {
            logger_1.logger.error('增加瀏覽次數失敗:', error);
        }
    }
    /**
     * 增加寵物分享次數
     */
    static async incrementShareCount(petId) {
        try {
            await Pet_1.Pet.findByIdAndUpdate(petId, { $inc: { shareCount: 1 } }, { new: true });
        }
        catch (error) {
            logger_1.logger.error('增加分享次數失敗:', error);
        }
    }
}
exports.PetService = PetService;
console.log('✅ PetService 已載入');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,