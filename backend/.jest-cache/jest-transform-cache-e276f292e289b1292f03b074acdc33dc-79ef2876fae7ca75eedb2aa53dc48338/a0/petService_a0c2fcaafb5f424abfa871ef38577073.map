{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\petService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\petService.ts"],"sourcesContent":["// 後端寵物服務 - 提供基本的寵物 CRUD 操作\nimport { Pet, IPet } from '../models/Pet';\nimport { User, IUser } from '../models/User';\nimport { CloudinaryService } from './cloudinaryService';\nimport { aiService } from './aiService';\nimport { logger } from '../utils/logger';\nimport mongoose from 'mongoose';\n\n// 創建寵物的資料介面\nexport interface CreatePetData {\n  name: string;\n  type: 'dog' | 'cat' | 'bird' | 'other';\n  breed?: string;\n  age?: number;\n  gender?: 'male' | 'female';\n  size?: 'small' | 'medium' | 'large';\n  color?: string;\n  description?: string;\n  status: 'lost' | 'found' | 'adopted';\n  location?: {\n    address: string;\n    city: string;\n    coordinates: [number, number];\n  };\n  contact?: {\n    phone?: string;\n    email?: string;\n  };\n  images?: string[];\n}\n\n// 更新寵物的資料介面\nexport interface UpdatePetData {\n  name?: string;\n  breed?: string;\n  age?: number;\n  gender?: 'male' | 'female';\n  size?: 'small' | 'medium' | 'large';\n  color?: string;\n  description?: string;\n  status?: 'lost' | 'found' | 'adopted';\n  location?: {\n    address: string;\n    city: string;\n    coordinates: [number, number];\n  };\n  contact?: {\n    phone?: string;\n    email?: string;\n  };\n}\n\nexport class PetService {\n  /**\n   * 創建新寵物\n   */\n  static async createPet(ownerId: string, petData: CreatePetData): Promise<IPet> {\n    try {\n      // 驗證擁有者是否存在\n      const owner = await User.findById(ownerId);\n      if (!owner) {\n        throw new Error('擁有者不存在');\n      }\n\n      // 處理圖片上傳\n      const processedImages = [];\n      if (petData.images && petData.images.length > 0) {\n        for (const imageUrl of petData.images) {\n          try {\n            const uploadResult = await CloudinaryService.uploadImage(imageUrl, {\n              folder: 'pets',\n              transformation: [\n                { width: 800, height: 600, crop: 'limit' },\n                { quality: 'auto' }\n              ]\n            });\n            processedImages.push({\n              url: uploadResult.secure_url,\n              publicId: uploadResult.public_id,\n              width: uploadResult.width,\n              height: uploadResult.height\n            });\n          } catch (error) {\n            logger.error('圖片上傳失敗:', error);\n          }\n        }\n      }\n\n      // 創建寵物文檔\n      const pet = new Pet({\n        ...petData,\n        owner: ownerId,\n        images: processedImages,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n\n      // AI 圖片分析（如果有圖片）\n      if (processedImages.length > 0) {\n        try {\n          const aiAnalysis = await aiService.analyzeImage(processedImages[0].url);\n          pet.aiData = {\n            breed: aiAnalysis.breed,\n            confidence: aiAnalysis.confidence,\n            features: aiAnalysis.features\n          };\n        } catch (error) {\n          logger.warn('AI 圖片分析失敗:', error);\n          // 不影響寵物創建流程\n        }\n      }\n\n      const savedPet = await pet.save();\n      await savedPet.populate('owner', 'username email');\n      \n      logger.info(`寵物創建成功: ${savedPet._id}`);\n      return savedPet;\n    } catch (error) {\n      logger.error('創建寵物失敗:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 根據 ID 獲取寵物\n   */\n  static async getPetById(petId: string): Promise<IPet | null> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(petId)) {\n        throw new Error('無效的寵物 ID');\n      }\n\n      const pet = await Pet.findById(petId)\n        .populate('owner', 'username email avatar')\n        .exec();\n      \n      return pet;\n    } catch (error) {\n      logger.error('獲取寵物失敗:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 更新寵物資訊\n   */\n  static async updatePet(\n    petId: string, \n    ownerId: string, \n    updateData: UpdatePetData\n  ): Promise<IPet | null> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(petId)) {\n        throw new Error('無效的寵物 ID');\n      }\n\n      // 檢查寵物是否存在且屬於該用戶\n      const pet = await Pet.findOne({ _id: petId, owner: ownerId });\n      if (!pet) {\n        throw new Error('寵物不存在或您沒有權限修改');\n      }\n\n      // 更新寵物資訊\n      const updatedPet = await Pet.findByIdAndUpdate(\n        petId,\n        { \n          ...updateData, \n          updatedAt: new Date() \n        },\n        { new: true, runValidators: true }\n      ).populate('owner', 'username email avatar');\n\n      logger.info(`寵物更新成功: ${petId}`);\n      return updatedPet;\n    } catch (error) {\n      logger.error('更新寵物失敗:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 刪除寵物\n   */\n  static async deletePet(petId: string, ownerId: string): Promise<boolean> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(petId)) {\n        throw new Error('無效的寵物 ID');\n      }\n\n      // 檢查寵物是否存在且屬於該用戶\n      const pet = await Pet.findOne({ _id: petId, owner: ownerId });\n      if (!pet) {\n        throw new Error('寵物不存在或您沒有權限刪除');\n      }\n\n      // 刪除 Cloudinary 上的圖片\n      if (pet.images && pet.images.length > 0) {\n        for (const image of pet.images) {\n          try {\n            if (image.publicId) {\n              await CloudinaryService.deleteImage(image.publicId);\n            }\n          } catch (error) {\n            logger.warn('刪除圖片失敗:', error);\n          }\n        }\n      }\n\n      // 刪除寵物文檔\n      await Pet.findByIdAndDelete(petId);\n      \n      logger.info(`寵物刪除成功: ${petId}`);\n      return true;\n    } catch (error) {\n      logger.error('刪除寵物失敗:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取用戶的所有寵物\n   */\n  static async getPetsByOwner(ownerId: string): Promise<IPet[]> {\n    try {\n      const pets = await Pet.find({ owner: ownerId })\n        .populate('owner', 'username email avatar')\n        .sort({ createdAt: -1 })\n        .exec();\n      \n      return pets;\n    } catch (error) {\n      logger.error('獲取用戶寵物失敗:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取所有寵物（分頁）\n   */\n  static async getAllPets(\n    page: number = 1, \n    limit: number = 10,\n    filters?: {\n      type?: string;\n      status?: string;\n      location?: string;\n    }\n  ): Promise<{ pets: IPet[]; total: number; page: number; totalPages: number }> {\n    try {\n      const query: any = {};\n      \n      if (filters?.type) {\n        query.type = filters.type;\n      }\n      if (filters?.status) {\n        query.status = filters.status;\n      }\n      if (filters?.location) {\n        query['location.city'] = new RegExp(filters.location, 'i');\n      }\n\n      const skip = (page - 1) * limit;\n      \n      const [pets, total] = await Promise.all([\n        Pet.find(query)\n          .populate('owner', 'username email avatar')\n          .sort({ createdAt: -1 })\n          .skip(skip)\n          .limit(limit)\n          .exec(),\n        Pet.countDocuments(query)\n      ]);\n\n      const totalPages = Math.ceil(total / limit);\n\n      return {\n        pets,\n        total,\n        page,\n        totalPages\n      };\n    } catch (error) {\n      logger.error('獲取所有寵物失敗:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 增加寵物瀏覽次數\n   */\n  static async incrementViewCount(petId: string): Promise<void> {\n    try {\n      await Pet.findByIdAndUpdate(\n        petId,\n        { $inc: { viewCount: 1 } },\n        { new: true }\n      );\n    } catch (error) {\n      logger.error('增加瀏覽次數失敗:', error);\n    }\n  }\n\n  /**\n   * 增加寵物分享次數\n   */\n  static async incrementShareCount(petId: string): Promise<void> {\n    try {\n      await Pet.findByIdAndUpdate(\n        petId,\n        { $inc: { shareCount: 1 } },\n        { new: true }\n      );\n    } catch (error) {\n      logger.error('增加分享次數失敗:', error);\n    }\n  }\n}\n\nconsole.log('✅ PetService 已載入');"],"version":3}