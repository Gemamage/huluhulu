9e2dad182e414db510a0606bb333ce1c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRoutes = void 0;
const express_1 = require("express");
const logger_1 = require("../utils/logger");
const errors_1 = require("../utils/errors");
const response_1 = require("../utils/response");
const validation_1 = require("../utils/validation");
const auth_1 = require("../schemas/auth");
const userService_1 = require("../services/userService");
const emailService_1 = require("../services/emailService");
const verificationService_1 = require("../services/verificationService");
const auth_2 = require("../middleware/auth");
const rbac_1 = require("../middleware/rbac");
const error_handler_1 = require("../middleware/error-handler");
const router = (0, express_1.Router)();
exports.authRoutes = router;
const userService = new userService_1.UserService();
// 用戶註冊
router.post('/register', (0, validation_1.validateRequest)(auth_1.userRegistrationSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email, password, name, phone } = req.body;
    const userData = { email, password, name, phone };
    // 註冊用戶（UserService 內部會檢查電子郵件是否已存在）
    const result = await userService.registerUser(userData);
    logger_1.logger.info('用戶註冊成功', { email, name, userId: result.user._id });
    response_1.ResponseUtil.created(res, {
        user: {
            id: result.user._id,
            email: result.user.email,
            name: result.user.name,
            isEmailVerified: result.user.isEmailVerified,
        },
    }, '註冊成功，請檢查您的電子郵件以驗證帳號');
}));
// 用戶登入
router.post('/login', (0, validation_1.validateRequest)(auth_1.userLoginSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email, password } = req.body;
    const loginData = { email, password };
    // 用戶登入
    const { user, token } = await userService.loginUser(loginData);
    logger_1.logger.info('用戶登入成功', { email, userId: user._id });
    response_1.ResponseUtil.success(res, {
        user: {
            id: user._id,
            email: user.email,
            name: user.name,
            phone: user.phone,
            avatar: user.avatar,
            role: user.role,
            isEmailVerified: user.isEmailVerified,
            lastLoginAt: user.lastLoginAt,
        },
        token,
    }, '登入成功');
}));
// 用戶登出
router.post('/logout', auth_2.authenticate, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user?._id?.toString();
    // TODO: 實作令牌黑名單機制（可選）
    // 目前採用客戶端刪除令牌的方式
    logger_1.logger.info('用戶登出成功', { userId });
    response_1.ResponseUtil.success(res, null, '登出成功');
}));
// 刷新令牌
router.post('/refresh', auth_2.authenticate, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user?._id?.toString();
    if (!userId) {
        throw errors_1.ErrorFactory.createAuthenticationError('invalid_token');
    }
    // 獲取用戶資料
    const user = await userService.getUserById(userId);
    if (!user) {
        throw errors_1.ErrorFactory.createNotFoundError('用戶', userId);
    }
    // 生成新令牌
    const newToken = user.generateAuthToken();
    logger_1.logger.info('令牌刷新成功', { userId });
    response_1.ResponseUtil.success(res, {
        token: newToken,
        user: {
            id: user._id,
            email: user.email,
            name: user.name,
            phone: user.phone,
            avatar: user.avatar,
            role: user.role,
            isEmailVerified: user.isEmailVerified,
        },
    }, '令牌刷新成功');
}));
// 忘記密碼
router.post('/forgot-password', (0, validation_1.validateRequest)(auth_1.forgotPasswordSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email } = req.body;
    // 查找用戶
    const user = await userService.getUserByEmail(email);
    if (!user) {
        // 為了安全考量，即使用戶不存在也返回成功訊息
        response_1.ResponseUtil.success(res, null, '如果該電子郵件地址存在於我們的系統中，您將收到密碼重設郵件');
        return;
    }
    // 生成密碼重設令牌
    const resetToken = user.generatePasswordResetToken();
    await user.save();
    // 發送密碼重設郵件
    await emailService_1.EmailService.sendPasswordResetEmail(user.email, resetToken, user.name);
    logger_1.logger.info('密碼重設郵件已發送', { email, userId: user._id });
    response_1.ResponseUtil.success(res, null, '密碼重設郵件已發送，請檢查您的電子郵件');
}));
// 重設密碼
router.post('/reset-password', (0, validation_1.validateRequest)(auth_1.passwordResetSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { token, newPassword } = req.body;
    // 重設密碼
    await userService.resetPassword(token, newPassword);
    logger_1.logger.info('密碼重設成功');
    response_1.ResponseUtil.success(res, null, '密碼重設成功，請使用新密碼登入');
}));
// 獲取當前用戶資訊
router.get('/me', auth_2.authenticate, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user?._id.toString();
    if (!userId) {
        throw errors_1.ErrorFactory.createAuthenticationError('invalid_token');
    }
    // 獲取用戶資訊
    const user = await userService.getUserById(userId);
    if (!user) {
        throw errors_1.ErrorFactory.createNotFoundError('用戶', userId);
    }
    logger_1.logger.info('獲取用戶資訊成功', { userId });
    response_1.ResponseUtil.success(res, {
        user: {
            id: user._id,
            email: user.email,
            name: user.name,
            phone: user.phone,
            avatar: user.avatar,
            role: user.role,
            isEmailVerified: user.isEmailVerified,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt,
            lastLoginAt: user.lastLoginAt,
        },
    });
}));
// 電子郵件驗證
router.get('/verify-email/:token', (0, validation_1.validateParams)(auth_1.verifyEmailParamsSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { token } = req.params;
    // 使用新的驗證服務
    const result = await verificationService_1.VerificationService.verifyEmailToken(token);
    if (result.success) {
        logger_1.logger.info('電子郵件驗證成功', { token });
        response_1.ResponseUtil.success(res, result.user ? {
            user: {
                id: result.user._id,
                email: result.user.email,
                name: result.user.name,
                isEmailVerified: result.user.isEmailVerified,
            },
        } : null, result.message);
    }
    else {
        throw errors_1.ErrorFactory.createValidationError(result.message);
    }
}));
// 重新發送驗證郵件（需要登入）
router.post('/resend-verification', auth_2.authenticate, rbac_1.requireActiveAccount, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const user = req.user;
    // 使用新的驗證服務
    const result = await verificationService_1.VerificationService.resendVerificationEmail(user.email);
    if (result.success) {
        logger_1.logger.info('重新發送驗證郵件成功', { userId: user._id, email: user.email });
        response_1.ResponseUtil.success(res, null, result.message);
    }
    else {
        throw errors_1.ErrorFactory.createValidationError(result.message, {
            cooldownRemaining: result.cooldownRemaining,
        });
    }
}));
// 重新發送驗證郵件
router.post('/resend-verification', (0, validation_1.validateRequest)(auth_1.resendVerificationEmailSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email } = req.body;
    // 使用新的驗證服務
    const result = await verificationService_1.VerificationService.resendVerificationEmail(email);
    if (result.success) {
        logger_1.logger.info('重新發送驗證郵件成功', { email });
        response_1.ResponseUtil.success(res, null, result.message);
    }
    else {
        throw errors_1.ErrorFactory.createValidationError(result.message, {
            cooldownRemaining: result.cooldownRemaining,
        });
    }
}));
// 檢查驗證狀態
router.get('/verification-status', auth_2.authenticate, rbac_1.requireActiveAccount, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const user = req.user;
    const status = await verificationService_1.VerificationService.checkVerificationStatus(user);
    response_1.ResponseUtil.success(res, {
        needsVerification: status.needsVerification,
        hasValidToken: status.hasValidToken,
        tokenExpiry: status.tokenExpiry,
        isEmailVerified: user.isEmailVerified,
    });
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,