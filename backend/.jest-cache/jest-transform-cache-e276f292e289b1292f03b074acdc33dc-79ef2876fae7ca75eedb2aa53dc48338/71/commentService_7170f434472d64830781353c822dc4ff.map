{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\commentService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\commentService.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport { Comment, IComment } from '../models/Comment';\nimport { Pet } from '../models/Pet';\nimport { User } from '../models/User';\nimport { NotificationService } from './notificationService';\nimport { NotificationType } from '../models/Notification';\n\nexport interface CreateCommentData {\n  petId: string;\n  userId: string;\n  content: string;\n  parentId?: string;\n}\n\nexport interface UpdateCommentData {\n  content?: string;\n}\n\nexport interface CommentQuery {\n  petId?: string;\n  userId?: string;\n  parentId?: string | null;\n  page?: number;\n  limit?: number;\n  sortBy?: 'createdAt' | 'updatedAt';\n  sortOrder?: 'asc' | 'desc';\n  includeDeleted?: boolean;\n}\n\nexport class CommentService {\n  private notificationService: NotificationService;\n\n  constructor() {\n    this.notificationService = new NotificationService();\n  }\n\n  /**\n   * 創建新留言\n   */\n  async createComment(data: CreateCommentData): Promise<IComment> {\n    const { petId, userId, content, parentId } = data;\n\n    // 驗證寵物是否存在\n    const pet = await Pet.findById(petId);\n    if (!pet) {\n      throw new Error('寵物不存在');\n    }\n\n    // 驗證用戶是否存在\n    const user = await User.findById(userId);\n    if (!user) {\n      throw new Error('用戶不存在');\n    }\n\n    // 如果是回覆留言，驗證父留言是否存在\n    if (parentId) {\n      const parentComment = await Comment.findById(parentId);\n      if (!parentComment) {\n        throw new Error('父留言不存在');\n      }\n      if (parentComment.petId.toString() !== petId) {\n        throw new Error('回覆留言必須在同一寵物頁面下');\n      }\n    }\n\n    // 創建留言\n    const comment = new Comment({\n      petId: new mongoose.Types.ObjectId(petId),\n      userId: new mongoose.Types.ObjectId(userId),\n      content: content.trim(),\n      parentId: parentId ? new mongoose.Types.ObjectId(parentId) : null,\n    });\n\n    await comment.save();\n\n    // 發送通知\n    await this.sendCommentNotification(comment, pet);\n\n    const createdComment = await this.getCommentById(comment._id.toString());\n    if (!createdComment) {\n      throw new Error('創建留言後無法獲取留言詳情');\n    }\n    return createdComment;\n  }\n\n  /**\n   * 獲取留言詳情\n   */\n  async getCommentById(commentId: string): Promise<IComment | null> {\n    if (!mongoose.Types.ObjectId.isValid(commentId)) {\n      throw new Error('無效的留言ID');\n    }\n\n    return await Comment.findById(commentId)\n      .populate('userId', 'username avatar email')\n      .populate('petId', 'name images')\n      .lean();\n  }\n\n  /**\n   * 獲取特定寵物的留言列表\n   */\n  async getCommentsByPet(petId: string, options: {\n    page?: number;\n    limit?: number;\n    sortBy?: 'createdAt' | 'updatedAt';\n    sortOrder?: 'asc' | 'desc';\n  } = {}): Promise<{\n    comments: IComment[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const { page = 1, limit = 20, sortBy = 'createdAt', sortOrder = 'desc' } = options;\n    \n    return await this.getComments({\n      petId,\n      page,\n      limit,\n      sortBy,\n      sortOrder\n    });\n  }\n\n  /**\n   * 獲取留言列表\n   */\n  async getComments(query: CommentQuery): Promise<{\n    comments: IComment[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const {\n      petId,\n      userId,\n      parentId,\n      page = 1,\n      limit = 20,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n      includeDeleted = false\n    } = query;\n\n    // 構建查詢條件\n    const filter: any = {};\n    if (petId) filter.petId = new mongoose.Types.ObjectId(petId);\n    if (userId) filter.userId = new mongoose.Types.ObjectId(userId);\n    if (parentId !== undefined) {\n      filter.parentId = parentId ? new mongoose.Types.ObjectId(parentId) : null;\n    }\n    if (includeDeleted) {\n      filter.includeDeleted = true;\n    }\n\n    // 計算分頁\n    const skip = (page - 1) * limit;\n    const sortOptions: any = {};\n    sortOptions[sortBy] = sortOrder === 'asc' ? 1 : -1;\n\n    // 執行查詢\n    const [comments, total] = await Promise.all([\n      Comment.find(filter)\n        .populate('userId', 'username avatar email')\n        .populate('petId', 'name images')\n        .sort(sortOptions)\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      Comment.countDocuments(filter)\n    ]);\n\n    return {\n      comments,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * 獲取留言樹狀結構\n   */\n  async getCommentTree(petId: string, page: number = 1, limit: number = 20): Promise<{\n    comments: any[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    if (!mongoose.Types.ObjectId.isValid(petId)) {\n      throw new Error('無效的寵物ID');\n    }\n\n    // 獲取主留言\n    const skip = (page - 1) * limit;\n    const [mainComments, total] = await Promise.all([\n      Comment.find({ \n        petId: new mongoose.Types.ObjectId(petId), \n        parentId: null \n      })\n        .populate('userId', 'username avatar email')\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      Comment.countDocuments({ \n        petId: new mongoose.Types.ObjectId(petId), \n        parentId: null \n      })\n    ]);\n\n    // 獲取每個主留言的回覆\n    const commentsWithReplies = await Promise.all(\n      mainComments.map(async (comment: any) => {\n        const replies = await Comment.find({ \n          parentId: comment._id \n        })\n          .populate('userId', 'username avatar email')\n          .sort({ createdAt: 1 })\n          .limit(10) // 限制回覆數量\n          .lean();\n\n        const replyCount = await Comment.countDocuments({ \n          parentId: comment._id \n        });\n\n        return {\n          ...comment,\n          replies,\n          replyCount,\n          hasMoreReplies: replyCount > 10\n        };\n      })\n    );\n\n    return {\n      comments: commentsWithReplies,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * 更新留言\n   */\n  async updateComment(\n    commentId: string, \n    userId: string, \n    data: UpdateCommentData\n  ): Promise<IComment | null> {\n    if (!mongoose.Types.ObjectId.isValid(commentId)) {\n      throw new Error('無效的留言ID');\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      throw new Error('留言不存在');\n    }\n\n    // 檢查權限\n    if (comment.userId.toString() !== userId) {\n      throw new Error('無權限修改此留言');\n    }\n\n    // 更新留言\n    const updatedComment = await Comment.findByIdAndUpdate(\n      commentId,\n      { \n        ...data,\n        content: data.content?.trim()\n      },\n      { new: true }\n    )\n      .populate('userId', 'username avatar email')\n      .populate('petId', 'name images');\n\n    return updatedComment;\n  }\n\n  /**\n   * 刪除留言\n   */\n  async deleteComment(commentId: string, userId: string, isAdmin: boolean = false): Promise<boolean> {\n    if (!mongoose.Types.ObjectId.isValid(commentId)) {\n      throw new Error('無效的留言ID');\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      throw new Error('留言不存在');\n    }\n\n    // 檢查權限\n    if (!isAdmin && comment.userId.toString() !== userId) {\n      throw new Error('無權限刪除此留言');\n    }\n\n    // 軟刪除\n    await Comment.findByIdAndUpdate(commentId, {\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: new mongoose.Types.ObjectId(userId)\n    });\n\n    // 同時刪除所有回覆\n    await Comment.updateMany(\n      { parentId: new mongoose.Types.ObjectId(commentId) },\n      {\n        isDeleted: true,\n        deletedAt: new Date(),\n        deletedBy: new mongoose.Types.ObjectId(userId)\n      }\n    );\n\n    return true;\n  }\n\n  /**\n   * 舉報留言\n   */\n  async reportComment(commentId: string, reporterId: string): Promise<boolean> {\n    if (!mongoose.Types.ObjectId.isValid(commentId)) {\n      throw new Error('無效的留言ID');\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      throw new Error('留言不存在');\n    }\n\n    // 增加舉報次數\n    await Comment.findByIdAndUpdate(commentId, {\n      $inc: { reportCount: 1 }\n    });\n\n    // 如果舉報次數超過閾值，自動隱藏\n    const updatedComment = await Comment.findById(commentId);\n    if (updatedComment && updatedComment.reportCount >= 5) {\n      await Comment.findByIdAndUpdate(commentId, {\n        isHidden: true\n      });\n    }\n\n    return true;\n  }\n\n  /**\n   * 獲取用戶留言統計\n   */\n  async getUserCommentStats(userId: string): Promise<{\n    totalComments: number;\n    totalReplies: number;\n    recentComments: IComment[];\n  }> {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      throw new Error('無效的用戶ID');\n    }\n\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n\n    const [totalComments, totalReplies, recentComments] = await Promise.all([\n      Comment.countDocuments({ userId: userObjectId, parentId: null }),\n      Comment.countDocuments({ userId: userObjectId, parentId: { $ne: null } }),\n      Comment.find({ userId: userObjectId })\n        .populate('petId', 'name images')\n        .sort({ createdAt: -1 })\n        .limit(5)\n        .lean()\n    ]);\n\n    return {\n      totalComments,\n      totalReplies,\n      recentComments\n    };\n  }\n\n  /**\n   * 發送留言通知\n   */\n  private async sendCommentNotification(comment: IComment, pet: any): Promise<void> {\n    try {\n      // 通知寵物主人\n      if (pet.userId.toString() !== comment.userId.toString()) {\n        await NotificationService.sendNotification({\n          userId: pet.userId.toString(),\n          type: NotificationType.COMMENT,\n          title: '新留言通知',\n          message: `有人在您的寵物「${pet.name}」頁面留言了`,\n          data: {\n            petId: pet._id.toString(),\n            commentId: comment._id.toString(),\n            commenterId: comment.userId.toString()\n          }\n        });\n      }\n\n      // 如果是回覆，通知被回覆的用戶\n      if (comment.parentId) {\n        const parentComment = await Comment.findById(comment.parentId);\n        if (parentComment && parentComment.userId.toString() !== comment.userId.toString()) {\n          await NotificationService.sendNotification({\n            userId: parentComment.userId.toString(),\n            type: NotificationType.REPLY,\n            title: '留言回覆通知',\n            message: `有人回覆了您的留言`,\n            data: {\n              petId: pet._id.toString(),\n              commentId: comment._id.toString(),\n              parentCommentId: parentComment._id.toString(),\n              replierId: comment.userId.toString()\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.error('發送留言通知失敗:', error);\n    }\n  }\n}\n\nexport const commentService = new CommentService();"],"version":3}