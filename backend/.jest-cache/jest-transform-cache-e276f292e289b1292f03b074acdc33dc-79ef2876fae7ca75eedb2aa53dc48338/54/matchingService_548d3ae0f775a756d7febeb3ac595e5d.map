{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\matchingService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\matchingService.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { Pet, IPet } from \"../models/Pet\";\nimport { Match, IMatch } from \"../models/Match\";\nimport { User, IUser } from \"../models/User\";\nimport { NotificationType } from \"../models/Notification\";\nimport { AIService } from \"./aiService\";\nimport { EmailService } from \"./emailService\";\nimport { NotificationService } from \"./notificationService\";\n\nexport interface PotentialMatch {\n  lostPet?: IPet;\n  foundPet?: IPet;\n  similarity: number;\n  confidence: \"low\" | \"medium\" | \"high\";\n  distance?: number;\n}\n\nexport interface MatchOptions {\n  minSimilarity?: number;\n  maxDistance?: number; // in kilometers\n  maxDays?: number;\n}\n\nexport interface CreateMatchData {\n  lostPetId: string;\n  foundPetId: string;\n  similarity: number;\n  confidence: \"low\" | \"medium\" | \"high\";\n  notes?: string;\n}\n\nexport interface GetMatchesOptions {\n  status?: \"pending\" | \"confirmed\" | \"rejected\";\n  page?: number;\n  limit?: number;\n  sortBy?: \"createdAt\" | \"similarity\";\n  sortOrder?: \"asc\" | \"desc\";\n}\n\nexport interface GetMatchesResult {\n  matches: IMatch[];\n  total: number;\n  totalPages: number;\n  currentPage: number;\n}\n\nexport interface AutoMatchingResult {\n  matchesCreated: number;\n  petsProcessed: number;\n  errors: string[];\n}\n\nexport interface MatchStatistics {\n  total: number;\n  pending: number;\n  confirmed: number;\n  rejected: number;\n  averageSimilarity: number;\n}\n\nexport interface StatisticsOptions {\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport class MatchingService {\n  /**\n   * 尋找潛在配對\n   */\n  static async findPotentialMatches(\n    petId: string,\n    options: MatchOptions = {},\n  ): Promise<PotentialMatch[]> {\n    const {\n      minSimilarity = 0.7,\n      maxDistance = 50, // 50km default\n      maxDays = 30,\n    } = options;\n\n    const pet = await Pet.findById(petId);\n    if (!pet || !pet.aiFeatures || pet.aiFeatures.length === 0) {\n      return [];\n    }\n\n    const isLostPet = pet.status === \"lost\";\n    const targetStatus = isLostPet ? \"found\" : \"lost\";\n\n    // 計算日期範圍\n    const dateThreshold = new Date(Date.now() - maxDays * 24 * 60 * 60 * 1000);\n\n    // 查找候選寵物\n    const candidates = await Pet.find({\n      _id: { $ne: petId },\n      status: targetStatus,\n      userId: { $ne: pet.userId },\n      createdAt: { $gte: dateThreshold },\n      aiFeatures: { $exists: true, $ne: [] },\n    });\n\n    const potentialMatches: PotentialMatch[] = [];\n\n    for (const candidate of candidates) {\n      try {\n        // 計算相似度 - 使用第一個圖像特徵\n        const petFeatures = pet.aiFeatures[0]?.features;\n        const candidateFeatures = candidate.aiFeatures?.[0]?.features;\n\n        if (!petFeatures || !candidateFeatures) continue;\n\n        const similarity = AIService.calculateSimilarity(\n          petFeatures,\n          candidateFeatures,\n        );\n\n        if (similarity < minSimilarity) continue;\n\n        // 暫時跳過距離計算，因為 Pet 模型中沒有坐標字段\n        // TODO: 添加地理坐標字段到 Pet 模型\n        const distance = 0; // 暫時設為 0\n\n        // 檢查是否已存在配對\n        const existingMatch = await Match.findOne({\n          $or: [\n            {\n              lostPet: isLostPet ? petId : candidate._id,\n              foundPet: isLostPet ? candidate._id : petId,\n            },\n            {\n              lostPet: isLostPet ? candidate._id : petId,\n              foundPet: isLostPet ? petId : candidate._id,\n            },\n          ],\n        });\n\n        if (existingMatch) continue;\n\n        const confidence = MatchingService.calculateConfidence(similarity);\n\n        const match: PotentialMatch = {\n          similarity,\n          confidence,\n          distance,\n        };\n\n        if (isLostPet) {\n          match.lostPet = pet;\n          match.foundPet = candidate;\n        } else {\n          match.lostPet = candidate;\n          match.foundPet = pet;\n        }\n\n        potentialMatches.push(match);\n      } catch (error) {\n        console.error(\n          `Error calculating similarity for pets ${petId} and ${candidate._id}:`,\n          error,\n        );\n      }\n    }\n\n    // 按相似度排序\n    return potentialMatches.sort((a, b) => b.similarity - a.similarity);\n  }\n\n  /**\n   * 創建配對\n   */\n  static async createMatch(data: CreateMatchData): Promise<IMatch> {\n    const { lostPetId, foundPetId, similarity, confidence, notes } = data;\n\n    // 驗證寵物存在\n    const lostPet = await Pet.findById(lostPetId);\n    const foundPet = await Pet.findById(foundPetId);\n\n    if (!lostPet || !foundPet) {\n      throw new Error(\"寵物不存在\");\n    }\n\n    // 驗證寵物狀態\n    if (lostPet.status !== \"lost\" || foundPet.status !== \"found\") {\n      throw new Error(\"無效的寵物狀態\");\n    }\n\n    // 檢查是否已存在配對\n    const existingMatch = await Match.findOne({\n      lostPet: lostPetId,\n      foundPet: foundPetId,\n    });\n\n    if (existingMatch) {\n      throw new Error(\"配對已存在\");\n    }\n\n    // 創建配對\n    const match = new Match({\n      lostPet: lostPetId,\n      foundPet: foundPetId,\n      similarity,\n      confidence,\n      notes,\n    });\n\n    await match.save();\n\n    // 發送通知郵件\n    try {\n      const populatedMatch = await Match.findById(match._id)\n        .populate(\"lostPet\")\n        .populate(\"foundPet\");\n\n      if (populatedMatch) {\n        // TODO: 實現 EmailService.sendPetMatchNotification 方法\n        // 發送給失主\n        // await EmailService.sendPetMatchNotification(\n        //   (await User.findById(lostPet.userId) as IUser).email,\n        //   {\n        //     lostPet: populatedMatch.lostPet as IPet,\n        //     foundPet: populatedMatch.foundPet as IPet,\n        //     similarity,\n        //     confidence\n        //   }\n        // );\n\n        // 發送給拾獲者\n        // await EmailService.sendPetMatchNotification(\n        //   (await User.findById(foundPet.userId) as IUser).email,\n        //   {\n        //     lostPet: populatedMatch.lostPet as IPet,\n        //     foundPet: populatedMatch.foundPet as IPet,\n        //     similarity,\n        //     confidence\n        //   }\n        // );\n\n        // 發送應用內通知\n        await NotificationService.sendNotification({\n          userId: lostPet.userId.toString(),\n          type: NotificationType.MATCH_FOUND,\n          title: \"找到可能的配對！\",\n          message: `您的寵物 ${lostPet.name} 可能找到了，相似度: ${Math.round(similarity * 100)}%`,\n          data: {\n            matchId: (match._id as mongoose.Types.ObjectId).toString(),\n            petId: lostPet._id.toString(),\n          },\n        });\n\n        await NotificationService.sendNotification({\n          userId: foundPet.userId.toString(),\n          type: NotificationType.MATCH_FOUND,\n          title: \"找到可能的配對！\",\n          message: `您拾獲的寵物 ${foundPet.name} 可能找到主人了，相似度: ${Math.round(similarity * 100)}%`,\n          data: {\n            matchId: (match._id as mongoose.Types.ObjectId).toString(),\n            petId: foundPet._id.toString(),\n          },\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to send match notifications:\", error);\n      // 不拋出錯誤，配對創建成功但通知失敗\n    }\n\n    return match;\n  }\n\n  /**\n   * 根據 ID 獲取配對\n   */\n  static async getMatchById(matchId: string): Promise<IMatch | null> {\n    return await Match.findById(matchId)\n      .populate(\"lostPet\")\n      .populate(\"foundPet\")\n      .populate(\"confirmedBy\");\n  }\n\n  /**\n   * 更新配對狀態\n   */\n  static async updateMatchStatus(\n    matchId: string,\n    userId: string,\n    status: \"confirmed\" | \"rejected\",\n    notes?: string,\n  ): Promise<IMatch | null> {\n    const match = await Match.findById(matchId)\n      .populate(\"lostPet\")\n      .populate(\"foundPet\");\n\n    if (!match) {\n      throw new Error(\"配對不存在\");\n    }\n\n    if (match.status !== \"pending\") {\n      throw new Error(\"配對已經處理過了\");\n    }\n\n    // 檢查權限：只有失主或拾獲者可以更新狀態\n    const lostPet = match.lostPet as IPet;\n    const foundPet = match.foundPet as IPet;\n\n    if (\n      lostPet.userId.toString() !== userId &&\n      foundPet.userId.toString() !== userId\n    ) {\n      throw new Error(\"無權限\");\n    }\n\n    // 更新狀態\n    match.status = status;\n    match.confirmedBy = new mongoose.Types.ObjectId(userId);\n\n    if (status === \"confirmed\") {\n      match.confirmedAt = new Date();\n    } else {\n      match.rejectedAt = new Date();\n    }\n\n    if (notes) {\n      match.notes = notes;\n    }\n\n    await match.save();\n\n    // 發送狀態更新通知\n    try {\n      const otherUserId =\n        lostPet.userId.toString() === userId\n          ? foundPet.userId.toString()\n          : lostPet.userId.toString();\n\n      const message =\n        status === \"confirmed\" ? \"配對已被確認！\" : \"配對已被拒絕。\";\n\n      await NotificationService.sendNotification({\n        userId: otherUserId,\n        type: NotificationType.MATCH_FOUND,\n        title: \"配對狀態更新\",\n        message,\n        data: {\n          matchId: (match._id as mongoose.Types.ObjectId).toString(),\n          status,\n        },\n      });\n    } catch (error) {\n      console.error(\"Failed to send match status update notification:\", error);\n    }\n\n    return match;\n  }\n\n  /**\n   * 獲取用戶的配對列表\n   */\n  static async getUserMatches(\n    userId: string,\n    options: GetMatchesOptions = {},\n  ): Promise<GetMatchesResult> {\n    const {\n      status,\n      page = 1,\n      limit = 10,\n      sortBy = \"createdAt\",\n      sortOrder = \"desc\",\n    } = options;\n\n    // 構建查詢條件\n    const query: any = {\n      $or: [{ \"lostPet.userId\": userId }, { \"foundPet.userId\": userId }],\n    };\n\n    if (status) {\n      query.status = status;\n    }\n\n    // 構建排序\n    const sort: any = {};\n    sort[sortBy] = sortOrder === \"desc\" ? -1 : 1;\n\n    // 執行查詢\n    const [matches, total] = await Promise.all([\n      Match.find(query)\n        .populate({\n          path: \"lostPet\",\n          populate: { path: \"owner\" },\n        })\n        .populate({\n          path: \"foundPet\",\n          populate: { path: \"owner\" },\n        })\n        .populate(\"confirmedBy\")\n        .sort(sort)\n        .skip((page - 1) * limit)\n        .limit(limit),\n      Match.countDocuments(query),\n    ]);\n\n    return {\n      matches,\n      total,\n      totalPages: Math.ceil(total / limit),\n      currentPage: page,\n    };\n  }\n\n  /**\n   * 運行自動配對\n   */\n  static async runAutomaticMatching(\n    options: MatchOptions = {},\n  ): Promise<AutoMatchingResult> {\n    const { maxDays = 7 } = options;\n    const errors: string[] = [];\n    let matchesCreated = 0;\n    let petsProcessed = 0;\n\n    try {\n      // 獲取最近的失蹤寵物\n      const dateThreshold = new Date(\n        Date.now() - maxDays * 24 * 60 * 60 * 1000,\n      );\n\n      const recentLostPets = await Pet.find({\n        status: \"lost\",\n        createdAt: { $gte: dateThreshold },\n        \"aiData.features\": { $exists: true, $ne: null },\n      });\n\n      for (const lostPet of recentLostPets) {\n        try {\n          petsProcessed++;\n\n          const potentialMatches = await MatchingService.findPotentialMatches(\n            lostPet._id.toString(),\n            { minSimilarity: 0.8, ...options },\n          );\n\n          // 只創建最佳配對\n          if (potentialMatches.length > 0) {\n            const bestMatch = potentialMatches[0];\n\n            if (bestMatch) {\n              await MatchingService.createMatch({\n                lostPetId: lostPet._id.toString(),\n                foundPetId: (bestMatch.foundPet as IPet)._id.toString(),\n                similarity: bestMatch.similarity,\n                confidence: bestMatch.confidence,\n              });\n            }\n\n            matchesCreated++;\n          }\n        } catch (error) {\n          const errorMsg = `Error processing pet ${lostPet._id}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n          errors.push(errorMsg);\n          console.error(errorMsg);\n        }\n      }\n    } catch (error) {\n      const errorMsg = `Error in automatic matching: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n      errors.push(errorMsg);\n      console.error(errorMsg);\n    }\n\n    return {\n      matchesCreated,\n      petsProcessed,\n      errors,\n    };\n  }\n\n  /**\n   * 獲取配對統計\n   */\n  static async getMatchStatistics(\n    options: StatisticsOptions = {},\n  ): Promise<MatchStatistics> {\n    const { startDate, endDate } = options;\n\n    const query: any = {};\n    if (startDate || endDate) {\n      query.createdAt = {};\n      if (startDate) query.createdAt.$gte = startDate;\n      if (endDate) query.createdAt.$lte = endDate;\n    }\n\n    const [stats] = await Match.aggregate([\n      { $match: query },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: 1 },\n          pending: {\n            $sum: { $cond: [{ $eq: [\"$status\", \"pending\"] }, 1, 0] },\n          },\n          confirmed: {\n            $sum: { $cond: [{ $eq: [\"$status\", \"confirmed\"] }, 1, 0] },\n          },\n          rejected: {\n            $sum: { $cond: [{ $eq: [\"$status\", \"rejected\"] }, 1, 0] },\n          },\n          averageSimilarity: { $avg: \"$similarity\" },\n        },\n      },\n    ]);\n\n    return (\n      stats || {\n        total: 0,\n        pending: 0,\n        confirmed: 0,\n        rejected: 0,\n        averageSimilarity: 0,\n      }\n    );\n  }\n\n  /**\n   * 計算信心等級\n   */\n  static calculateConfidence(similarity: number): \"low\" | \"medium\" | \"high\" {\n    if (similarity >= 0.85) return \"high\";\n    if (similarity >= 0.7) return \"medium\";\n    return \"low\";\n  }\n\n  /**\n   * 計算兩點間距離（公里）\n   */\n  static calculateDistance(\n    coord1: [number, number],\n    coord2: [number, number],\n  ): number {\n    const [lon1, lat1] = coord1;\n    const [lon2, lat2] = coord2;\n\n    const R = 6371; // 地球半徑（公里）\n    const dLat = MatchingService.toRadians(lat2 - lat1);\n    const dLon = MatchingService.toRadians(lon2 - lon1);\n\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(MatchingService.toRadians(lat1)) *\n        Math.cos(MatchingService.toRadians(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  private static toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n}\n"],"version":3}