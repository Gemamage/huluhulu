{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\suggestions.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\suggestions.ts"],"sourcesContent":["import { elasticsearchService } from \"../elasticsearchService\";\nimport { logger } from \"../../utils/logger\";\nimport { indexingService } from \"./indexing\";\n\n// 搜尋建議介面\nexport interface SearchSuggestion {\n  text: string;\n  score: number;\n  type: \"breed\" | \"location\" | \"description\" | \"name\";\n}\n\n// 熱門搜尋介面\nexport interface PopularSearch {\n  query: string;\n  count: number;\n  category?: string;\n}\n\n/**\n * 搜尋建議服務\n * 負責處理自動完成、搜尋建議和相關推薦功能\n */\nexport class SearchSuggestionsService {\n  /**\n   * 獲取搜尋建議\n   */\n  public async getSearchSuggestions(\n    query: string,\n    limit: number = 5,\n  ): Promise<SearchSuggestion[]> {\n    try {\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getPetIndexName(),\n        suggest: {\n          name_suggest: {\n            prefix: query,\n            completion: {\n              field: \"name.suggest\",\n              size: limit,\n            },\n          },\n          breed_suggest: {\n            prefix: query,\n            completion: {\n              field: \"breed.suggest\",\n              size: limit,\n            },\n          },\n          location_suggest: {\n            prefix: query,\n            completion: {\n              field: \"lastSeenLocation.suggest\",\n              size: limit,\n            },\n          },\n        },\n      });\n\n      const suggestions: SearchSuggestion[] = [];\n      const suggest = response.suggest;\n\n      // 處理名稱建議\n      if (suggest.name_suggest && suggest.name_suggest[0]) {\n        suggest.name_suggest[0].options.forEach((option: any) => {\n          suggestions.push({\n            text: option.text,\n            score: option._score,\n            type: \"name\",\n          });\n        });\n      }\n\n      // 處理品種建議\n      if (suggest.breed_suggest && suggest.breed_suggest[0]) {\n        suggest.breed_suggest[0].options.forEach((option: any) => {\n          suggestions.push({\n            text: option.text,\n            score: option._score,\n            type: \"breed\",\n          });\n        });\n      }\n\n      // 處理地點建議\n      if (suggest.location_suggest && suggest.location_suggest[0]) {\n        suggest.location_suggest[0].options.forEach((option: any) => {\n          suggestions.push({\n            text: option.text,\n            score: option._score,\n            type: \"location\",\n          });\n        });\n      }\n\n      // 去重並排序\n      const uniqueSuggestions = suggestions\n        .filter(\n          (suggestion, index, self) =>\n            index === self.findIndex((s) => s.text === suggestion.text),\n        )\n        .sort((a, b) => b.score - a.score)\n        .slice(0, limit);\n\n      return uniqueSuggestions;\n    } catch (error) {\n      logger.error(\"獲取搜尋建議失敗:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * 獲取分類建議\n   */\n  public async getCategorySuggestions(\n    category: \"breed\" | \"location\" | \"type\",\n    query: string,\n    limit: number = 10,\n  ): Promise<SearchSuggestion[]> {\n    try {\n      let field: string;\n      switch (category) {\n        case \"breed\":\n          field = \"breed.suggest\";\n          break;\n        case \"location\":\n          field = \"lastSeenLocation.suggest\";\n          break;\n        case \"type\":\n          field = \"type\";\n          break;\n        default:\n          field = \"name.suggest\";\n      }\n\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getPetIndexName(),\n        suggest: {\n          category_suggest: {\n            prefix: query,\n            completion: {\n              field: field,\n              size: limit,\n            },\n          },\n        },\n      });\n\n      const suggestions: SearchSuggestion[] = [];\n      const suggest = response.suggest;\n\n      if (suggest.category_suggest && suggest.category_suggest[0]) {\n        suggest.category_suggest[0].options.forEach((option: any) => {\n          suggestions.push({\n            text: option.text,\n            score: option._score,\n            type: category,\n          });\n        });\n      }\n\n      return suggestions.sort((a, b) => b.score - a.score);\n    } catch (error) {\n      logger.error(`獲取 ${category} 建議失敗:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * 獲取熱門搜尋詞\n   */\n  public async getPopularSearches(\n    limit: number = 10,\n    category?: string,\n  ): Promise<PopularSearch[]> {\n    try {\n      const query: any = {\n        size: 0,\n        aggs: {\n          popular_queries: {\n            terms: {\n              field: \"query.keyword\",\n              size: limit,\n              order: { _count: \"desc\" },\n            },\n          },\n        },\n      };\n\n      // 如果指定了分類，添加篩選條件\n      if (category) {\n        query.query = {\n          bool: {\n            filter: [{ term: { \"filters.type\": category } }],\n          },\n        };\n      }\n\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        ...query,\n      });\n\n      const popularSearches: PopularSearch[] = [];\n      const aggs = response.aggregations;\n\n      if (aggs && aggs.popular_queries) {\n        aggs.popular_queries.buckets.forEach((bucket: any) => {\n          popularSearches.push({\n            query: bucket.key,\n            count: bucket.doc_count,\n            category,\n          });\n        });\n      }\n\n      return popularSearches;\n    } catch (error) {\n      logger.error(\"獲取熱門搜尋詞失敗:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * 獲取相關搜尋詞\n   */\n  public async getRelatedSearches(\n    query: string,\n    limit: number = 5,\n  ): Promise<SearchSuggestion[]> {\n    try {\n      // 使用 more_like_this 查詢找到相關的搜尋記錄\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        query: {\n          more_like_this: {\n            fields: [\"query\"],\n            like: [query],\n            min_term_freq: 1,\n            max_query_terms: 5,\n          },\n        },\n        aggs: {\n          related_queries: {\n            terms: {\n              field: \"query.keyword\",\n              size: limit,\n            },\n          },\n        },\n        size: 0,\n      });\n\n      const relatedSearches: SearchSuggestion[] = [];\n      const aggs = response.aggregations;\n\n      if (aggs && aggs.related_queries) {\n        aggs.related_queries.buckets.forEach((bucket: any) => {\n          if (bucket.key !== query) {\n            // 排除原始查詢\n            relatedSearches.push({\n              text: bucket.key,\n              score: bucket.doc_count,\n              type: \"description\",\n            });\n          }\n        });\n      }\n\n      return relatedSearches.sort((a, b) => b.score - a.score);\n    } catch (error) {\n      logger.error(\"獲取相關搜尋詞失敗:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * 獲取搜尋歷史建議\n   */\n  public async getUserSearchHistory(\n    userId: string,\n    limit: number = 10,\n  ): Promise<SearchSuggestion[]> {\n    try {\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        query: {\n          term: { userId },\n        },\n        aggs: {\n          user_queries: {\n            terms: {\n              field: \"query.keyword\",\n              size: limit,\n              order: { latest: \"desc\" },\n            },\n            aggs: {\n              latest: {\n                max: {\n                  field: \"timestamp\",\n                },\n              },\n            },\n          },\n        },\n        size: 0,\n      });\n\n      const searchHistory: SearchSuggestion[] = [];\n      const aggs = response.aggregations;\n\n      if (aggs && aggs.user_queries) {\n        aggs.user_queries.buckets.forEach((bucket: any) => {\n          searchHistory.push({\n            text: bucket.key,\n            score: bucket.doc_count,\n            type: \"description\",\n          });\n        });\n      }\n\n      return searchHistory;\n    } catch (error) {\n      logger.error(\"獲取用戶搜尋歷史失敗:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * 獲取智能建議（結合多種建議類型）\n   */\n  public async getSmartSuggestions(\n    query: string,\n    userId?: string,\n    limit: number = 10,\n  ): Promise<{\n    autoComplete: SearchSuggestion[];\n    popular: PopularSearch[];\n    related: SearchSuggestion[];\n    history?: SearchSuggestion[];\n  }> {\n    try {\n      const [autoComplete, popular, related, history] = await Promise.all([\n        this.getSearchSuggestions(query, Math.ceil(limit / 2)),\n        this.getPopularSearches(Math.ceil(limit / 3)),\n        this.getRelatedSearches(query, Math.ceil(limit / 3)),\n        userId\n          ? this.getUserSearchHistory(userId, Math.ceil(limit / 4))\n          : Promise.resolve([]),\n      ]);\n\n      return {\n        autoComplete,\n        popular,\n        related,\n        history: userId ? history : undefined,\n      };\n    } catch (error) {\n      logger.error(\"獲取智能建議失敗:\", error);\n      return {\n        autoComplete: [],\n        popular: [],\n        related: [],\n      };\n    }\n  }\n\n  /**\n   * 清理過期的搜尋建議緩存\n   */\n  public async cleanupSuggestionCache(\n    daysToKeep: number = 30,\n  ): Promise<{ deletedCount: number }> {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n      const response = await elasticsearchService.getClient().deleteByQuery({\n        index: indexingService.getSearchAnalyticsIndexName(),\n        query: {\n          range: {\n            timestamp: {\n              lt: cutoffDate.toISOString(),\n            },\n          },\n        },\n      });\n\n      const deletedCount = response.deleted || 0;\n      logger.info(`清理了 ${deletedCount} 條過期搜尋記錄`);\n\n      return { deletedCount };\n    } catch (error) {\n      logger.error(\"清理搜尋建議緩存失敗:\", error);\n      return { deletedCount: 0 };\n    }\n  }\n}\n\n// 導出單例實例\nexport const searchSuggestionsService = new SearchSuggestionsService();\n"],"version":3}