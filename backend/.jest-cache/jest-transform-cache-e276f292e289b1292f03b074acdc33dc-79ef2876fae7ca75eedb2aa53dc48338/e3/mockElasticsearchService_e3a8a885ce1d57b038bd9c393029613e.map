{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\mockElasticsearchService.ts","mappings":";AAAA;;;GAGG;;;AAEH,uCAAoC;AA2CpC,MAAM,wBAAwB;IAA9B;QACU,kBAAa,GAIhB,EAAE,CAAC;IAwWV,CAAC;IAtWC;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,SAAS;QACT,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS;QACb,OAAO;YACL,MAAM,EAAE,OAAO;YACf,YAAY,EAAE,cAAc;YAC5B,eAAe,EAAE,CAAC;YAClB,oBAAoB,EAAE,CAAC;YACvB,qBAAqB,EAAE,CAAC;YACxB,aAAa,EAAE,CAAC;YAChB,iBAAiB,EAAE,CAAC;YACpB,mBAAmB,EAAE,CAAC;YACtB,iBAAiB,EAAE,CAAC;YACpB,yBAAyB,EAAE,CAAC;YAC5B,uBAAuB,EAAE,CAAC;YAC1B,yBAAyB,EAAE,CAAC;YAC5B,gCAAgC,EAAE,CAAC;YACnC,+BAA+B,EAAE,KAAK;SACvC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,CAAC,WAA4B;QAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,SAAS;QACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;YACtB,KAAK,EAAE,WAAW,CAAC,KAAK,IAAI,EAAE;YAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,OAAO,EAAE,WAAW;SACrB,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,gBAAgB;YAChB,MAAM,UAAU,GAAQ,EAAE,CAAC;YAE3B,OAAO;YACP,IAAI,WAAW,CAAC,KAAK,EAAE,CAAC;gBACtB,UAAU,CAAC,GAAG,GAAG;oBACf,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;oBACtD,EAAE,WAAW,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;oBAC7D,EAAE,gBAAgB,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;oBAClE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;iBACxD,CAAC;YACJ,CAAC;YAED,OAAO;YACP,IAAI,WAAW,CAAC,IAAI;gBAAE,UAAU,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;YACzD,IAAI,WAAW,CAAC,MAAM;gBAAE,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;YAC/D,IAAI,WAAW,CAAC,KAAK;gBAAE,UAAU,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAC5D,IAAI,WAAW,CAAC,IAAI;gBAAE,UAAU,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;YACzD,IAAI,WAAW,CAAC,MAAM;gBAAE,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;YAC/D,IAAI,WAAW,CAAC,KAAK;gBAAE,UAAU,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAC5D,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC;gBACzB,UAAU,CAAC,gBAAgB,GAAG;oBAC5B,MAAM,EAAE,WAAW,CAAC,QAAQ;oBAC5B,QAAQ,EAAE,GAAG;iBACd,CAAC;YACJ,CAAC;YAED,OAAO;YACP,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC;YACnC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC;YACtC,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;YAEhC,OAAO;YACP,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC;YACjD,MAAM,SAAS,GAAG,WAAW,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,IAAI,GAAQ,EAAE,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,CAAC;YAE1C,OAAO;YACP,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACtC,SAAG,CAAC,IAAI,CAAC,UAAU,CAAC;qBACjB,IAAI,CAAC,IAAI,CAAC;qBACV,IAAI,CAAC,IAAI,CAAC;qBACV,KAAK,CAAC,KAAK,CAAC;qBACZ,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC;qBACpC,IAAI,EAAE;gBACT,SAAG,CAAC,cAAc,CAAC,UAAU,CAAC;aAC/B,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAEpC,uBAAuB;YACvB,MAAM,IAAI,GAAmB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;gBACrD,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE;gBACtB,KAAK,EAAE,GAAG,GAAG,KAAK,GAAG,GAAG,EAAE,UAAU;gBACpC,MAAM,EAAE,GAAG;gBACX,UAAU,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC;aAC5D,CAAC,CAAC,CAAC;YAEJ,OAAO;gBACL,IAAI;gBACJ,KAAK;gBACL,QAAQ,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7C,IAAI;aACL,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;YAC3C,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,KAAa;QACtC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,WAAW,GAA2B,EAAE,CAAC;QAE/C,IAAI,CAAC;YACH,OAAO;YACP,MAAM,MAAM,GAAG,MAAM,SAAG,CAAC,QAAQ,CAAC,OAAO,EAAE;gBACzC,KAAK,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE;aACxC,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBACnC,WAAW,CAAC,IAAI,CAAC;oBACf,IAAI,EAAE,KAAK;oBACX,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE,OAAO;iBACd,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO;YACP,MAAM,SAAS,GAAG,MAAM,SAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE;gBACvD,gBAAgB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE;aACnD,CAAC,CAAC;YACH,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACzC,WAAW,CAAC,IAAI,CAAC;oBACf,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE,UAAU;iBACjB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO;YACP,MAAM,KAAK,GAAG,MAAM,SAAG,CAAC,IAAI,CAC1B,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,EAC1C,EAAE,IAAI,EAAE,CAAC,EAAE,CACZ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACX,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBACpB,WAAW,CAAC,IAAI,CAAC;oBACf,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE,MAAM;iBACb,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CACtB,YAAoB,IAAI;QAExB,MAAM,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAC7B,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAE9C,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAC9C,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,IAAI,SAAS,CAC1C,CAAC;QAEF,OAAO;QACP,MAAM,UAAU,GAA8B,EAAE,CAAC;QACjD,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAChC,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;gBACjB,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACjE,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;aAC9C,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;aAC3C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;aACjC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEhB,OAAO;QACP,MAAM,SAAS,GAA8B,EAAE,CAAC;QAChD,MAAM,aAAa,GAA8B,EAAE,CAAC;QACpD,MAAM,UAAU,GAA8B,EAAE,CAAC;QAEjD,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAChC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACxB,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;oBAC5B,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAC9C,CAAC;YACD,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC5B,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;oBACpC,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACtD,CAAC;YACD,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACzB,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;oBAC9B,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAChD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO;QACP,MAAM,YAAY,GAA2C,EAAE,CAAC;QAChE,KAAK,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACjC,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjD,MAAM,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC7C,MAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChE,OAAO,UAAU,KAAK,OAAO,CAAC;YAChC,CAAC,CAAC,CAAC,MAAM,CAAC;YAEV,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,OAAO;YACL,aAAa,EAAE,cAAc,CAAC,MAAM;YACpC,cAAc;YACd,cAAc,EAAE;gBACd,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;oBACtD,GAAG;oBACH,KAAK;iBACN,CAAC,CAAC;gBACH,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC9D,GAAG;oBACH,KAAK;iBACN,CAAC,CAAC;gBACH,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;oBACxD,GAAG;oBACH,KAAK;iBACN,CAAC,CAAC;aACJ;YACD,YAAY;YACZ,mBAAmB,EAAE,GAAG,EAAE,WAAW;YACrC,WAAW,EAAE,IAAI,EAAE,QAAQ;SAC5B,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,kBAAkB,CAAC,GAAQ,EAAE,KAAc;QACjD,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAC;QAEtB,MAAM,UAAU,GAAQ,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAEtC,IAAI,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACrC,UAAU,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;QACnE,CAAC;QACD,IAAI,GAAG,CAAC,WAAW,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC;YACnD,MAAM,OAAO,GAAG,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAClD,UAAU,CAAC,WAAW,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;QACzE,CAAC;QACD,IAAI,GAAG,CAAC,gBAAgB,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC7D,UAAU,CAAC,gBAAgB,GAAG;gBAC5B,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,KAAK,OAAO,CAAC;aACzD,CAAC;QACJ,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CACjB,KAAa,EACb,EAAU,EACV,QAAa;QAEb,OAAO,CAAC,GAAG,CAAC,+BAA+B,KAAK,IAAI,EAAE,EAAE,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CAAC,UAAiB;QAC/B,OAAO,CAAC,GAAG,CAAC,4BAA4B,UAAU,CAAC,MAAM,MAAM,CAAC,CAAC;QACjE,OAAO;YACL,IAAI,EAAE,GAAG;YACT,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;gBACnC,KAAK,EAAE;oBACL,MAAM,EAAE,MAAM;oBACd,GAAG,EAAE,QAAQ,KAAK,EAAE;oBACpB,QAAQ,EAAE,CAAC;oBACX,MAAM,EAAE,SAAS;oBACjB,MAAM,EAAE,GAAG;iBACZ;aACF,CAAC,CAAC;SACJ,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAKlB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,SAAG,CAAC,cAAc,EAAE,CAAC;YAC7C,OAAO,CAAC,GAAG,CAAC,4BAA4B,SAAS,QAAQ,CAAC,CAAC;YAE3D,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,SAAS;gBAClB,MAAM,EAAE,CAAC;aACV,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC5C,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,CAAC;gBACV,MAAM,EAAE,CAAC;aACV,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,qBAAqB;QACnB,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM;YACxC,mBAAmB,EAAE,GAAG;YACxB,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,GAAG;YACd,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACtC,CAAC;IACJ,CAAC;CACF;AAEY,QAAA,wBAAwB,GAAG,IAAI,wBAAwB,EAAE,CAAC","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\mockElasticsearchService.ts"],"sourcesContent":["/**\n * Mock Elasticsearch Service\n * 用於在沒有 Elasticsearch 環境時提供模擬搜尋功能\n */\n\nimport { Pet } from \"../models/Pet\";\nimport { SearchResult, SearchResponse } from \"./elasticsearchService\";\n\nexport interface MockSearchQuery {\n  query?: string;\n  type?: string;\n  status?: string;\n  breed?: string;\n  location?: string;\n  size?: string;\n  gender?: string;\n  color?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n}\n\nexport interface MockSearchSuggestion {\n  text: string;\n  score: number;\n  type: \"breed\" | \"location\" | \"description\" | \"name\";\n}\n\nexport interface MockSearchAnalytics {\n  totalSearches: number;\n  popularQueries: Array<{\n    query: string;\n    count: number;\n  }>;\n  popularFilters: {\n    types: Array<{ key: string; count: number }>;\n    locations: Array<{ key: string; count: number }>;\n    breeds: Array<{ key: string; count: number }>;\n  };\n  searchTrends: Array<{\n    date: string;\n    count: number;\n  }>;\n  averageResponseTime: number;\n  successRate: number;\n}\n\nclass MockElasticsearchService {\n  private searchHistory: Array<{\n    query: string;\n    timestamp: Date;\n    filters: any;\n  }> = [];\n\n  /**\n   * 模擬 Elasticsearch 連接檢查\n   */\n  async checkConnection(): Promise<boolean> {\n    // 模擬連接延遲\n    await new Promise((resolve) => setTimeout(resolve, 100));\n    return true;\n  }\n\n  /**\n   * 模擬健康檢查\n   */\n  async getHealth(): Promise<any> {\n    return {\n      status: \"green\",\n      cluster_name: \"mock-cluster\",\n      number_of_nodes: 1,\n      number_of_data_nodes: 1,\n      active_primary_shards: 5,\n      active_shards: 5,\n      relocating_shards: 0,\n      initializing_shards: 0,\n      unassigned_shards: 0,\n      delayed_unassigned_shards: 0,\n      number_of_pending_tasks: 0,\n      number_of_in_flight_fetch: 0,\n      task_max_waiting_in_queue_millis: 0,\n      active_shards_percent_as_number: 100.0,\n    };\n  }\n\n  /**\n   * 模擬寵物搜尋\n   */\n  async searchPets(searchQuery: MockSearchQuery): Promise<SearchResponse> {\n    const startTime = Date.now();\n\n    // 記錄搜尋歷史\n    this.searchHistory.push({\n      query: searchQuery.query || \"\",\n      timestamp: new Date(),\n      filters: searchQuery,\n    });\n\n    try {\n      // 建構 MongoDB 查詢\n      const mongoQuery: any = {};\n\n      // 文字搜尋\n      if (searchQuery.query) {\n        mongoQuery.$or = [\n          { name: { $regex: searchQuery.query, $options: \"i\" } },\n          { description: { $regex: searchQuery.query, $options: \"i\" } },\n          { lastSeenLocation: { $regex: searchQuery.query, $options: \"i\" } },\n          { breed: { $regex: searchQuery.query, $options: \"i\" } },\n        ];\n      }\n\n      // 篩選條件\n      if (searchQuery.type) mongoQuery.type = searchQuery.type;\n      if (searchQuery.status) mongoQuery.status = searchQuery.status;\n      if (searchQuery.breed) mongoQuery.breed = searchQuery.breed;\n      if (searchQuery.size) mongoQuery.size = searchQuery.size;\n      if (searchQuery.gender) mongoQuery.gender = searchQuery.gender;\n      if (searchQuery.color) mongoQuery.color = searchQuery.color;\n      if (searchQuery.location) {\n        mongoQuery.lastSeenLocation = {\n          $regex: searchQuery.location,\n          $options: \"i\",\n        };\n      }\n\n      // 分頁設定\n      const page = searchQuery.page || 1;\n      const limit = searchQuery.limit || 12;\n      const skip = (page - 1) * limit;\n\n      // 排序設定\n      const sortBy = searchQuery.sortBy || \"createdAt\";\n      const sortOrder = searchQuery.sortOrder === \"asc\" ? 1 : -1;\n      const sort: any = { [sortBy]: sortOrder };\n\n      // 執行查詢\n      const [pets, total] = await Promise.all([\n        Pet.find(mongoQuery)\n          .sort(sort)\n          .skip(skip)\n          .limit(limit)\n          .populate(\"userId\", \"username email\")\n          .lean(),\n        Pet.countDocuments(mongoQuery),\n      ]);\n\n      const took = Date.now() - startTime;\n\n      // 轉換為 Elasticsearch 格式\n      const hits: SearchResult[] = pets.map((pet, index) => ({\n        id: pet._id.toString(),\n        score: 1.0 - index * 0.1, // 模擬相關性分數\n        source: pet,\n        highlights: this.generateHighlights(pet, searchQuery.query),\n      }));\n\n      return {\n        hits,\n        total,\n        maxScore: hits.length > 0 ? hits[0].score : 0,\n        took,\n      };\n    } catch (error) {\n      console.error(\"Mock search error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * 模擬搜尋建議\n   */\n  async getSearchSuggestions(query: string): Promise<MockSearchSuggestion[]> {\n    if (!query || query.length < 2) {\n      return [];\n    }\n\n    const suggestions: MockSearchSuggestion[] = [];\n\n    try {\n      // 品種建議\n      const breeds = await Pet.distinct(\"breed\", {\n        breed: { $regex: query, $options: \"i\" },\n      });\n      breeds.slice(0, 3).forEach((breed) => {\n        suggestions.push({\n          text: breed,\n          score: 0.9,\n          type: \"breed\",\n        });\n      });\n\n      // 地點建議\n      const locations = await Pet.distinct(\"lastSeenLocation\", {\n        lastSeenLocation: { $regex: query, $options: \"i\" },\n      });\n      locations.slice(0, 3).forEach((location) => {\n        suggestions.push({\n          text: location,\n          score: 0.8,\n          type: \"location\",\n        });\n      });\n\n      // 名稱建議\n      const names = await Pet.find(\n        { name: { $regex: query, $options: \"i\" } },\n        { name: 1 },\n      ).limit(3);\n      names.forEach((pet) => {\n        suggestions.push({\n          text: pet.name,\n          score: 0.7,\n          type: \"name\",\n        });\n      });\n    } catch (error) {\n      console.error(\"Mock suggestions error:\", error);\n    }\n\n    return suggestions.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * 模擬搜尋分析\n   */\n  async getSearchAnalytics(\n    timeRange: string = \"7d\",\n  ): Promise<MockSearchAnalytics> {\n    const days = parseInt(timeRange.replace(\"d\", \"\")) || 7;\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const recentSearches = this.searchHistory.filter(\n      (search) => search.timestamp >= startDate,\n    );\n\n    // 熱門查詢\n    const queryCount: { [key: string]: number } = {};\n    recentSearches.forEach((search) => {\n      if (search.query) {\n        queryCount[search.query] = (queryCount[search.query] || 0) + 1;\n      }\n    });\n\n    const popularQueries = Object.entries(queryCount)\n      .map(([query, count]) => ({ query, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    // 熱門篩選\n    const typeCount: { [key: string]: number } = {};\n    const locationCount: { [key: string]: number } = {};\n    const breedCount: { [key: string]: number } = {};\n\n    recentSearches.forEach((search) => {\n      if (search.filters.type) {\n        typeCount[search.filters.type] =\n          (typeCount[search.filters.type] || 0) + 1;\n      }\n      if (search.filters.location) {\n        locationCount[search.filters.location] =\n          (locationCount[search.filters.location] || 0) + 1;\n      }\n      if (search.filters.breed) {\n        breedCount[search.filters.breed] =\n          (breedCount[search.filters.breed] || 0) + 1;\n      }\n    });\n\n    // 搜尋趨勢\n    const searchTrends: Array<{ date: string; count: number }> = [];\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split(\"T\")[0];\n\n      const count = recentSearches.filter((search) => {\n        const searchDate = search.timestamp.toISOString().split(\"T\")[0];\n        return searchDate === dateStr;\n      }).length;\n\n      searchTrends.push({ date: dateStr, count });\n    }\n\n    return {\n      totalSearches: recentSearches.length,\n      popularQueries,\n      popularFilters: {\n        types: Object.entries(typeCount).map(([key, count]) => ({\n          key,\n          count,\n        })),\n        locations: Object.entries(locationCount).map(([key, count]) => ({\n          key,\n          count,\n        })),\n        breeds: Object.entries(breedCount).map(([key, count]) => ({\n          key,\n          count,\n        })),\n      },\n      searchTrends,\n      averageResponseTime: 150, // 模擬平均回應時間\n      successRate: 99.5, // 模擬成功率\n    };\n  }\n\n  /**\n   * 生成高亮顯示\n   */\n  private generateHighlights(pet: any, query?: string): any {\n    if (!query) return {};\n\n    const highlights: any = {};\n    const regex = new RegExp(query, \"gi\");\n\n    if (pet.name && regex.test(pet.name)) {\n      highlights.name = [pet.name.replace(regex, `<em>${query}</em>`)];\n    }\n    if (pet.description && regex.test(pet.description)) {\n      const snippet = pet.description.substring(0, 200);\n      highlights.description = [snippet.replace(regex, `<em>${query}</em>`)];\n    }\n    if (pet.lastSeenLocation && regex.test(pet.lastSeenLocation)) {\n      highlights.lastSeenLocation = [\n        pet.lastSeenLocation.replace(regex, `<em>${query}</em>`),\n      ];\n    }\n\n    return highlights;\n  }\n\n  /**\n   * 模擬索引初始化\n   */\n  async initializeIndex(): Promise<boolean> {\n    console.log(\"Mock Elasticsearch: 索引初始化完成\");\n    return true;\n  }\n\n  /**\n   * 模擬文檔索引\n   */\n  async indexDocument(\n    index: string,\n    id: string,\n    document: any,\n  ): Promise<boolean> {\n    console.log(`Mock Elasticsearch: 文檔已索引 - ${index}/${id}`);\n    return true;\n  }\n\n  /**\n   * 模擬批量索引\n   */\n  async bulkIndex(operations: any[]): Promise<any> {\n    console.log(`Mock Elasticsearch: 批量索引 ${operations.length} 個文檔`);\n    return {\n      took: 100,\n      errors: false,\n      items: operations.map((_, index) => ({\n        index: {\n          _index: \"pets\",\n          _id: `mock_${index}`,\n          _version: 1,\n          result: \"created\",\n          status: 201,\n        },\n      })),\n    };\n  }\n\n  /**\n   * 模擬重新索引\n   */\n  async reindexAllPets(): Promise<{\n    success: boolean;\n    indexed: number;\n    failed: number;\n  }> {\n    try {\n      const totalPets = await Pet.countDocuments();\n      console.log(`Mock Elasticsearch: 重新索引 ${totalPets} 個寵物文檔`);\n\n      return {\n        success: true,\n        indexed: totalPets,\n        failed: 0,\n      };\n    } catch (error) {\n      console.error(\"Mock reindex error:\", error);\n      return {\n        success: false,\n        indexed: 0,\n        failed: 1,\n      };\n    }\n  }\n\n  /**\n   * 模擬效能指標\n   */\n  getPerformanceMetrics(): any {\n    return {\n      totalRequests: this.searchHistory.length,\n      averageResponseTime: 150,\n      successRate: 99.5,\n      errorRate: 0.5,\n      lastUpdated: new Date().toISOString(),\n    };\n  }\n}\n\nexport const mockElasticsearchService = new MockElasticsearchService();\n"],"version":3}