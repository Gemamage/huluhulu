{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notificationService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notificationService.ts"],"sourcesContent":["import mongoose, { Types } from 'mongoose';\nimport { Notification, NotificationType, NotificationPriority, NotificationStatus, INotification } from '../models/Notification';\nimport { NotificationPreference, INotificationPreference } from '../models/NotificationPreference';\nimport { FirebaseService, PushNotificationPayload } from './firebaseService';\nimport { EmailService } from './emailService';\nimport { SocketService, RealtimeNotificationData } from './socketService';\nimport { logger } from '../utils/logger';\nimport { config } from '../config/environment';\n\n/**\n * 通知發送選項\n */\nexport interface NotificationOptions {\n  userId: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  priority?: NotificationPriority;\n  data?: any;\n  actionUrl?: string;\n  imageUrl?: string;\n  channels?: {\n    push?: boolean;\n    email?: boolean;\n    inApp?: boolean;\n  };\n  scheduledAt?: Date;\n  expiresAt?: Date;\n}\n\n/**\n * 批次通知選項\n */\nexport interface BatchNotificationOptions {\n  userIds: string[];\n  type: NotificationType;\n  title: string;\n  message: string;\n  priority?: NotificationPriority;\n  data?: any;\n  actionUrl?: string;\n  imageUrl?: string;\n  channels?: {\n    push?: boolean;\n    email?: boolean;\n    inApp?: boolean;\n  };\n  scheduledAt?: Date;\n  expiresAt?: Date;\n}\n\n/**\n * 通知發送結果\n */\nexport interface NotificationResult {\n  success: boolean;\n  notificationId?: string;\n  channels: {\n    push: { sent: boolean; error?: string };\n    email: { sent: boolean; error?: string };\n    inApp: { sent: boolean; error?: string };\n  };\n}\n\n/**\n * 批次通知發送結果\n */\nexport interface BatchNotificationResult {\n  totalUsers: number;\n  successCount: number;\n  failureCount: number;\n  results: Array<{\n    userId: string;\n    success: boolean;\n    notificationId?: string;\n    error?: string;\n  }>;\n  channelStats: {\n    push: { sent: number; failed: number };\n    email: { sent: number; failed: number };\n    inApp: { sent: number; failed: number };\n  };\n}\n\n/**\n * 通知服務類別\n */\nexport class NotificationService {\n  /**\n   * 發送單一通知\n   */\n  static async sendNotification(options: NotificationOptions): Promise<NotificationResult> {\n    const result: NotificationResult = {\n      success: false,\n      channels: {\n        push: { sent: false },\n        email: { sent: false },\n        inApp: { sent: false },\n      },\n    };\n\n    try {\n      // 取得用戶通知偏好\n      const preferences = await NotificationPreference.findByUserId(options.userId);\n      if (!preferences) {\n        throw new Error('找不到用戶通知偏好設定');\n      }\n\n      // 檢查是否應該發送通知\n      if (!this.shouldSendNotification(preferences, options.type, options.priority)) {\n        logger.info('根據用戶偏好設定跳過通知', {\n          userId: options.userId,\n          type: options.type,\n          priority: options.priority,\n        });\n        return result;\n      }\n\n      // 創建通知記錄\n      const notification = new Notification({\n        userId: new Types.ObjectId(options.userId),\n        type: options.type,\n        title: options.title,\n        message: options.message,\n        priority: options.priority || NotificationPriority.NORMAL,\n        data: options.data,\n        actionUrl: options.actionUrl,\n        imageUrl: options.imageUrl,\n        channels: {\n          push: {\n            enabled: options.channels?.push !== false && preferences.preferences[options.type]?.push,\n            sent: false,\n          },\n          email: {\n            enabled: options.channels?.email !== false && preferences.preferences[options.type]?.email,\n            sent: false,\n          },\n          inApp: {\n            enabled: options.channels?.inApp !== false && preferences.preferences[options.type]?.inApp,\n            sent: false,\n          },\n        },\n        scheduledAt: options.scheduledAt,\n        expiresAt: options.expiresAt,\n        status: options.scheduledAt ? NotificationStatus.SCHEDULED : NotificationStatus.PENDING,\n      });\n\n      await notification.save();\n      result.notificationId = (notification._id as mongoose.Types.ObjectId).toString();\n\n      // 如果是排程通知，直接返回\n      if (options.scheduledAt && options.scheduledAt > new Date()) {\n        result.success = true;\n        return result;\n      }\n\n      // 發送通知到各個渠道\n      await this.sendToChannels(notification, preferences, result);\n\n      // 更新通知狀態\n      const hasSuccessfulChannel = Object.values(result.channels).some(channel => channel.sent);\n      notification.status = hasSuccessfulChannel ? NotificationStatus.SENT : NotificationStatus.FAILED;\n      notification.sentAt = hasSuccessfulChannel ? new Date() : undefined;\n      await notification.save();\n\n      result.success = hasSuccessfulChannel;\n\n      logger.info('通知發送完成', {\n        userId: options.userId,\n        notificationId: result.notificationId,\n        type: options.type,\n        success: result.success,\n        channels: result.channels,\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('發送通知失敗', {\n        error,\n        userId: options.userId,\n        type: options.type,\n        notificationId: result.notificationId,\n      });\n\n      // 更新通知狀態為失敗\n      if (result.notificationId) {\n        try {\n          await Notification.findByIdAndUpdate(result.notificationId, {\n            status: NotificationStatus.FAILED,\n          });\n        } catch (updateError) {\n          logger.error('更新通知狀態失敗', { updateError, notificationId: result.notificationId });\n        }\n      }\n\n      return result;\n    }\n  }\n\n  /**\n   * 批次發送通知\n   */\n  static async sendBatchNotification(options: BatchNotificationOptions): Promise<BatchNotificationResult> {\n    const result: BatchNotificationResult = {\n      totalUsers: options.userIds.length,\n      successCount: 0,\n      failureCount: 0,\n      results: [],\n      channelStats: {\n        push: { sent: 0, failed: 0 },\n        email: { sent: 0, failed: 0 },\n        inApp: { sent: 0, failed: 0 },\n      },\n    };\n\n    logger.info('開始批次發送通知', {\n      totalUsers: options.userIds.length,\n      type: options.type,\n      title: options.title,\n    });\n\n    // 並行處理，但限制並發數量\n    const concurrency = 10;\n    const chunks = this.chunkArray(options.userIds, concurrency);\n\n    for (const chunk of chunks) {\n      const promises = chunk.map(async (userId) => {\n        try {\n          const notificationResult = await this.sendNotification({\n            ...options,\n            userId,\n          });\n\n          const userResult = {\n            userId,\n            success: notificationResult.success,\n            notificationId: notificationResult.notificationId,\n          };\n\n          if (notificationResult.success) {\n            result.successCount++;\n          } else {\n            result.failureCount++;\n          }\n\n          // 更新渠道統計\n          Object.entries(notificationResult.channels).forEach(([channel, channelResult]) => {\n            const channelKey = channel as keyof typeof result.channelStats;\n            if (channelResult.sent) {\n              result.channelStats[channelKey].sent++;\n            } else {\n              result.channelStats[channelKey].failed++;\n            }\n          });\n\n          result.results.push(userResult);\n          return userResult;\n        } catch (error) {\n          const userResult = {\n            userId,\n            success: false,\n            error: error instanceof Error ? error.message : '未知錯誤',\n          };\n\n          result.failureCount++;\n          result.results.push(userResult);\n          return userResult;\n        }\n      });\n\n      await Promise.all(promises);\n    }\n\n    logger.info('批次通知發送完成', {\n      totalUsers: result.totalUsers,\n      successCount: result.successCount,\n      failureCount: result.failureCount,\n      channelStats: result.channelStats,\n    });\n\n    return result;\n  }\n\n  /**\n   * 發送到各個通知渠道\n   */\n  private static async sendToChannels(\n    notification: INotification,\n    preferences: INotificationPreference,\n    result: NotificationResult\n  ): Promise<void> {\n    const userId = notification.userId.toString();\n\n    // 發送推播通知\n    if (notification.channels.push.enabled) {\n      try {\n        const pushPayload: PushNotificationPayload = {\n          title: notification.title,\n          body: notification.message,\n          data: notification.data,\n          imageUrl: notification.imageUrl,\n          actionUrl: notification.actionUrl,\n          priority: notification.priority,\n          type: notification.type,\n        };\n\n        const allTokens = [...preferences.deviceTokens.fcm, ...preferences.deviceTokens.apns];\n        if (allTokens.length > 0) {\n          const pushResult = await FirebaseService.sendToMultipleDevices(\n            allTokens,\n            pushPayload\n          );\n\n          if (pushResult.successCount > 0) {\n            result.channels.push.sent = true;\n            notification.channels.push.sent = true;\n            notification.channels.push.sentAt = new Date();\n          } else {\n            result.channels.push.error = '所有裝置推播發送失敗';\n          }\n\n          // 清理無效的 token\n          if (pushResult.invalidTokens.length > 0) {\n            await preferences.removeDeviceTokens(pushResult.invalidTokens);\n          }\n        } else {\n          result.channels.push.error = '沒有可用的裝置 token';\n        }\n      } catch (error) {\n        result.channels.push.error = error instanceof Error ? error.message : '推播發送失敗';\n        logger.error('推播通知發送失敗', { error, userId, notificationId: notification._id });\n      }\n    }\n\n    // 發送 Email 通知\n    if (notification.channels.email.enabled) {\n      try {\n        // 這裡需要根據通知類型選擇合適的 Email 模板\n        await EmailService.sendNotificationEmail(\n          preferences.userId.toString(), // 這裡需要用戶的 email 地址\n          notification.title,\n          notification.message,\n          notification.actionUrl || ''\n        );\n\n        result.channels.email.sent = true;\n        notification.channels.email.sent = true;\n        notification.channels.email.sentAt = new Date();\n      } catch (error) {\n        result.channels.email.error = error instanceof Error ? error.message : 'Email 發送失敗';\n        logger.error('Email 通知發送失敗', { error, userId, notificationId: notification._id });\n      }\n    }\n\n    // 發送即時通知\n    if (notification.channels.inApp.enabled) {\n      try {\n        const realtimeData: RealtimeNotificationData = {\n          id: (notification._id as mongoose.Types.ObjectId).toString(),\n          type: notification.type,\n          title: notification.title,\n          message: notification.message,\n          priority: notification.priority,\n          data: notification.data,\n          timestamp: new Date(),\n          actionUrl: notification.actionUrl,\n          imageUrl: notification.imageUrl,\n        };\n\n        const socketResult = await SocketService.sendNotificationToUser(userId, realtimeData);\n        \n        if (socketResult) {\n          result.channels.inApp.sent = true;\n          notification.channels.inApp.sent = true;\n          notification.channels.inApp.sentAt = new Date();\n        } else {\n          result.channels.inApp.error = '即時通知發送失敗';\n        }\n      } catch (error) {\n        result.channels.inApp.error = error instanceof Error ? error.message : '即時通知發送失敗';\n        logger.error('即時通知發送失敗', { error, userId, notificationId: notification._id });\n      }\n    }\n  }\n\n  /**\n   * 檢查是否應該發送通知\n   */\n  private static shouldSendNotification(\n    preferences: INotificationPreference,\n    type: NotificationType,\n    priority?: NotificationPriority\n  ): boolean {\n    // 檢查全域設定\n    if (!preferences.globalSettings.pushEnabled && !preferences.globalSettings.emailEnabled) {\n      return false;\n    }\n\n    // 檢查勿擾時段\n    if (preferences.isQuietTime()) {\n      // 只有緊急通知可以在勿擾時段發送\n      return priority === NotificationPriority.URGENT;\n    }\n\n    // 檢查特定類型的偏好設定\n    const typePreference = preferences.preferences[type];\n    if (!typePreference) {\n      return true; // 如果沒有特定設定，預設允許\n    }\n\n    // 至少要有一個渠道啟用\n    return typePreference.push || typePreference.email || typePreference.inApp;\n  }\n\n  /**\n   * 處理排程通知\n   */\n  static async processScheduledNotifications(): Promise<void> {\n    try {\n      const now = new Date();\n      const scheduledNotifications = await Notification.find({\n        status: NotificationStatus.SCHEDULED,\n        scheduledAt: { $lte: now },\n        $or: [\n          { expiresAt: { $exists: false } },\n          { expiresAt: { $gt: now } },\n        ],\n      }).limit(100); // 限制每次處理的數量\n\n      logger.info('處理排程通知', { count: scheduledNotifications.length });\n\n      for (const notification of scheduledNotifications) {\n        try {\n          // 更新狀態為處理中\n          notification.status = NotificationStatus.PENDING;\n          await notification.save();\n\n          // 重新發送通知\n          const options: NotificationOptions = {\n            userId: notification.userId.toString(),\n            type: notification.type,\n            title: notification.title,\n            message: notification.message,\n            priority: notification.priority,\n            data: notification.data,\n            actionUrl: notification.actionUrl,\n            imageUrl: notification.imageUrl,\n          };\n\n          await this.sendNotification(options);\n        } catch (error) {\n          logger.error('處理排程通知失敗', {\n            error,\n            notificationId: notification._id,\n          });\n\n          // 標記為失敗\n          notification.status = NotificationStatus.FAILED;\n          await notification.save();\n        }\n      }\n    } catch (error) {\n      logger.error('處理排程通知時發生錯誤', { error });\n    }\n  }\n\n  /**\n   * 清理過期通知\n   */\n  static async cleanupExpiredNotifications(): Promise<void> {\n    try {\n      const now = new Date();\n      const result = await Notification.deleteMany({\n        expiresAt: { $lt: now },\n        status: { $in: [NotificationStatus.SCHEDULED, NotificationStatus.PENDING] },\n      });\n\n      if (result.deletedCount > 0) {\n        logger.info('清理過期通知完成', { deletedCount: result.deletedCount });\n      }\n    } catch (error) {\n      logger.error('清理過期通知失敗', { error });\n    }\n  }\n\n  /**\n   * 標記通知為已讀\n   */\n  static async markAsRead(notificationId: string, userId: string): Promise<boolean> {\n    try {\n      const result = await Notification.findOneAndUpdate(\n        {\n          _id: notificationId,\n          userId: new Types.ObjectId(userId),\n          status: NotificationStatus.SENT,\n        },\n        {\n          readAt: new Date(),\n          status: NotificationStatus.READ,\n        }\n      );\n\n      return !!result;\n    } catch (error) {\n      logger.error('標記通知為已讀失敗', { error, notificationId, userId });\n      return false;\n    }\n  }\n\n  /**\n   * 取得用戶未讀通知數量\n   */\n  static async getUnreadCount(userId: string): Promise<number> {\n    try {\n      return await Notification.countDocuments({\n        userId: new Types.ObjectId(userId),\n        status: NotificationStatus.SENT,\n        readAt: { $exists: false },\n      });\n    } catch (error) {\n      logger.error('取得未讀通知數量失敗', { error, userId });\n      return 0;\n    }\n  }\n\n  /**\n   * 取得用戶通知列表\n   */\n  static async getUserNotifications(\n    userId: string,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{ notifications: INotification[]; total: number; hasMore: boolean }> {\n    try {\n      const skip = (page - 1) * limit;\n      \n      const [notifications, total] = await Promise.all([\n        Notification.find({\n          userId: new Types.ObjectId(userId),\n          status: { $in: [NotificationStatus.SENT, NotificationStatus.READ] },\n        })\n          .sort({ createdAt: -1 })\n          .skip(skip)\n          .limit(limit)\n          .lean(),\n        Notification.countDocuments({\n          userId: new Types.ObjectId(userId),\n          status: { $in: [NotificationStatus.SENT, NotificationStatus.READ] },\n        }),\n      ]);\n\n      const hasMore = skip + notifications.length < total;\n\n      return { notifications, total, hasMore };\n    } catch (error) {\n      logger.error('取得用戶通知列表失敗', { error, userId });\n      return { notifications: [], total: 0, hasMore: false };\n    }\n  }\n\n  /**\n   * 將陣列分割成指定大小的塊\n   */\n  private static chunkArray<T>(array: T[], size: number): T[][] {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += size) {\n      chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n  }\n\n  /**\n   * 取得通知統計資訊\n   */\n  static async getNotificationStats(userId?: string): Promise<{\n    total: number;\n    sent: number;\n    read: number;\n    failed: number;\n    byType: Record<NotificationType, number>;\n    byPriority: Record<NotificationPriority, number>;\n  }> {\n    try {\n      const matchCondition = userId ? { userId: new Types.ObjectId(userId) } : {};\n      \n      const [stats] = await Notification.aggregate([\n        { $match: matchCondition },\n        {\n          $group: {\n            _id: null,\n            total: { $sum: 1 },\n            sent: {\n              $sum: {\n                $cond: [{ $eq: ['$status', NotificationStatus.SENT] }, 1, 0],\n              },\n            },\n            read: {\n              $sum: {\n                $cond: [{ $eq: ['$status', NotificationStatus.READ] }, 1, 0],\n              },\n            },\n            failed: {\n              $sum: {\n                $cond: [{ $eq: ['$status', NotificationStatus.FAILED] }, 1, 0],\n              },\n            },\n            byType: {\n              $push: '$type',\n            },\n            byPriority: {\n              $push: '$priority',\n            },\n          },\n        },\n      ]);\n\n      if (!stats) {\n        return {\n          total: 0,\n          sent: 0,\n          read: 0,\n          failed: 0,\n          byType: {} as Record<NotificationType, number>,\n          byPriority: {} as Record<NotificationPriority, number>,\n        };\n      }\n\n      // 統計各類型和優先級的數量\n      const byType = stats.byType.reduce((acc: Record<string, number>, type: string) => {\n        acc[type] = (acc[type] || 0) + 1;\n        return acc;\n      }, {});\n\n      const byPriority = stats.byPriority.reduce((acc: Record<string, number>, priority: string) => {\n        acc[priority] = (acc[priority] || 0) + 1;\n        return acc;\n      }, {});\n\n      return {\n        total: stats.total,\n        sent: stats.sent,\n        read: stats.read,\n        failed: stats.failed,\n        byType,\n        byPriority,\n      };\n    } catch (error) {\n      logger.error('取得通知統計失敗', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 啟動排程任務\n   */\n  static startScheduledTasks(): void {\n    // 每分鐘檢查排程通知\n    setInterval(async () => {\n      try {\n        await this.processScheduledNotifications();\n      } catch (error) {\n        logger.error('處理排程通知任務失敗', { error });\n      }\n    }, 60000); // 1分鐘\n\n    // 每小時清理過期通知\n    setInterval(async () => {\n      try {\n        await this.cleanupExpiredNotifications();\n      } catch (error) {\n        logger.error('清理過期通知任務失敗', { error });\n      }\n    }, 3600000); // 1小時\n\n    logger.info('通知排程任務已啟動');\n  }\n\n  /**\n   * 停止排程任務\n   */\n  static stopScheduledTasks(): void {\n    // 這裡可以實現停止定時器的邏輯\n    logger.info('通知排程任務已停止');\n  }\n}"],"version":3}