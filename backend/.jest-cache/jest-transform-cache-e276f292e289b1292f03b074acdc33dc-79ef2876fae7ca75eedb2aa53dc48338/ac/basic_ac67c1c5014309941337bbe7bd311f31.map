{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\basic.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\basic.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { IUser } from \"../../models/User\";\nimport { UserRepository } from \"../../repositories/UserRepository\";\nimport {\n  ValidationError,\n  NotFoundError,\n  ConflictError,\n} from \"../../utils/errors\";\nimport { logger } from \"../../utils/logger\";\nimport { validateEmail, validatePassword } from \"../../utils/validation\";\n\n// 介面定義\nexport interface RegisterUserData {\n  name: string;\n  email: string;\n  password: string;\n  phone?: string;\n}\n\nexport interface LoginUserData {\n  email: string;\n  password: string;\n}\n\nexport interface UpdateUserData {\n  name?: string;\n  phone?: string;\n  avatar?: string;\n  location?: {\n    address: string;\n    coordinates: [number, number];\n  };\n}\n\n/**\n * 基本用戶服務 - 處理註冊、登入、基本CRUD操作\n */\nexport class BasicUserService {\n  private userRepository: UserRepository;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n  }\n\n  /**\n   * 用戶註冊\n   */\n  async register(userData: RegisterUserData): Promise<{\n    user: IUser;\n    token: string;\n  }> {\n    try {\n      const { name, email, password, phone } = userData;\n\n      // 驗證輸入\n      if (!name || !email || !password) {\n        throw new ValidationError(\"姓名、郵箱和密碼為必填項\");\n      }\n\n      if (!validateEmail(email)) {\n        throw new ValidationError(\"郵箱格式不正確\");\n      }\n\n      if (!validatePassword(password)) {\n        throw new ValidationError(\"密碼必須至少8位，包含字母和數字\");\n      }\n\n      // 檢查郵箱是否已存在\n      const existingUser = await this.userRepository.findByEmail(email);\n      if (existingUser) {\n        throw new ConflictError(\"該郵箱已被註冊\");\n      }\n\n      // 創建用戶\n      const user = await this.userRepository.create({\n        name,\n        email,\n        password,\n        phone,\n      });\n\n      // 生成 JWT token\n      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET!, {\n        expiresIn: \"7d\",\n      });\n\n      logger.info(\"用戶註冊成功\", { userId: user._id, email });\n\n      return { user, token };\n    } catch (error) {\n      logger.error(\"用戶註冊失敗\", {\n        error,\n        userData: { ...userData, password: \"[HIDDEN]\" },\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 用戶登入\n   */\n  async login(loginData: LoginUserData): Promise<{\n    user: IUser;\n    token: string;\n  }> {\n    try {\n      const { email, password } = loginData;\n\n      // 驗證輸入\n      if (!email || !password) {\n        throw new ValidationError(\"郵箱和密碼為必填項\");\n      }\n\n      // 查找用戶\n      const user = await this.userRepository.findByEmailWithPassword(email);\n      if (!user) {\n        throw new ValidationError(\"郵箱或密碼錯誤\");\n      }\n\n      // 檢查帳號狀態\n      if (!user.isActive) {\n        throw new ValidationError(\"帳號已被停用，請聯繫管理員\");\n      }\n\n      // 驗證密碼\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      if (!isPasswordValid) {\n        throw new ValidationError(\"郵箱或密碼錯誤\");\n      }\n\n      // 更新最後登入時間\n      await this.userRepository.updateLastLogin(user._id.toString());\n\n      // 生成 JWT token\n      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET!, {\n        expiresIn: \"7d\",\n      });\n\n      // 移除密碼字段\n      const userWithoutPassword = user.toObject();\n      delete userWithoutPassword.password;\n\n      logger.info(\"用戶登入成功\", { userId: user._id, email });\n\n      return { user: userWithoutPassword as IUser, token };\n    } catch (error) {\n      logger.error(\"用戶登入失敗\", { error, email: loginData.email });\n      throw error;\n    }\n  }\n\n  /**\n   * 根據 ID 獲取用戶\n   */\n  async getUserById(userId: string): Promise<IUser> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      return user;\n    } catch (error) {\n      logger.error(\"獲取用戶失敗\", { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 根據郵箱獲取用戶\n   */\n  async getUserByEmail(email: string): Promise<IUser | null> {\n    try {\n      if (!validateEmail(email)) {\n        throw new ValidationError(\"郵箱格式不正確\");\n      }\n\n      const user = await this.userRepository.findByEmail(email);\n      return user;\n    } catch (error) {\n      logger.error(\"根據郵箱獲取用戶失敗\", { error, email });\n      throw error;\n    }\n  }\n\n  /**\n   * 更新用戶資料\n   */\n  async updateUser(userId: string, updateData: UpdateUserData): Promise<IUser> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      // 檢查用戶是否存在\n      const existingUser = await this.userRepository.findById(userId);\n      if (!existingUser) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      // 驗證更新數據\n      const updateFields: any = {};\n      if (updateData.name !== undefined) {\n        if (!updateData.name.trim()) {\n          throw new ValidationError(\"姓名不能為空\");\n        }\n        updateFields.name = updateData.name.trim();\n      }\n\n      if (updateData.phone !== undefined) {\n        updateFields.phone = updateData.phone;\n      }\n\n      if (updateData.avatar !== undefined) {\n        updateFields.avatar = updateData.avatar;\n      }\n\n      if (updateData.location !== undefined) {\n        updateFields.location = updateData.location;\n      }\n\n      // 更新用戶\n      const updatedUser = await this.userRepository.updateWithValidation(\n        userId,\n        updateFields,\n      );\n\n      if (!updatedUser) {\n        throw new NotFoundError(\"更新失敗，用戶不存在\");\n      }\n\n      logger.info(\"用戶資料更新成功\", { userId, updateData });\n\n      return updatedUser;\n    } catch (error) {\n      logger.error(\"更新用戶資料失敗\", { error, userId, updateData });\n      throw error;\n    }\n  }\n\n  /**\n   * 停用用戶帳號\n   */\n  async deactivateUser(userId: string): Promise<void> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      await this.userRepository.updateWithValidation(userId, {\n        isActive: false,\n      });\n\n      logger.info(\"用戶帳號停用成功\", { userId });\n    } catch (error) {\n      logger.error(\"停用用戶帳號失敗\", { error, userId });\n      throw error;\n    }\n  }\n}\n"],"version":3}