84089f8a4a81fb71d44d40e9d6189a5a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicUserService = void 0;
const mongoose_1 = __importDefault(require("mongoose"));
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const UserRepository_1 = require("../../repositories/UserRepository");
const errors_1 = require("../../utils/errors");
const logger_1 = require("../../utils/logger");
const validation_1 = require("../../utils/validation");
/**
 * 基本用戶服務 - 處理註冊、登入、基本CRUD操作
 */
class BasicUserService {
    constructor() {
        this.userRepository = new UserRepository_1.UserRepository();
    }
    /**
     * 用戶註冊
     */
    async register(userData) {
        try {
            const { name, email, password, phone } = userData;
            // 驗證輸入
            if (!name || !email || !password) {
                throw new errors_1.ValidationError("姓名、郵箱和密碼為必填項");
            }
            if (!(0, validation_1.validateEmail)(email)) {
                throw new errors_1.ValidationError("郵箱格式不正確");
            }
            if (!(0, validation_1.validatePassword)(password)) {
                throw new errors_1.ValidationError("密碼必須至少8位，包含字母和數字");
            }
            // 檢查郵箱是否已存在
            const existingUser = await this.userRepository.findByEmail(email);
            if (existingUser) {
                throw new errors_1.ConflictError("該郵箱已被註冊");
            }
            // 創建用戶
            const user = await this.userRepository.create({
                name,
                email,
                password,
                phone,
            });
            // 生成 JWT token
            const token = jsonwebtoken_1.default.sign({ userId: user._id }, process.env.JWT_SECRET, {
                expiresIn: "7d",
            });
            logger_1.logger.info("用戶註冊成功", { userId: user._id, email });
            return { user, token };
        }
        catch (error) {
            logger_1.logger.error("用戶註冊失敗", {
                error,
                userData: { ...userData, password: "[HIDDEN]" },
            });
            throw error;
        }
    }
    /**
     * 用戶登入
     */
    async login(loginData) {
        try {
            const { email, password } = loginData;
            // 驗證輸入
            if (!email || !password) {
                throw new errors_1.ValidationError("郵箱和密碼為必填項");
            }
            // 查找用戶
            const user = await this.userRepository.findByEmailWithPassword(email);
            if (!user) {
                throw new errors_1.ValidationError("郵箱或密碼錯誤");
            }
            // 檢查帳號狀態
            if (!user.isActive) {
                throw new errors_1.ValidationError("帳號已被停用，請聯繫管理員");
            }
            // 驗證密碼
            const isPasswordValid = await bcryptjs_1.default.compare(password, user.password);
            if (!isPasswordValid) {
                throw new errors_1.ValidationError("郵箱或密碼錯誤");
            }
            // 更新最後登入時間
            await this.userRepository.updateLastLogin(user._id.toString());
            // 生成 JWT token
            const token = jsonwebtoken_1.default.sign({ userId: user._id }, process.env.JWT_SECRET, {
                expiresIn: "7d",
            });
            // 移除密碼字段
            const userWithoutPassword = user.toObject();
            delete userWithoutPassword.password;
            logger_1.logger.info("用戶登入成功", { userId: user._id, email });
            return { user: userWithoutPassword, token };
        }
        catch (error) {
            logger_1.logger.error("用戶登入失敗", { error, email: loginData.email });
            throw error;
        }
    }
    /**
     * 根據 ID 獲取用戶
     */
    async getUserById(userId) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
                throw new errors_1.ValidationError("無效的用戶 ID");
            }
            const user = await this.userRepository.findById(userId);
            if (!user) {
                throw new errors_1.NotFoundError("用戶不存在");
            }
            return user;
        }
        catch (error) {
            logger_1.logger.error("獲取用戶失敗", { error, userId });
            throw error;
        }
    }
    /**
     * 根據郵箱獲取用戶
     */
    async getUserByEmail(email) {
        try {
            if (!(0, validation_1.validateEmail)(email)) {
                throw new errors_1.ValidationError("郵箱格式不正確");
            }
            const user = await this.userRepository.findByEmail(email);
            return user;
        }
        catch (error) {
            logger_1.logger.error("根據郵箱獲取用戶失敗", { error, email });
            throw error;
        }
    }
    /**
     * 更新用戶資料
     */
    async updateUser(userId, updateData) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
                throw new errors_1.ValidationError("無效的用戶 ID");
            }
            // 檢查用戶是否存在
            const existingUser = await this.userRepository.findById(userId);
            if (!existingUser) {
                throw new errors_1.NotFoundError("用戶不存在");
            }
            // 驗證更新數據
            const updateFields = {};
            if (updateData.name !== undefined) {
                if (!updateData.name.trim()) {
                    throw new errors_1.ValidationError("姓名不能為空");
                }
                updateFields.name = updateData.name.trim();
            }
            if (updateData.phone !== undefined) {
                updateFields.phone = updateData.phone;
            }
            if (updateData.avatar !== undefined) {
                updateFields.avatar = updateData.avatar;
            }
            if (updateData.location !== undefined) {
                updateFields.location = updateData.location;
            }
            // 更新用戶
            const updatedUser = await this.userRepository.updateWithValidation(userId, updateFields);
            if (!updatedUser) {
                throw new errors_1.NotFoundError("更新失敗，用戶不存在");
            }
            logger_1.logger.info("用戶資料更新成功", { userId, updateData });
            return updatedUser;
        }
        catch (error) {
            logger_1.logger.error("更新用戶資料失敗", { error, userId, updateData });
            throw error;
        }
    }
    /**
     * 停用用戶帳號
     */
    async deactivateUser(userId) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
                throw new errors_1.ValidationError("無效的用戶 ID");
            }
            const user = await this.userRepository.findById(userId);
            if (!user) {
                throw new errors_1.NotFoundError("用戶不存在");
            }
            await this.userRepository.updateWithValidation(userId, {
                isActive: false,
            });
            logger_1.logger.info("用戶帳號停用成功", { userId });
        }
        catch (error) {
            logger_1.logger.error("停用用戶帳號失敗", { error, userId });
            throw error;
        }
    }
}
exports.BasicUserService = BasicUserService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,