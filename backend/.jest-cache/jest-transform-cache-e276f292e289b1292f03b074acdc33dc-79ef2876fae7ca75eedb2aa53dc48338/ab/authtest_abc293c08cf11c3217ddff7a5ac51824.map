{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\auth.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\auth.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { User } from '../../src/models/User';\nimport { authRoutes } from '../../src/routes/auth';\nimport { config } from '../../src/config/environment';\nimport { errorHandler } from '../../src/middleware/error-handler';\nimport { validUserData, ERROR_MESSAGES } from '../utils/testData';\n\n// 創建測試應用\nconst app = express();\napp.use(express.json());\napp.use('/api/auth', authRoutes);\napp.use(errorHandler);\n\ndescribe('Auth Routes', () => {\n\n  afterEach(async () => {\n    await User.deleteMany({});\n  });\n\n  describe('POST /api/auth/register', () => {\n    it('should register a new user', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(validUserData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user).toBeDefined();\n      expect(response.body.data.user.email).toBe(validUserData.email);\n      expect(response.body.data.user.name).toBe(validUserData.name);\n      expect(response.body.data.user.password).toBeUndefined(); // 密碼不應該返回\n    });\n\n    it('should not register user with existing email', async () => {\n      // 先註冊一個用戶\n      await new User(validUserData).save();\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(validUserData)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain(ERROR_MESSAGES.EMAIL_ALREADY_EXISTS);\n    });\n\n    it('should not register user with invalid email', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          ...validUserData,\n          email: 'invalid-email'\n        })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('驗證失敗');\n    });\n\n    it('should not register user with missing required fields', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: validUserData.email\n          // 缺少其他必需字段\n        })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should not register user with weak password', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          ...validUserData,\n          password: '123' // 弱密碼\n        })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('輸入資料驗證失敗');\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    beforeEach(async () => {\n      await new User(validUserData).save();\n    });\n\n    it('should login with valid credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: validUserData.email,\n          password: validUserData.password\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user).toBeDefined();\n      expect(response.body.data.user.email).toBe(validUserData.email);\n      expect(response.body.data.token).toBeDefined();\n      expect(response.body.data.user.password).toBeUndefined();\n    });\n\n    it('should not login with invalid email', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'nonexistent@example.com',\n          password: validUserData.password\n        })\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain(ERROR_MESSAGES.INVALID_CREDENTIALS);\n    });\n\n    it('should not login with invalid password', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: validUserData.email,\n          password: 'wrongpassword'\n        })\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain(ERROR_MESSAGES.INVALID_CREDENTIALS);\n    });\n\n    it('should not login with missing credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({})\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('POST /api/auth/forgot-password', () => {\n    beforeEach(async () => {\n      await new User(validUserData).save();\n    });\n\n    it('should send password reset email for valid email', async () => {\n      const response = await request(app)\n        .post('/api/auth/forgot-password')\n        .send({ email: validUserData.email })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain(ERROR_MESSAGES.PASSWORD_RESET_SUCCESS);\n    });\n\n    it('should return success message for non-existent email (security)', async () => {\n      const response = await request(app)\n        .post('/api/auth/forgot-password')\n        .send({ email: 'nonexistent@example.com' })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('電子郵件地址');\n    });\n\n    it('should not send reset email with invalid email format', async () => {\n      const response = await request(app)\n        .post('/api/auth/forgot-password')\n        .send({ email: 'invalid-email' })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('POST /api/auth/reset-password', () => {\n    let user: any;\n    let resetToken: string;\n\n    beforeEach(async () => {\n      user = await new User(validUserData).save();\n      user.generatePasswordResetToken();\n      resetToken = user.passwordResetToken;\n      await user.save();\n    });\n\n    it('should reset password with valid token', async () => {\n      const newPassword = 'newpassword123';\n      \n      const response = await request(app)\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken,\n          newPassword: newPassword\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('重設成功');\n      \n      // 驗證可以用新密碼登入\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: validUserData.email,\n          password: newPassword\n        })\n        .expect(200);\n\n      expect(loginResponse.body.success).toBe(true);\n    });\n\n    it('should not reset password with invalid token', async () => {\n      const response = await request(app)\n        .post('/api/auth/reset-password')\n        .send({\n          token: 'invalid-token',\n          newPassword: 'newpassword123'\n        })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('密碼重設令牌無效或已過期');\n    });\n\n    it('should not reset password with weak password', async () => {\n      const response = await request(app)\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken,\n          newPassword: '123' // 弱密碼\n        })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('輸入資料驗證失敗');\n    });\n  });\n\n  describe('POST /api/auth/verify-email', () => {\n    let user: any;\n    let verificationToken: string;\n\n    beforeEach(async () => {\n      user = await new User(validUserData).save();\n      user.generateEmailVerificationToken();\n      verificationToken = user.emailVerificationToken;\n      await user.save();\n    });\n\n    it('should verify email with valid token', async () => {\n      const response = await request(app)\n        .get(`/api/auth/verify-email/${verificationToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('驗證成功');\n      \n      // 驗證用戶的郵件已被驗證\n      const updatedUser = await User.findById(user._id);\n      expect(updatedUser?.isEmailVerified).toBe(true);\n    });\n\n    it('should not verify email with invalid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/verify-email/invalid-token')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('無效');\n    });\n  });\n\n  describe('GET /api/auth/me', () => {\n    let user: any;\n    let authToken: string;\n\n    beforeEach(async () => {\n      user = await new User(validUserData).save();\n      authToken = user.generateAuthToken();\n    });\n\n    it('should get current user with valid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user).toBeDefined();\n      expect(response.body.data.user.email).toBe(validUserData.email);\n      expect(response.body.data.user.password).toBeUndefined();\n    });\n\n    it('should not get user without token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('認證令牌');\n    });\n\n    it('should not get user with invalid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('無效');\n    });\n  });\n\n  describe('POST /api/auth/logout', () => {\n    let user: any;\n    let authToken: string;\n\n    beforeEach(async () => {\n      user = await new User(validUserData).save();\n      authToken = user.generateAuthToken();\n    });\n\n    it('should logout successfully', async () => {\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('登出成功');\n    });\n\n    it('should not logout without token', async () => {\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('認證令牌');\n    });\n  });\n});"],"version":3}