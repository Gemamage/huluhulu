{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\cacheService.ts","mappings":";;;AAAA,qBAAqB;AACrB,4CAAyC;AAsBzC,MAAa,YAAY;IAOvB,YAAoB,MAA6B;QALzC,UAAK,GAAG,IAAI,GAAG,EAA0B,CAAC;QAC1C,oBAAe,GAAG,IAAI,GAAG,EAA+B,CAAC;QAEzD,iBAAY,GAA0B,IAAI,CAAC;QAGjD,IAAI,CAAC,MAAM,GAAG;YACZ,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,MAAM;YACjC,OAAO,EAAE,IAAI,EAAE,cAAc;YAC7B,eAAe,EAAE,EAAE,GAAG,IAAI,EAAE,UAAU;YACtC,GAAG,MAAM;SACV,CAAC;QAEF,SAAS;QACT,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,WAAW,CAAC,MAA6B;QAC9C,iBAAiB;QACjB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,IAAI,MAAM,EAAE,CAAC;YAC9C,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC3B,YAAY,CAAC,QAAQ,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,YAAY,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,aAAa;QAClB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE,CAAC;YACpC,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC;gBAC1B,YAAY,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;YACtC,CAAC;YACD,YAAY,CAAC,QAAQ,GAAG,IAAW,CAAC;QACtC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,MAAc,EAAE,MAAa;QAC/C,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAC9B,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CACtD,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,OAAO,GAAG,MAAM,IAAI,QAAQ,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,IAAoB;QACpC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,GAAG,CAAI,GAAW;QAChB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACvB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,eAAM,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,GAAG,CAAI,GAAW,EAAE,IAAO,EAAE,GAAY;QACvC,WAAW;QACX,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;YACnE,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;QAED,MAAM,IAAI,GAAiB;YACzB,IAAI;YACJ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,GAAG,EAAE,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU;SACnC,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC1B,eAAM,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,GAAW;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,OAAO,EAAE,CAAC;YACZ,eAAM,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;QAC/B,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,eAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACb,QAAgB,EAChB,aAA+B,EAC/B,GAAY;QAEZ,OAAO;QACP,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAI,QAAQ,CAAC,CAAC;QACrC,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;YACpB,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,uBAAuB;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE,CAAC;YACZ,eAAM,CAAC,KAAK,CAAC,SAAS,QAAQ,EAAE,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC,OAAO,CAAC;QACzB,CAAC;QAED,QAAQ;QACR,MAAM,OAAO,GAAG,aAAa,EAAE,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE;YACjC,OAAO;YACP,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC;YAC7B,UAAU;YACV,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;YAChC,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,aAAa,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,aAAa;YACb,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,OAAe;QAC3B,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;QAElC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;YACpC,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,YAAY,EAAE,CAAC;YACjB,CAAC;QACH,CAAC;QAED,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;YACrB,eAAM,CAAC,KAAK,CAAC,WAAW,YAAY,MAAM,CAAC,CAAC;QAC9C,CAAC;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACK,WAAW;QACjB,IAAI,SAAS,GAAkB,IAAI,CAAC;QACpC,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE5B,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;YAC/C,IAAI,IAAI,CAAC,SAAS,GAAG,UAAU,EAAE,CAAC;gBAChC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC5B,SAAS,GAAG,GAAG,CAAC;YAClB,CAAC;QACH,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC7B,eAAM,CAAC,KAAK,CAAC,WAAW,SAAS,EAAE,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,OAAO;QACb,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,SAAS;QACT,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;YAC/C,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,YAAY,EAAE,CAAC;YACjB,CAAC;QACH,CAAC;QAED,oBAAoB;QACpB,KAAK,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC;YAC5D,IAAI,GAAG,GAAG,OAAO,CAAC,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;gBAC5C,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;QAED,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;YACrB,eAAM,CAAC,KAAK,CAAC,WAAW,YAAY,MAAM,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED;;OAEG;IACK,YAAY;QAClB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;YACnC,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,WAAW;QACT,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC3B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,QAAQ;QAMN,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC1B,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI;YAC1C,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YAC5B,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;SACnC,CAAC;IACJ,CAAC;CACF;AAxQD,oCAwQC;AAED,SAAS;AACI,QAAA,YAAY,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;AAEvD,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\cacheService.ts"],"sourcesContent":["// 快取服務 - 提供請求快取和去重功能\nimport { logger } from '../utils/logger';\n\n// 快取項目介面\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  ttl: number; // 存活時間（毫秒）\n}\n\n// 進行中的請求追蹤\ninterface PendingRequest<T> {\n  promise: Promise<T>;\n  timestamp: number;\n}\n\n// 快取配置\ninterface CacheConfig {\n  defaultTTL: number; // 預設快取時間（毫秒）\n  maxSize: number; // 最大快取項目數量\n  cleanupInterval: number; // 清理間隔（毫秒）\n}\n\nexport class CacheService {\n  private static instance: CacheService;\n  private cache = new Map<string, CacheItem<any>>();\n  private pendingRequests = new Map<string, PendingRequest<any>>();\n  private config: CacheConfig;\n  private cleanupTimer: NodeJS.Timeout | null = null;\n\n  private constructor(config?: Partial<CacheConfig>) {\n    this.config = {\n      defaultTTL: 5 * 60 * 1000, // 5分鐘\n      maxSize: 1000, // 最多1000個快取項目\n      cleanupInterval: 60 * 1000, // 每分鐘清理一次\n      ...config\n    };\n\n    // 啟動定期清理\n    this.startCleanup();\n  }\n\n  /**\n   * 獲取快取服務實例（單例模式）\n   */\n  static getInstance(config?: Partial<CacheConfig>): CacheService {\n    // 在測試環境中，允許創建新實例\n    if (process.env.NODE_ENV === 'test' && config) {\n      return new CacheService(config);\n    }\n    \n    if (!CacheService.instance) {\n      CacheService.instance = new CacheService(config);\n    }\n    return CacheService.instance;\n  }\n\n  /**\n   * 重置單例實例（僅用於測試）\n   */\n  static resetInstance(): void {\n    if (process.env.NODE_ENV === 'test') {\n      if (CacheService.instance) {\n        CacheService.instance.stopCleanup();\n      }\n      CacheService.instance = null as any;\n    }\n  }\n\n  /**\n   * 生成快取鍵\n   */\n  private generateKey(prefix: string, params: any[]): string {\n    const paramStr = params.map(p => \n      typeof p === 'object' ? JSON.stringify(p) : String(p)\n    ).join('|');\n    return `${prefix}:${paramStr}`;\n  }\n\n  /**\n   * 檢查快取項目是否過期\n   */\n  private isExpired(item: CacheItem<any>): boolean {\n    return Date.now() - item.timestamp > item.ttl;\n  }\n\n  /**\n   * 獲取快取資料\n   */\n  get<T>(key: string): T | null {\n    const item = this.cache.get(key);\n    if (!item) {\n      return null;\n    }\n\n    if (this.isExpired(item)) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    logger.debug(`快取命中: ${key}`);\n    return item.data;\n  }\n\n  /**\n   * 設置快取資料\n   */\n  set<T>(key: string, data: T, ttl?: number): void {\n    // 檢查快取大小限制\n    if (this.cache.size >= this.config.maxSize && !this.cache.has(key)) {\n      this.evictOldest();\n    }\n\n    const item: CacheItem<T> = {\n      data,\n      timestamp: Date.now(),\n      ttl: ttl || this.config.defaultTTL\n    };\n\n    this.cache.set(key, item);\n    logger.debug(`快取設置: ${key}`);\n  }\n\n  /**\n   * 刪除快取項目\n   */\n  delete(key: string): boolean {\n    const deleted = this.cache.delete(key);\n    if (deleted) {\n      logger.debug(`快取刪除: ${key}`);\n    }\n    return deleted;\n  }\n\n  /**\n   * 清空所有快取\n   */\n  clear(): void {\n    this.cache.clear();\n    this.pendingRequests.clear();\n    logger.info('所有快取已清空');\n  }\n\n  /**\n   * 帶快取的函數執行（包含請求去重）\n   */\n  async withCache<T>(\n    cacheKey: string,\n    asyncFunction: () => Promise<T>,\n    ttl?: number\n  ): Promise<T> {\n    // 檢查快取\n    const cached = this.get<T>(cacheKey);\n    if (cached !== null) {\n      return cached;\n    }\n\n    // 檢查是否有相同的請求正在進行（請求去重）\n    const pending = this.pendingRequests.get(cacheKey);\n    if (pending) {\n      logger.debug(`請求去重: ${cacheKey}`);\n      return pending.promise;\n    }\n\n    // 執行新請求\n    const promise = asyncFunction();\n    this.pendingRequests.set(cacheKey, {\n      promise,\n      timestamp: Date.now()\n    });\n\n    try {\n      const result = await promise;\n      // 將結果存入快取\n      this.set(cacheKey, result, ttl);\n      return result;\n    } catch (error) {\n      logger.error(`快取函數執行失敗: ${cacheKey}`, error);\n      throw error;\n    } finally {\n      // 清除進行中的請求記錄\n      this.pendingRequests.delete(cacheKey);\n    }\n  }\n\n  /**\n   * 批量刪除快取（支援模式匹配）\n   */\n  deletePattern(pattern: string): number {\n    let deletedCount = 0;\n    const regex = new RegExp(pattern);\n    \n    for (const key of this.cache.keys()) {\n      if (regex.test(key)) {\n        this.cache.delete(key);\n        deletedCount++;\n      }\n    }\n\n    if (deletedCount > 0) {\n      logger.debug(`批量刪除快取: ${deletedCount} 個項目`);\n    }\n    return deletedCount;\n  }\n\n  /**\n   * 移除最舊的快取項目\n   */\n  private evictOldest(): void {\n    let oldestKey: string | null = null;\n    let oldestTime = Date.now();\n\n    for (const [key, item] of this.cache.entries()) {\n      if (item.timestamp < oldestTime) {\n        oldestTime = item.timestamp;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n      logger.debug(`移除最舊快取: ${oldestKey}`);\n    }\n  }\n\n  /**\n   * 清理過期的快取項目\n   */\n  private cleanup(): void {\n    let cleanedCount = 0;\n    const now = Date.now();\n\n    // 清理過期快取\n    for (const [key, item] of this.cache.entries()) {\n      if (this.isExpired(item)) {\n        this.cache.delete(key);\n        cleanedCount++;\n      }\n    }\n\n    // 清理過期的進行中請求（超過5分鐘）\n    for (const [key, pending] of this.pendingRequests.entries()) {\n      if (now - pending.timestamp > 5 * 60 * 1000) {\n        this.pendingRequests.delete(key);\n      }\n    }\n\n    if (cleanedCount > 0) {\n      logger.debug(`清理過期快取: ${cleanedCount} 個項目`);\n    }\n  }\n\n  /**\n   * 啟動定期清理\n   */\n  private startCleanup(): void {\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup();\n    }, this.config.cleanupInterval);\n  }\n\n  /**\n   * 停止定期清理\n   */\n  stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n  }\n\n  /**\n   * 獲取快取統計資訊\n   */\n  getStats(): {\n    cacheSize: number;\n    pendingRequests: number;\n    maxSize: number;\n    defaultTTL: number;\n  } {\n    return {\n      cacheSize: this.cache.size,\n      pendingRequests: this.pendingRequests.size,\n      maxSize: this.config.maxSize,\n      defaultTTL: this.config.defaultTTL\n    };\n  }\n}\n\n// 預設快取實例\nexport const cacheService = CacheService.getInstance();\n\nconsole.log('✅ CacheService 已載入');"],"version":3}