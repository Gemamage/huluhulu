{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\admin.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\admin.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { IUser } from \"../../models/User\";\nimport { UserRepository } from \"../../repositories/UserRepository\";\nimport { ValidationError, NotFoundError } from \"../../utils/errors\";\nimport { logger } from \"../../utils/logger\";\n\n// 介面定義\nexport interface AdminUpdateUserData {\n  name?: string;\n  phone?: string;\n  role?: \"user\" | \"admin\";\n  isActive?: boolean;\n}\n\nexport interface UserQueryOptions {\n  page?: number;\n  limit?: number;\n  search?: string;\n  role?: \"user\" | \"admin\";\n  isActive?: boolean;\n  isEmailVerified?: boolean;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n}\n\n/**\n * 管理員用戶服務 - 處理管理員相關的用戶管理功能\n */\nexport class AdminUserService {\n  private userRepository: UserRepository;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n  }\n\n  /**\n   * 管理員獲取用戶列表（帶篩選和分頁）\n   */\n  async getAdminUserList(options: UserQueryOptions = {}): Promise<{\n    users: IUser[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        search,\n        role,\n        isActive,\n        isEmailVerified,\n      } = options;\n\n      // 構建查詢條件\n      const filter: any = {};\n\n      if (search) {\n        filter.$or = [\n          { name: { $regex: search, $options: \"i\" } },\n          { email: { $regex: search, $options: \"i\" } },\n        ];\n      }\n\n      if (role) filter.role = role;\n      if (isActive !== undefined) filter.isActive = isActive;\n      if (isEmailVerified !== undefined)\n        filter.isEmailVerified = isEmailVerified;\n\n      // 執行查詢\n      const skip = (Number(page) - 1) * Number(limit);\n      const selectFields =\n        \"-password -passwordResetToken -passwordResetExpires -emailVerificationToken -emailVerificationExpires\";\n\n      const [users, total] = await Promise.all([\n        this.userRepository.findWithSelect(filter, selectFields, {\n          sort: { createdAt: -1 },\n          skip,\n          limit: Number(limit),\n        }),\n        this.userRepository.countDocuments(filter),\n      ]);\n\n      const totalPages = Math.ceil(total / Number(limit));\n\n      return {\n        users,\n        total,\n        page: Number(page),\n        limit: Number(limit),\n        totalPages,\n      };\n    } catch (error) {\n      logger.error(\"管理員獲取用戶列表失敗\", { error, options });\n      throw error;\n    }\n  }\n\n  /**\n   * 管理員獲取單個用戶詳情\n   */\n  async getAdminUserById(userId: string): Promise<IUser> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      const selectFields =\n        \"-password -passwordResetToken -passwordResetExpires -emailVerificationToken -emailVerificationExpires\";\n      const user = await this.userRepository.findByIdWithSelect(\n        userId,\n        selectFields,\n      );\n\n      if (!user) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      return user;\n    } catch (error) {\n      logger.error(\"管理員獲取用戶詳情失敗\", { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 管理員更新用戶資料\n   */\n  async adminUpdateUser(\n    userId: string,\n    updateData: AdminUpdateUserData,\n    adminUser: IUser,\n  ): Promise<IUser> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      // 檢查目標用戶是否存在\n      const targetUser = await this.userRepository.findById(userId);\n      if (!targetUser) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      // 防止管理員修改自己的角色或狀態\n      if (targetUser._id.toString() === adminUser._id.toString()) {\n        if (\n          updateData.role !== undefined ||\n          updateData.isActive !== undefined\n        ) {\n          throw new ValidationError(\"不能修改自己的角色或帳號狀態\");\n        }\n      }\n\n      // 只有超級管理員可以設置管理員角色\n      if (updateData.role === \"admin\" && adminUser.role !== \"admin\") {\n        throw new ValidationError(\"只有超級管理員可以設置管理員角色\");\n      }\n\n      // 更新用戶資料\n      const updateFields: any = {};\n      if (updateData.name !== undefined) updateFields.name = updateData.name;\n      if (updateData.phone !== undefined) updateFields.phone = updateData.phone;\n      if (updateData.role !== undefined) updateFields.role = updateData.role;\n      if (updateData.isActive !== undefined)\n        updateFields.isActive = updateData.isActive;\n\n      const updatedUser = await this.userRepository.updateWithValidation(\n        userId,\n        updateFields,\n      );\n\n      if (!updatedUser) {\n        throw new NotFoundError(\"更新失敗，用戶不存在\");\n      }\n\n      logger.info(\"管理員更新用戶資料成功\", {\n        adminId: adminUser._id,\n        targetUserId: userId,\n        updateData: updateFields,\n      });\n\n      return updatedUser;\n    } catch (error) {\n      logger.error(\"管理員更新用戶資料失敗\", { error, userId, updateData });\n      throw error;\n    }\n  }\n\n  /**\n   * 管理員刪除用戶（軟刪除）\n   */\n  async adminDeleteUser(userId: string, adminUser: IUser): Promise<void> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      // 檢查目標用戶是否存在\n      const targetUser = await this.userRepository.findById(userId);\n      if (!targetUser) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      // 防止管理員刪除自己\n      if (targetUser._id.toString() === adminUser._id.toString()) {\n        throw new ValidationError(\"不能刪除自己的帳號\");\n      }\n\n      // 只有超級管理員可以刪除管理員\n      if (targetUser.role === \"admin\" && adminUser.role !== \"admin\") {\n        throw new ValidationError(\"只有超級管理員可以刪除管理員帳號\");\n      }\n\n      // 軟刪除：將用戶標記為非活躍\n      await this.userRepository.softDelete(userId, targetUser.email);\n\n      logger.info(\"管理員刪除用戶成功\", {\n        adminId: adminUser._id,\n        targetUserId: userId,\n        targetUserEmail: targetUser.email,\n      });\n    } catch (error) {\n      logger.error(\"管理員刪除用戶失敗\", { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 管理員重設用戶密碼\n   */\n  async adminResetUserPassword(\n    userId: string,\n    adminUser: IUser,\n  ): Promise<string> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError(\"無效的用戶 ID\");\n      }\n\n      // 檢查目標用戶是否存在\n      const targetUser = await this.userRepository.findById(userId);\n      if (!targetUser) {\n        throw new NotFoundError(\"用戶不存在\");\n      }\n\n      // 生成臨時密碼\n      const tempPassword = Math.random().toString(36).slice(-8);\n\n      // 更新用戶密碼\n      await this.userRepository.updatePassword(userId, tempPassword);\n\n      logger.info(\"管理員重設用戶密碼成功\", {\n        adminId: adminUser._id,\n        targetUserId: userId,\n      });\n\n      return tempPassword;\n    } catch (error) {\n      logger.error(\"管理員重設用戶密碼失敗\", { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 管理員批量操作用戶\n   */\n  async adminBatchUpdateUsers(\n    userIds: string[],\n    updateData: Partial<AdminUpdateUserData>,\n    adminUser: IUser,\n  ): Promise<{ successCount: number; failedCount: number; errors: string[] }> {\n    try {\n      const results = {\n        successCount: 0,\n        failedCount: 0,\n        errors: [] as string[],\n      };\n\n      for (const userId of userIds) {\n        try {\n          await this.adminUpdateUser(userId, updateData, adminUser);\n          results.successCount++;\n        } catch (error) {\n          results.failedCount++;\n          results.errors.push(`用戶 ${userId}: ${error.message}`);\n        }\n      }\n\n      logger.info(\"管理員批量更新用戶完成\", {\n        adminId: adminUser._id,\n        totalUsers: userIds.length,\n        successCount: results.successCount,\n        failedCount: results.failedCount,\n      });\n\n      return results;\n    } catch (error) {\n      logger.error(\"管理員批量更新用戶失敗\", { error, userIds, updateData });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取系統統計\n   */\n  async getSystemStatistics(): Promise<{\n    users: {\n      total: number;\n      active: number;\n      verified: number;\n      admins: number;\n      recent: number;\n    };\n  }> {\n    try {\n      const stats = await this.userRepository.getStatistics();\n\n      return {\n        users: stats,\n      };\n    } catch (error) {\n      logger.error(\"獲取系統統計失敗\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 管理員搜索用戶\n   */\n  async adminSearchUsers(\n    searchTerm: string,\n    options: {\n      limit?: number;\n      includeInactive?: boolean;\n    } = {},\n  ): Promise<IUser[]> {\n    try {\n      const { limit = 10, includeInactive = false } = options;\n\n      const filter: any = {\n        $or: [\n          { name: { $regex: searchTerm, $options: \"i\" } },\n          { email: { $regex: searchTerm, $options: \"i\" } },\n        ],\n      };\n\n      if (!includeInactive) {\n        filter.isActive = true;\n      }\n\n      const selectFields =\n        \"-password -passwordResetToken -passwordResetExpires -emailVerificationToken -emailVerificationExpires\";\n\n      const users = await this.userRepository.findWithSelect(\n        filter,\n        selectFields,\n        {\n          limit,\n          sort: { name: 1 },\n        },\n      );\n\n      return users;\n    } catch (error) {\n      logger.error(\"管理員搜索用戶失敗\", { error, searchTerm, options });\n      throw error;\n    }\n  }\n}\n"],"version":3}