99bcf772587b894b9fbb30ab439d90a9
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aiRoutes = void 0;
const express_1 = __importDefault(require("express"));
const multer_1 = __importDefault(require("multer"));
const auth_1 = require("../middleware/auth");
const aiService_1 = require("../services/aiService");
const cloudinaryService_1 = require("../services/cloudinaryService");
const errors_1 = require("../utils/errors");
const logger_1 = require("../utils/logger");
const Pet_1 = require("../models/Pet");
const ai_1 = require("../schemas/ai");
const router = express_1.default.Router();
exports.aiRoutes = router;
// Multer 配置
const upload = (0, multer_1.default)({
    storage: multer_1.default.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB for AI processing
        files: 1,
    },
    fileFilter: (req, file, cb) => {
        const allowedMimes = [
            "image/jpeg",
            "image/jpg",
            "image/png",
            "image/webp",
            "image/gif",
        ];
        if (allowedMimes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new errors_1.AppError("不支援的文件類型，請上傳圖片文件", 400));
        }
    },
});
/**
 * @route POST /api/ai/analyze
 * @desc 分析上傳的圖片，識別寵物品種和特徵
 * @access Private
 */
router.post("/analyze", auth_1.authenticate, upload.single("image"), async (req, res, next) => {
    try {
        if (!req.file) {
            throw new errors_1.AppError("請上傳圖片文件", 400);
        }
        const userId = req.user._id.toString();
        logger_1.logger.info("開始 AI 圖像分析", {
            userId,
            fileName: req.file.originalname,
            fileSize: req.file.size,
        });
        // 執行 AI 分析
        const analysisResult = await aiService_1.AIService.analyzeImageWithVision(req.file.buffer);
        // 生成搜尋建議
        const searchSuggestions = aiService_1.AIService.generateSearchSuggestions(analysisResult);
        logger_1.logger.info("AI 圖像分析完成", {
            userId,
            petType: analysisResult.petType,
            breed: analysisResult.breed,
            confidence: analysisResult.confidence,
        });
        res.json({
            success: true,
            message: "圖像分析完成",
            data: {
                analysis: {
                    petType: analysisResult.petType,
                    breed: analysisResult.breed,
                    confidence: analysisResult.confidence,
                    labels: analysisResult.labels,
                    safeSearch: analysisResult.safeSearch,
                },
                searchSuggestions,
                features: {
                    dominantColors: analysisResult.features.dominantColors,
                    // 不返回完整的特徵向量以減少響應大小
                },
            },
        });
    }
    catch (error) {
        next(error);
    }
});
/**
 * @route POST /api/ai/optimize
 * @desc 優化圖片（壓縮、調整大小）
 * @access Private
 */
router.post("/optimize", auth_1.authenticate, upload.single("image"), async (req, res, next) => {
    try {
        if (!req.file) {
            throw new errors_1.AppError("請上傳圖片文件", 400);
        }
        const userId = req.user._id.toString();
        const options = ai_1.imageOptimizeSchema.parse(req.body);
        logger_1.logger.info("開始圖像優化", {
            userId,
            fileName: req.file.originalname,
            originalSize: req.file.size,
            options,
        });
        // 優化圖像
        const { buffer: optimizedBuffer, metadata } = await aiService_1.AIService.optimizeImage(req.file.buffer, options);
        // 上傳優化後的圖像到 Cloudinary
        const uploadResult = await cloudinaryService_1.CloudinaryService.uploadFile(optimizedBuffer, `optimized_${req.file.originalname}`, options.format === "png"
            ? "image/png"
            : options.format === "webp"
                ? "image/webp"
                : "image/jpeg", userId, "pet");
        logger_1.logger.info("圖像優化完成", {
            userId,
            originalSize: req.file.size,
            optimizedSize: optimizedBuffer.length,
            url: uploadResult.secureUrl,
        });
        res.json({
            success: true,
            message: "圖像優化完成",
            data: {
                url: uploadResult.secureUrl,
                publicId: uploadResult.publicId,
                metadata: {
                    width: metadata.width,
                    height: metadata.height,
                    format: metadata.format,
                    size: optimizedBuffer.length,
                    originalSize: req.file.size,
                    compressionRatio: (((req.file.size - optimizedBuffer.length) / req.file.size) *
                        100).toFixed(2) + "%",
                },
            },
        });
    }
    catch (error) {
        next(error);
    }
});
/**
 * @route POST /api/ai/crop
 * @desc 裁剪圖片
 * @access Private
 */
router.post("/crop", auth_1.authenticate, upload.single("image"), async (req, res, next) => {
    try {
        if (!req.file) {
            throw new errors_1.AppError("請上傳圖片文件", 400);
        }
        const userId = req.user._id.toString();
        const cropOptions = ai_1.imageCropSchema.parse(req.body);
        logger_1.logger.info("開始圖像裁剪", {
            userId,
            fileName: req.file.originalname,
            cropOptions,
        });
        // 裁剪圖像
        const croppedBuffer = await aiService_1.AIService.cropImage(req.file.buffer, cropOptions);
        // 上傳裁剪後的圖像到 Cloudinary
        const uploadResult = await cloudinaryService_1.CloudinaryService.uploadFile(croppedBuffer, `cropped_${req.file.originalname}`, req.file.mimetype, userId, "pet");
        logger_1.logger.info("圖像裁剪完成", {
            userId,
            url: uploadResult.secureUrl,
        });
        res.json({
            success: true,
            message: "圖像裁剪完成",
            data: {
                url: uploadResult.secureUrl,
                publicId: uploadResult.publicId,
                cropOptions,
            },
        });
    }
    catch (error) {
        next(error);
    }
});
/**
 * @route POST /api/ai/similarity-search
 * @desc 基於圖像相似度搜尋寵物
 * @access Private
 */
router.post("/similarity-search", auth_1.authenticate, upload.single("image"), async (req, res, next) => {
    try {
        if (!req.file) {
            throw new errors_1.AppError("請上傳圖片文件", 400);
        }
        const userId = req.user._id.toString();
        const { threshold, limit } = ai_1.similaritySearchSchema.parse(req.body);
        logger_1.logger.info("開始相似度搜尋", {
            userId,
            fileName: req.file.originalname,
            threshold,
            limit,
        });
        // 提取上傳圖像的特徵
        const queryFeatures = await aiService_1.AIService.extractImageFeatures(req.file.buffer);
        // 獲取所有寵物記錄（實際應用中應該分批處理）
        const pets = await Pet_1.Pet.find({ status: "active" })
            .populate("owner", "username email")
            .limit(1000); // 限制搜尋範圍
        // 計算相似度並排序
        const similarities = [];
        for (const pet of pets) {
            if (pet.aiFeatures && pet.aiFeatures.length > 0) {
                try {
                    // 使用第一個圖像特徵進行比較
                    const features = pet.aiFeatures[0]?.features || [];
                    const petFeatures = {
                        colorHistogram: features.slice(0, 256) || [],
                        textureFeatures: features.slice(256, 260) || [],
                        shapeFeatures: features.slice(260, 264) || [],
                        dominantColors: ["#000000"], // 簡化處理
                    };
                    const similarity = aiService_1.AIService.calculateImageSimilarity(queryFeatures, petFeatures);
                    if (similarity >= threshold) {
                        similarities.push({ pet, similarity });
                    }
                }
                catch (error) {
                    logger_1.logger.warn("相似度計算失敗", { petId: pet._id, error });
                }
            }
        }
        // 按相似度排序並限制結果數量
        similarities.sort((a, b) => b.similarity - a.similarity);
        const results = similarities.slice(0, limit);
        logger_1.logger.info("相似度搜尋完成", {
            userId,
            totalPets: pets.length,
            matchedPets: results.length,
            threshold,
        });
        res.json({
            success: true,
            message: `找到 ${results.length} 個相似的寵物`,
            data: {
                results: results.map(({ pet, similarity }) => ({
                    pet: {
                        _id: pet._id,
                        name: pet.name,
                        type: pet.type,
                        breed: pet.breed,
                        description: pet.description,
                        images: pet.images,
                        location: pet.location,
                        status: pet.status,
                        createdAt: pet.createdAt,
                        owner: pet.userId,
                    },
                    similarity: Math.round(similarity * 100) / 100,
                })),
                searchParams: {
                    threshold,
                    limit,
                    totalScanned: pets.length,
                },
            },
        });
    }
    catch (error) {
        next(error);
    }
});
/**
 * @route GET /api/ai/suggestions/:petId
 * @desc 基於寵物資料生成搜尋建議
 * @access Private
 */
router.get("/suggestions/:petId", auth_1.authenticate, async (req, res, next) => {
    try {
        const { petId } = req.params;
        const userId = req.user._id.toString();
        // 獲取寵物資料
        const pet = await Pet_1.Pet.findById(petId);
        if (!pet) {
            throw new errors_1.AppError("寵物資料不存在", 404);
        }
        // 基於寵物資料生成建議
        const suggestions = [];
        // 基本資訊建議
        if (pet.type)
            suggestions.push(pet.type);
        if (pet.breed && pet.breed !== "混種")
            suggestions.push(pet.breed);
        if (pet.color)
            suggestions.push(pet.color);
        if (pet.size)
            suggestions.push(pet.size);
        // 位置建議
        if (pet.lastSeenLocation) {
            const locationParts = pet.lastSeenLocation.split(/[,，\s]+/);
            suggestions.push(...locationParts.slice(0, 2));
        }
        // 特徵建議
        if (pet.aiTags && pet.aiTags.length > 0) {
            suggestions.push(...pet.aiTags.slice(0, 3));
        }
        logger_1.logger.info("生成搜尋建議", {
            userId,
            petId,
            suggestionsCount: suggestions.length,
        });
        res.json({
            success: true,
            message: "搜尋建議生成完成",
            data: {
                suggestions: suggestions.slice(0, 8), // 限制為 8 個建議
                petInfo: {
                    name: pet.name,
                    type: pet.type,
                    breed: pet.breed,
                },
            },
        });
    }
    catch (error) {
        next(error);
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,