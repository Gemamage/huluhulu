6a0903fb8170c9db97dfc3955a3753a7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userRoutes = void 0;
const express_1 = require("express");
const express_validator_1 = require("express-validator");
const logger_1 = require("../utils/logger");
const errors_1 = require("../utils/errors");
const userService_1 = require("../services/userService");
const emailService_1 = require("../services/emailService");
const cloudinaryService_1 = require("../services/cloudinaryService");
const auth_1 = require("../middleware/auth");
const environment_1 = require("../config/environment");
const multer_1 = __importDefault(require("multer"));
const router = (0, express_1.Router)();
exports.userRoutes = router;
const userService = new userService_1.UserService();
// Cloudinary 配置已移至 CloudinaryService
// 配置 multer 用於檔案上傳
const upload = (0, multer_1.default)({
    storage: multer_1.default.memoryStorage(),
    limits: {
        fileSize: environment_1.config.upload.maxFileSize,
    },
    fileFilter: (_req, file, cb) => {
        if (environment_1.config.upload.allowedMimeTypes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new errors_1.AppError("不支援的檔案格式", 400));
        }
    },
});
// 獲取用戶列表（僅管理員）
router.get("/", auth_1.authenticate, (0, auth_1.authorize)("admin"), [
    (0, express_validator_1.query)("page").optional().isInt({ min: 1 }),
    (0, express_validator_1.query)("limit").optional().isInt({ min: 1, max: 100 }),
    (0, express_validator_1.query)("search").optional().isString(),
    (0, express_validator_1.query)("role").optional().isIn(["user", "admin"]),
    (0, express_validator_1.query)("isActive").optional().isBoolean(),
    (0, express_validator_1.query)("isEmailVerified").optional().isBoolean(),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: "查詢參數驗證失敗",
                errors: errors.array(),
            });
            return;
        }
        const { page = 1, limit = 20, search, role, isActive, isEmailVerified, sortBy = "createdAt", sortOrder = "desc", } = req.query;
        // 獲取用戶列表
        const queryOptions = {
            page: Number(page),
            limit: Number(limit),
            search: search,
            sortBy: sortBy,
            sortOrder: sortOrder,
        };
        if (role) {
            queryOptions.role = role;
        }
        if (isActive !== undefined) {
            queryOptions.isActive = Boolean(isActive);
        }
        if (isEmailVerified !== undefined) {
            queryOptions.isEmailVerified = Boolean(isEmailVerified);
        }
        const result = await userService.getUsers(queryOptions);
        logger_1.logger.info("獲取用戶列表成功", {
            page,
            limit,
            total: result.total,
            adminId: req.user?._id.toString(),
        });
        res.json({
            success: true,
            data: result,
        });
    }
    catch (error) {
        logger_1.logger.error("獲取用戶列表失敗", { error });
        res.status(500).json({
            success: false,
            message: "獲取用戶列表失敗，請稍後再試",
        });
    }
});
// 獲取特定用戶資訊
router.get("/:id", auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        if (!id) {
            res.status(400).json({
                success: false,
                message: "缺少用戶 ID",
            });
            return;
        }
        // 獲取用戶資訊
        const user = await userService.getUserById(id);
        if (!user) {
            res.status(404).json({
                success: false,
                message: "用戶不存在",
            });
            return;
        }
        logger_1.logger.info("獲取用戶資訊成功", {
            userId: id,
            requesterId: req.user?._id.toString(),
        });
        res.json({
            success: true,
            data: {
                user: {
                    id: user._id,
                    email: user.email,
                    name: user.name,
                    phone: user.phone,
                    avatar: user.avatar,
                    role: user.role,
                    isEmailVerified: user.isEmailVerified,
                    isActive: user.isActive,
                    createdAt: user.createdAt,
                    updatedAt: user.updatedAt,
                    lastLoginAt: user.lastLoginAt,
                },
            },
        });
    }
    catch (error) {
        logger_1.logger.error("獲取用戶資訊失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "獲取用戶資訊失敗，請稍後再試",
        });
    }
});
// 更新用戶資訊
router.put("/:id", auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, [
    (0, express_validator_1.body)("name")
        .optional()
        .trim()
        .isLength({ min: 1 })
        .withMessage("姓名不能為空"),
    (0, express_validator_1.body)("phone")
        .optional()
        .isMobilePhone("zh-TW")
        .withMessage("請提供有效的手機號碼"),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: "輸入資料驗證失敗",
                errors: errors.array(),
            });
            return;
        }
        const { id } = req.params;
        const updateData = req.body;
        if (!id) {
            res.status(400).json({
                success: false,
                message: "缺少用戶 ID",
            });
            return;
        }
        // 更新用戶資訊
        const updatedUser = await userService.updateUser(id, updateData);
        logger_1.logger.info("用戶資訊更新成功", {
            userId: id,
            updateData,
            updaterId: req.user?._id.toString(),
        });
        res.json({
            success: true,
            message: "用戶資訊更新成功",
            data: {
                user: {
                    id: updatedUser._id,
                    email: updatedUser.email,
                    name: updatedUser.name,
                    phone: updatedUser.phone,
                    avatar: updatedUser.avatar,
                    role: updatedUser.role,
                    isEmailVerified: updatedUser.isEmailVerified,
                    isActive: updatedUser.isActive,
                    updatedAt: updatedUser.updatedAt,
                },
            },
        });
    }
    catch (error) {
        logger_1.logger.error("用戶資訊更新失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "用戶資訊更新失敗，請稍後再試",
        });
    }
});
// 停用用戶帳號（軟刪除）
router.delete("/:id", auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        if (!id) {
            res.status(400).json({
                success: false,
                message: "缺少用戶 ID",
            });
            return;
        }
        // 停用用戶帳號
        await userService.deactivateUser(id);
        logger_1.logger.info("用戶帳號已停用", {
            userId: id,
            deactivatedBy: req.user?._id.toString(),
        });
        res.json({
            success: true,
            message: "用戶帳號已停用",
        });
    }
    catch (error) {
        logger_1.logger.error("停用用戶帳號失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "停用用戶帳號失敗，請稍後再試",
        });
    }
});
// 上傳用戶頭像
router.post("/:id/avatar", auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, upload.single("avatar"), async (req, res) => {
    try {
        const { id } = req.params;
        const file = req.file;
        if (!id) {
            res.status(400).json({
                success: false,
                message: "缺少用戶 ID",
            });
            return;
        }
        if (!file) {
            res.status(400).json({
                success: false,
                message: "請選擇要上傳的頭像檔案",
            });
            return;
        }
        // 上傳到 Cloudinary
        const uploadResult = await cloudinaryService_1.CloudinaryService.uploadFile(file.buffer, file.originalname, file.mimetype, id, "avatar");
        const avatarUrl = uploadResult.secureUrl;
        // 更新用戶頭像
        const updatedUser = await userService.updateUser(id, {
            avatar: avatarUrl,
        });
        logger_1.logger.info("用戶頭像上傳成功", {
            userId: id,
            avatarUrl,
            uploaderId: req.user?._id.toString(),
        });
        res.json({
            success: true,
            message: "頭像上傳成功",
            data: {
                avatarUrl,
                user: {
                    id: updatedUser._id,
                    avatar: updatedUser.avatar,
                },
            },
        });
    }
    catch (error) {
        logger_1.logger.error("頭像上傳失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "頭像上傳失敗，請稍後再試",
        });
    }
});
// 發送電子郵件驗證
router.post("/:id/send-verification", auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        if (!id) {
            res.status(400).json({
                success: false,
                message: "缺少用戶 ID",
            });
            return;
        }
        // 獲取用戶資訊
        const user = await userService.getUserById(id);
        if (user.isEmailVerified) {
            res.status(400).json({
                success: false,
                message: "電子郵件已經驗證過了",
            });
            return;
        }
        // 生成驗證令牌
        const verificationToken = user.generateEmailVerificationToken();
        await user.save();
        // 發送驗證郵件
        await emailService_1.EmailService.sendVerificationEmail(user.email, user.name, verificationToken);
        logger_1.logger.info("驗證郵件發送成功", {
            userId: id,
            email: user.email,
            requesterId: req.user?._id.toString(),
        });
        res.json({
            success: true,
            message: "驗證郵件已發送，請檢查您的信箱",
        });
    }
    catch (error) {
        logger_1.logger.error("發送驗證郵件失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "發送驗證郵件失敗，請稍後再試",
        });
    }
});
// 驗證電子郵件
router.post("/:id/verify-email", [(0, express_validator_1.body)("token").notEmpty().withMessage("請提供驗證令牌")], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: "輸入資料驗證失敗",
                errors: errors.array(),
            });
            return;
        }
        const { id } = req.params;
        const { token } = req.body;
        // 驗證電子郵件
        await userService.verifyEmailByToken(token);
        logger_1.logger.info("電子郵件驗證成功", {
            userId: id,
        });
        res.json({
            success: true,
            message: "電子郵件驗證成功",
        });
    }
    catch (error) {
        logger_1.logger.error("電子郵件驗證失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "電子郵件驗證失敗，請稍後再試",
        });
    }
});
// 獲取用戶的寵物列表
router.get("/:id/pets", auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, [
    (0, express_validator_1.query)("page").optional().isInt({ min: 1 }),
    (0, express_validator_1.query)("limit").optional().isInt({ min: 1, max: 50 }),
    (0, express_validator_1.query)("status").optional().isIn(["lost", "found", "adopted"]),
    (0, express_validator_1.query)("type").optional().isIn(["dog", "cat", "other"]),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: "查詢參數驗證失敗",
                errors: errors.array(),
            });
            return;
        }
        const { id } = req.params;
        if (!id) {
            res.status(400).json({
                success: false,
                message: "缺少用戶 ID",
            });
            return;
        }
        const { page = 1, limit = 10, status, type,
        // sortBy = 'createdAt',
        // sortOrder = 'desc',
         } = req.query;
        // 構建查詢條件
        const query = { owner: id };
        if (status) {
            query.status = status;
        }
        if (type) {
            query.type = type;
        }
        // 分頁參數
        const pageNum = Math.max(1, parseInt(page));
        const limitNum = Math.min(50, Math.max(1, parseInt(limit)));
        // 查詢寵物（這裡假設有 Pet 模型，實際需要根據寵物模組實作）
        // 暫時返回空列表，等寵物模組完成後再實作
        const pets = [];
        const total = 0;
        logger_1.logger.info("獲取用戶寵物列表成功", {
            userId: id,
            query,
            pagination: { page: pageNum, limit: limitNum },
            requesterId: req.user?._id.toString(),
        });
        res.json({
            success: true,
            message: "獲取用戶寵物列表成功",
            data: {
                pets,
                pagination: {
                    currentPage: pageNum,
                    totalPages: Math.ceil(total / limitNum),
                    totalItems: total,
                    itemsPerPage: limitNum,
                    hasNextPage: pageNum < Math.ceil(total / limitNum),
                    hasPrevPage: pageNum > 1,
                },
            },
        });
    }
    catch (error) {
        logger_1.logger.error("獲取用戶寵物列表失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "獲取用戶寵物列表失敗，請稍後再試",
        });
    }
});
// 更改密碼
router.put("/:id/change-password", auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, [
    (0, express_validator_1.body)("currentPassword").notEmpty().withMessage("請提供當前密碼"),
    (0, express_validator_1.body)("newPassword")
        .isLength({ min: 8 })
        .withMessage("新密碼長度至少為 8 個字符")
        .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
        .withMessage("新密碼必須包含至少一個小寫字母、一個大寫字母和一個數字"),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: "輸入資料驗證失敗",
                errors: errors.array(),
            });
            return;
        }
        const { id } = req.params;
        const { currentPassword, newPassword } = req.body;
        if (!id || !currentPassword || !newPassword) {
            res.status(400).json({
                success: false,
                message: "缺少必要參數",
            });
            return;
        }
        // 更改密碼
        await userService.changePassword(id, currentPassword, newPassword);
        logger_1.logger.info("密碼更改成功", {
            userId: id,
            changedBy: req.user?._id.toString(),
        });
        res.json({
            success: true,
            message: "密碼更改成功",
        });
    }
    catch (error) {
        logger_1.logger.error("密碼更改失敗", { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: "密碼更改失敗，請稍後再試",
        });
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,