d162d7fe4721460531c71a53475713f5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const messageService_1 = require("../services/messageService");
const auth_1 = require("../middleware/auth");
const express_validator_1 = require("express-validator");
const router = express_1.default.Router();
/**
 * 發送私訊
 */
router.post('/', auth_1.authenticate, [
    (0, express_validator_1.body)('receiverId').isMongoId().withMessage('無效的接收者ID'),
    (0, express_validator_1.body)('content').trim().isLength({ min: 1, max: 1000 }).withMessage('訊息內容長度必須在1-1000字之間'),
    (0, express_validator_1.body)('petId').optional().isMongoId().withMessage('無效的寵物ID')
], async (req, res) => {
    try {
        const { receiverId, content, petId } = req.body;
        const senderId = req.user.id;
        const message = await messageService_1.messageService.sendMessage({
            senderId,
            receiverId,
            content,
            petId
        });
        res.status(201).json({
            success: true,
            data: message,
            message: '訊息發送成功'
        });
    }
    catch (error) {
        res.status(400).json({
            success: false,
            message: error.message || '發送訊息失敗'
        });
    }
});
/**
 * 獲取對話列表
 */
router.get('/conversations', auth_1.authenticate, [
    (0, express_validator_1.query)('page').optional().isInt({ min: 1 }).withMessage('頁碼必須是正整數'),
    (0, express_validator_1.query)('limit').optional().isInt({ min: 1, max: 50 }).withMessage('每頁數量必須在1-50之間')
], async (req, res) => {
    try {
        const userId = req.user.id;
        const { page = 1, limit = 20 } = req.query;
        const result = await messageService_1.messageService.getConversations(userId, {
            page: Number(page),
            limit: Number(limit)
        });
        res.json({
            success: true,
            data: result
        });
    }
    catch (error) {
        res.status(400).json({
            success: false,
            message: error.message || '獲取對話列表失敗'
        });
    }
});
/**
 * 獲取對話中的訊息
 */
router.get('/conversations/:otherUserId', auth_1.authenticate, [
    (0, express_validator_1.param)('otherUserId').isMongoId().withMessage('無效的用戶ID'),
    (0, express_validator_1.query)('page').optional().isInt({ min: 1 }).withMessage('頁碼必須是正整數'),
    (0, express_validator_1.query)('limit').optional().isInt({ min: 1, max: 100 }).withMessage('每頁數量必須在1-100之間')
], async (req, res) => {
    try {
        const { otherUserId } = req.params;
        const userId = req.user.id;
        const { page = 1, limit = 50 } = req.query;
        if (!otherUserId) {
            return res.status(400).json({
                success: false,
                message: '缺少用戶ID參數'
            });
        }
        const result = await messageService_1.messageService.getMessages(userId, otherUserId, {
            page: Number(page),
            limit: Number(limit)
        });
        return res.json({
            success: true,
            data: result
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '獲取訊息失敗'
        });
    }
});
/**
 * 標記訊息為已讀
 */
router.put('/conversations/:otherUserId/read', auth_1.authenticate, [
    (0, express_validator_1.param)('otherUserId').isMongoId().withMessage('無效的用戶ID')
], async (req, res) => {
    try {
        const { otherUserId } = req.params;
        const userId = req.user.id;
        if (!otherUserId) {
            return res.status(400).json({
                success: false,
                message: '缺少用戶ID參數'
            });
        }
        await messageService_1.messageService.markAsRead(userId, otherUserId);
        return res.json({
            success: true,
            message: '訊息已標記為已讀'
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '標記已讀失敗'
        });
    }
});
/**
 * 刪除對話
 */
router.delete('/conversations/:otherUserId', auth_1.authenticate, [
    (0, express_validator_1.param)('otherUserId').isMongoId().withMessage('無效的用戶ID')
], async (req, res) => {
    try {
        const { otherUserId } = req.params;
        const userId = req.user.id;
        if (!otherUserId) {
            return res.status(400).json({
                success: false,
                message: '缺少用戶ID參數'
            });
        }
        await messageService_1.messageService.deleteConversation(userId, otherUserId);
        return res.json({
            success: true,
            message: '對話刪除成功'
        });
    }
    catch (error) {
        return res.status(400).json({
            success: false,
            message: error.message || '刪除對話失敗'
        });
    }
});
/**
 * 獲取未讀訊息數量
 */
router.get('/unread-count', auth_1.authenticate, async (req, res) => {
    try {
        const userId = req.user.id;
        const count = await messageService_1.messageService.getUnreadCount(userId);
        res.json({
            success: true,
            data: { count }
        });
    }
    catch (error) {
        res.status(400).json({
            success: false,
            message: error.message || '獲取未讀數量失敗'
        });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,