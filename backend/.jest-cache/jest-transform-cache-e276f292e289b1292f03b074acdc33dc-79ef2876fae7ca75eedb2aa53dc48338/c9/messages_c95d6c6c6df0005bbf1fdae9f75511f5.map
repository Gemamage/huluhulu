{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\messages.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\messages.ts"],"sourcesContent":["import express from 'express';\nimport { Request, Response } from 'express';\nimport { messageService } from '../services/messageService';\nimport { authenticate } from '../middleware/auth';\nimport { body, param, query } from 'express-validator';\n\nconst router = express.Router();\n\n/**\n * 發送私訊\n */\nrouter.post('/',\n  authenticate,\n  [\n    body('receiverId').isMongoId().withMessage('無效的接收者ID'),\n    body('content').trim().isLength({ min: 1, max: 1000 }).withMessage('訊息內容長度必須在1-1000字之間'),\n    body('petId').optional().isMongoId().withMessage('無效的寵物ID')\n  ],\n  async (req: Request, res: Response) => {\n    try {\n      const { receiverId, content, petId } = req.body;\n      const senderId = req.user!.id;\n\n      const message = await messageService.sendMessage({\n        senderId,\n        receiverId,\n        content,\n        petId\n      });\n\n      res.status(201).json({\n        success: true,\n        data: message,\n        message: '訊息發送成功'\n      });\n    } catch (error: any) {\n      res.status(400).json({\n        success: false,\n        message: error.message || '發送訊息失敗'\n      });\n    }\n  }\n);\n\n/**\n * 獲取對話列表\n */\nrouter.get('/conversations',\n  authenticate,\n  [\n    query('page').optional().isInt({ min: 1 }).withMessage('頁碼必須是正整數'),\n    query('limit').optional().isInt({ min: 1, max: 50 }).withMessage('每頁數量必須在1-50之間')\n  ],\n  async (req: Request, res: Response) => {\n    try {\n      const userId = req.user!.id;\n      const {\n        page = 1,\n        limit = 20\n      } = req.query;\n\n      const result = await messageService.getConversations(userId, {\n        page: Number(page),\n        limit: Number(limit)\n      });\n\n      res.json({\n        success: true,\n        data: result\n      });\n    } catch (error: any) {\n      res.status(400).json({\n        success: false,\n        message: error.message || '獲取對話列表失敗'\n      });\n    }\n  }\n);\n\n/**\n * 獲取對話中的訊息\n */\nrouter.get('/conversations/:otherUserId',\n  authenticate,\n  [\n    param('otherUserId').isMongoId().withMessage('無效的用戶ID'),\n    query('page').optional().isInt({ min: 1 }).withMessage('頁碼必須是正整數'),\n    query('limit').optional().isInt({ min: 1, max: 100 }).withMessage('每頁數量必須在1-100之間')\n  ],\n  async (req: Request, res: Response) => {\n    try {\n      const { otherUserId } = req.params;\n      const userId = req.user!.id;\n      const {\n        page = 1,\n        limit = 50\n      } = req.query;\n\n      if (!otherUserId) {\n        return res.status(400).json({\n          success: false,\n          message: '缺少用戶ID參數'\n        });\n      }\n\n      const result = await messageService.getMessages(userId, otherUserId, {\n        page: Number(page),\n        limit: Number(limit)\n      });\n\n      return res.json({\n        success: true,\n        data: result\n      });\n    } catch (error: any) {\n      return res.status(400).json({\n        success: false,\n        message: error.message || '獲取訊息失敗'\n      });\n    }\n  }\n);\n\n/**\n * 標記訊息為已讀\n */\nrouter.put('/conversations/:otherUserId/read',\n  authenticate,\n  [\n    param('otherUserId').isMongoId().withMessage('無效的用戶ID')\n  ],\n  async (req: Request, res: Response) => {\n    try {\n      const { otherUserId } = req.params;\n      const userId = req.user!.id;\n\n      if (!otherUserId) {\n        return res.status(400).json({\n          success: false,\n          message: '缺少用戶ID參數'\n        });\n      }\n\n      await messageService.markAsRead(userId, otherUserId);\n\n      return res.json({\n        success: true,\n        message: '訊息已標記為已讀'\n      });\n    } catch (error: any) {\n      return res.status(400).json({\n        success: false,\n        message: error.message || '標記已讀失敗'\n      });\n    }\n  }\n);\n\n/**\n * 刪除對話\n */\nrouter.delete('/conversations/:otherUserId',\n  authenticate,\n  [\n    param('otherUserId').isMongoId().withMessage('無效的用戶ID')\n  ],\n  async (req: Request, res: Response) => {\n    try {\n      const { otherUserId } = req.params;\n      const userId = req.user!.id;\n\n      if (!otherUserId) {\n        return res.status(400).json({\n          success: false,\n          message: '缺少用戶ID參數'\n        });\n      }\n\n      await messageService.deleteConversation(userId, otherUserId);\n\n      return res.json({\n        success: true,\n        message: '對話刪除成功'\n      });\n    } catch (error: any) {\n      return res.status(400).json({\n        success: false,\n        message: error.message || '刪除對話失敗'\n      });\n    }\n  }\n);\n\n/**\n * 獲取未讀訊息數量\n */\nrouter.get('/unread-count',\n  authenticate,\n  async (req: Request, res: Response) => {\n    try {\n      const userId = req.user!.id;\n      const count = await messageService.getUnreadCount(userId);\n\n      res.json({\n        success: true,\n        data: { count }\n      });\n    } catch (error: any) {\n      res.status(400).json({\n        success: false,\n        message: error.message || '獲取未讀數量失敗'\n      });\n    }\n  }\n);\n\nexport default router;"],"version":3}