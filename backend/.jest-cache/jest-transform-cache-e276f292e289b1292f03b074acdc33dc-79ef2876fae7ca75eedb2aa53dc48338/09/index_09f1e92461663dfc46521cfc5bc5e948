78d47f803dc3d9fa59e0d3e5b5183d2d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.smartNotificationService = exports.UserNotificationStats = exports.SmartNotificationStats = exports.ReminderConfig = exports.GeofenceArea = exports.GeofenceConfig = exports.AIMatchingConfig = exports.NotificationStatisticsService = exports.ReminderService = exports.GeofenceService = exports.AIMatchingService = exports.SmartNotificationService = void 0;
const aiMatching_1 = require("./aiMatching");
Object.defineProperty(exports, "AIMatchingService", { enumerable: true, get: function () { return aiMatching_1.AIMatchingService; } });
Object.defineProperty(exports, "AIMatchingConfig", { enumerable: true, get: function () { return aiMatching_1.AIMatchingConfig; } });
const geofence_1 = require("./geofence");
Object.defineProperty(exports, "GeofenceService", { enumerable: true, get: function () { return geofence_1.GeofenceService; } });
Object.defineProperty(exports, "GeofenceConfig", { enumerable: true, get: function () { return geofence_1.GeofenceConfig; } });
Object.defineProperty(exports, "GeofenceArea", { enumerable: true, get: function () { return geofence_1.GeofenceArea; } });
const reminders_1 = require("./reminders");
Object.defineProperty(exports, "ReminderService", { enumerable: true, get: function () { return reminders_1.ReminderService; } });
Object.defineProperty(exports, "ReminderConfig", { enumerable: true, get: function () { return reminders_1.ReminderConfig; } });
const statistics_1 = require("./statistics");
Object.defineProperty(exports, "NotificationStatisticsService", { enumerable: true, get: function () { return statistics_1.NotificationStatisticsService; } });
Object.defineProperty(exports, "SmartNotificationStats", { enumerable: true, get: function () { return statistics_1.SmartNotificationStats; } });
Object.defineProperty(exports, "UserNotificationStats", { enumerable: true, get: function () { return statistics_1.UserNotificationStats; } });
const logger_1 = require("../../utils/logger");
const DEFAULT_CONFIG = {
    aiMatching: {
        enabled: true,
        minSimilarity: 0.75,
        checkInterval: 30, // 30 minutes
        maxDistance: 50, // 50km
    },
    geofence: {
        enabled: true,
        defaultRadius: 10, // 10km
        checkInterval: 15, // 15 minutes
    },
    reminders: {
        enabled: true,
        intervals: [1, 3, 7, 14, 30], // 1天, 3天, 1週, 2週, 1個月
        maxReminders: 5,
    },
};
class SmartNotificationService {
    /**
     * 初始化智能通知服務
     */
    static async initialize(config) {
        if (this.initialized) {
            logger_1.logger.warn("智能通知服務已經初始化");
            return;
        }
        if (config) {
            this.config = {
                aiMatching: { ...DEFAULT_CONFIG.aiMatching, ...config.aiMatching },
                geofence: { ...DEFAULT_CONFIG.geofence, ...config.geofence },
                reminders: { ...DEFAULT_CONFIG.reminders, ...config.reminders },
            };
        }
        // 初始化各個服務
        aiMatching_1.AIMatchingService.initialize(this.config.aiMatching);
        await geofence_1.GeofenceService.initialize(this.config.geofence);
        reminders_1.ReminderService.initialize(this.config.reminders);
        this.initialized = true;
        logger_1.logger.info("智能通知服務已初始化", { config: this.config });
    }
    /**
     * 停止智能通知服務
     */
    static stop() {
        aiMatching_1.AIMatchingService.stop();
        geofence_1.GeofenceService.stop();
        reminders_1.ReminderService.stop();
        this.initialized = false;
        logger_1.logger.info("智能通知服務已停止");
    }
    /**
     * 重啟智能通知服務
     */
    static async restart(config) {
        this.stop();
        await this.initialize(config);
    }
    // ==================== AI 配對相關方法 ====================
    /**
     * 手動觸發 AI 配對檢查
     */
    static async triggerAIMatching(userId, petId) {
        return aiMatching_1.AIMatchingService.triggerAIMatching(userId, petId);
    }
    // ==================== 地理圍欄相關方法 ====================
    /**
     * 創建地理圍欄
     */
    static async createGeofence(data) {
        return geofence_1.GeofenceService.createGeofence(data);
    }
    /**
     * 移除地理圍欄
     */
    static async removeGeofence(userId, geofenceId) {
        return geofence_1.GeofenceService.removeGeofence(userId, geofenceId);
    }
    /**
     * 獲取用戶的地理圍欄列表
     */
    static async getUserGeofences(userId) {
        return geofence_1.GeofenceService.getUserGeofences(userId);
    }
    // ==================== 提醒相關方法 ====================
    /**
     * 手動發送提醒
     */
    static async sendManualReminder(userId, petId, customMessage) {
        return reminders_1.ReminderService.sendManualReminder(userId, petId, customMessage);
    }
    /**
     * 獲取用戶的提醒統計
     */
    static async getUserReminderStats(userId, startDate, endDate) {
        return reminders_1.ReminderService.getUserReminderStats(userId, startDate, endDate);
    }
    // ==================== 配置管理方法 ====================
    /**
     * 獲取用戶配置
     */
    static async getConfig(userId) {
        // 這裡可以從資料庫獲取用戶特定配置
        // 暫時返回全域配置
        return { ...this.config };
    }
    /**
     * 更新用戶配置
     */
    static async updateConfig(userId, newConfig) {
        // 這裡可以保存用戶特定配置到資料庫
        // 暫時更新全域配置
        if (newConfig.aiMatching) {
            aiMatching_1.AIMatchingService.updateConfig(newConfig.aiMatching);
            this.config.aiMatching = {
                ...this.config.aiMatching,
                ...newConfig.aiMatching,
            };
        }
        if (newConfig.geofence) {
            geofence_1.GeofenceService.updateConfig(newConfig.geofence);
            this.config.geofence = { ...this.config.geofence, ...newConfig.geofence };
        }
        if (newConfig.reminders) {
            reminders_1.ReminderService.updateConfig(newConfig.reminders);
            this.config.reminders = {
                ...this.config.reminders,
                ...newConfig.reminders,
            };
        }
        logger_1.logger.info("智能通知配置已更新", { userId, config: this.config });
        return { ...this.config };
    }
    // ==================== 統計相關方法 ====================
    /**
     * 獲取智能通知統計
     */
    static async getSmartNotificationStats() {
        return statistics_1.NotificationStatisticsService.getSmartNotificationStats();
    }
    /**
     * 獲取智能通知統計（用戶特定）
     */
    static async getSmartNotificationStatistics(options) {
        return statistics_1.NotificationStatisticsService.getSmartNotificationStatistics(options);
    }
    /**
     * 獲取通知類型統計
     */
    static async getNotificationTypeStats(options) {
        return statistics_1.NotificationStatisticsService.getNotificationTypeStats(options);
    }
    /**
     * 獲取通知趨勢統計
     */
    static async getNotificationTrends(options) {
        return statistics_1.NotificationStatisticsService.getNotificationTrends(options);
    }
    /**
     * 獲取通知效果統計
     */
    static async getNotificationEffectivenessStats(options) {
        return statistics_1.NotificationStatisticsService.getNotificationEffectivenessStats(options);
    }
    /**
     * 清理過期統計數據
     */
    static async cleanupOldStats(daysToKeep = 90) {
        return statistics_1.NotificationStatisticsService.cleanupOldStats(daysToKeep);
    }
    // ==================== 服務狀態方法 ====================
    /**
     * 獲取服務狀態
     */
    static getServiceStatus() {
        const aiMatchingStatus = aiMatching_1.AIMatchingService.getStatus();
        const geofenceStats = geofence_1.GeofenceService.getStats();
        return {
            initialized: this.initialized,
            aiMatching: {
                enabled: aiMatchingStatus.enabled,
                running: aiMatchingStatus.running,
                lastRun: aiMatchingStatus.lastRun,
            },
            geofence: {
                enabled: geofenceStats.enabled,
                running: geofenceStats.running,
                totalAreas: geofenceStats.totalAreas,
                activeAreas: geofenceStats.activeAreas,
            },
            reminders: {
                enabled: this.config.reminders.enabled,
                running: true, // ReminderService 沒有提供運行狀態，假設總是運行
            },
        };
    }
    /**
     * 健康檢查
     */
    static async healthCheck() {
        const services = {
            aiMatching: "ok",
            geofence: "ok",
            reminders: "ok",
        };
        let healthyCount = 0;
        // 檢查 AI 配對服務
        try {
            const aiStatus = aiMatching_1.AIMatchingService.getStatus();
            if (aiStatus.enabled && !aiStatus.running) {
                services.aiMatching = "error";
            }
            else {
                healthyCount++;
            }
        }
        catch (error) {
            services.aiMatching = "error";
        }
        // 檢查地理圍欄服務
        try {
            const geofenceStats = geofence_1.GeofenceService.getStats();
            if (geofenceStats.enabled && !geofenceStats.running) {
                services.geofence = "error";
            }
            else {
                healthyCount++;
            }
        }
        catch (error) {
            services.geofence = "error";
        }
        // 檢查提醒服務
        try {
            const reminderStats = await reminders_1.ReminderService.getStats();
            if (reminderStats.enabled && !reminderStats.running) {
                services.reminders = "error";
            }
            else {
                healthyCount++;
            }
        }
        catch (error) {
            services.reminders = "error";
        }
        let status;
        let message;
        if (healthyCount === 3) {
            status = "healthy";
        }
        else if (healthyCount >= 1) {
            status = "degraded";
            message = `${3 - healthyCount} 個服務出現問題`;
        }
        else {
            status = "unhealthy";
            message = "所有服務都出現問題";
        }
        return {
            status,
            services,
            message,
        };
    }
}
exports.SmartNotificationService = SmartNotificationService;
SmartNotificationService.config = DEFAULT_CONFIG;
SmartNotificationService.initialized = false;
// 創建默認實例
exports.smartNotificationService = SmartNotificationService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,