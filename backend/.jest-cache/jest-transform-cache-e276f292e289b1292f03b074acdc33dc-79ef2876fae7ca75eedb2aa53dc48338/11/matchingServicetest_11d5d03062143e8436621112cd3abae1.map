{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\matchingService.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\matchingService.test.ts"],"sourcesContent":["import { MatchingService } from '../../src/services/matchingService';\nimport { Pet, IPet } from '../../src/models/Pet';\nimport { User, IUser } from '../../src/models/User';\nimport { Match, IMatch } from '../../src/models/Match';\nimport { aiService } from '../../src/services/aiService';\nimport { EmailService } from '../../src/services/emailService';\nimport { validUserData, validPetData } from '../utils/testData';\nimport mongoose from 'mongoose';\n\n// Mock external services\njest.mock('../../src/services/aiService');\njest.mock('../../src/services/emailService');\n\nconst mockAiService = aiService as jest.Mocked<typeof aiService>;\nconst mockEmailService = EmailService as jest.Mocked<typeof EmailService>;\n\ndescribe('MatchingService', () => {\n  let testUser1: IUser;\n  let testUser2: IUser;\n  let lostPet: IPet;\n  let foundPet: IPet;\n\n  beforeEach(async () => {\n    await User.deleteMany({});\n    await Pet.deleteMany({});\n    await Match.deleteMany({});\n    \n    testUser1 = await new User(validUserData).save();\n    testUser2 = await new User({\n      ...validUserData,\n      email: 'user2@example.com'\n    }).save();\n    \n    lostPet = await new Pet({\n      ...validPetData,\n      name: 'Lost Dog',\n      status: 'lost',\n      owner: testUser1._id,\n      aiData: {\n        breed: 'Golden Retriever',\n        confidence: 0.9,\n        features: [0.1, 0.2, 0.3, 0.4, 0.5]\n      }\n    }).save();\n    \n    foundPet = await new Pet({\n      ...validPetData,\n      name: 'Found Dog',\n      status: 'found',\n      owner: testUser2._id,\n      aiData: {\n        breed: 'Golden Retriever',\n        confidence: 0.85,\n        features: [0.12, 0.18, 0.32, 0.38, 0.52]\n      }\n    }).save();\n    \n    jest.clearAllMocks();\n  });\n\n  afterEach(async () => {\n    await User.deleteMany({});\n    await Pet.deleteMany({});\n    await Match.deleteMany({});\n  });\n\n  describe('findPotentialMatches', () => {\n    it('should find potential matches for lost pet', async () => {\n      mockAiService.calculateSimilarity.mockReturnValue(0.85);\n      \n      const matches = await MatchingService.findPotentialMatches(lostPet._id.toString());\n      \n      expect(matches).toHaveLength(1);\n      expect(matches[0].foundPet._id.toString()).toBe(foundPet._id.toString());\n      expect(matches[0].similarity).toBe(0.85);\n      expect(matches[0].confidence).toBe('high');\n    });\n\n    it('should find potential matches for found pet', async () => {\n      mockAiService.calculateSimilarity.mockReturnValue(0.85);\n      \n      const matches = await MatchingService.findPotentialMatches(foundPet._id.toString());\n      \n      expect(matches).toHaveLength(1);\n      expect(matches[0].lostPet._id.toString()).toBe(lostPet._id.toString());\n      expect(matches[0].similarity).toBe(0.85);\n    });\n\n    it('should filter matches by minimum similarity threshold', async () => {\n      mockAiService.calculateSimilarity.mockReturnValue(0.5); // Below default threshold\n      \n      const matches = await MatchingService.findPotentialMatches(lostPet._id.toString());\n      \n      expect(matches).toHaveLength(0);\n    });\n\n    it('should use custom similarity threshold', async () => {\n      mockAiService.calculateSimilarity.mockReturnValue(0.5);\n      \n      const matches = await MatchingService.findPotentialMatches(\n        lostPet._id.toString(),\n        { minSimilarity: 0.4 }\n      );\n      \n      expect(matches).toHaveLength(1);\n    });\n\n    it('should filter by location radius', async () => {\n      mockAiService.calculateSimilarity.mockReturnValue(0.85);\n      \n      // Set different locations\n      lostPet.location.coordinates = [0, 0];\n      foundPet.location.coordinates = [1, 1]; // ~157km away\n      await lostPet.save();\n      await foundPet.save();\n      \n      const matches = await MatchingService.findPotentialMatches(\n        lostPet._id.toString(),\n        { maxDistance: 100 } // 100km radius\n      );\n      \n      expect(matches).toHaveLength(0);\n    });\n\n    it('should filter by date range', async () => {\n      mockAiService.calculateSimilarity.mockReturnValue(0.85);\n      \n      // Set found pet to be reported much later\n      foundPet.createdAt = new Date(Date.now() + 10 * 24 * 60 * 60 * 1000); // 10 days later\n      await foundPet.save();\n      \n      const matches = await MatchingService.findPotentialMatches(\n        lostPet._id.toString(),\n        { maxDays: 5 }\n      );\n      \n      expect(matches).toHaveLength(0);\n    });\n\n    it('should sort matches by similarity score', async () => {\n      // Create another found pet with lower similarity\n      const foundPet2 = await new Pet({\n        ...validPetData,\n        name: 'Found Dog 2',\n        status: 'found',\n        owner: testUser2._id,\n        aiData: {\n          breed: 'Labrador',\n          confidence: 0.8,\n          features: [0.5, 0.6, 0.7, 0.8, 0.9]\n        }\n      }).save();\n      \n      mockAiService.calculateSimilarity\n        .mockReturnValueOnce(0.85) // First pet\n        .mockReturnValueOnce(0.75); // Second pet\n      \n      const matches = await MatchingService.findPotentialMatches(lostPet._id.toString());\n      \n      expect(matches).toHaveLength(2);\n      expect(matches[0].similarity).toBeGreaterThan(matches[1].similarity);\n    });\n\n    it('should handle pet without AI data', async () => {\n      lostPet.aiData = undefined;\n      await lostPet.save();\n      \n      const matches = await MatchingService.findPotentialMatches(lostPet._id.toString());\n      \n      expect(matches).toHaveLength(0);\n    });\n\n    it('should exclude pets from same owner', async () => {\n      foundPet.owner = testUser1._id; // Same owner as lost pet\n      await foundPet.save();\n      \n      mockAiService.calculateSimilarity.mockReturnValue(0.95);\n      \n      const matches = await MatchingService.findPotentialMatches(lostPet._id.toString());\n      \n      expect(matches).toHaveLength(0);\n    });\n  });\n\n  describe('createMatch', () => {\n    it('should create match successfully', async () => {\n      const matchData = {\n        lostPetId: lostPet._id.toString(),\n        foundPetId: foundPet._id.toString(),\n        similarity: 0.85,\n        confidence: 'high' as const\n      };\n      \n      const match = await MatchingService.createMatch(matchData);\n      \n      expect(match).toBeDefined();\n      expect(match.lostPet.toString()).toBe(lostPet._id.toString());\n      expect(match.foundPet.toString()).toBe(foundPet._id.toString());\n      expect(match.similarity).toBe(0.85);\n      expect(match.status).toBe('pending');\n    });\n\n    it('should prevent duplicate matches', async () => {\n      const matchData = {\n        lostPetId: lostPet._id.toString(),\n        foundPetId: foundPet._id.toString(),\n        similarity: 0.85,\n        confidence: 'high' as const\n      };\n      \n      await MatchingService.createMatch(matchData);\n      \n      await expect(MatchingService.createMatch(matchData))\n        .rejects.toThrow('配對已存在');\n    });\n\n    it('should send notification emails', async () => {\n      const matchData = {\n        lostPetId: lostPet._id.toString(),\n        foundPetId: foundPet._id.toString(),\n        similarity: 0.85,\n        confidence: 'high' as const\n      };\n      \n      await MatchingService.createMatch(matchData);\n      \n      expect(mockEmailService.sendPetMatchNotification).toHaveBeenCalledTimes(2);\n      expect(mockEmailService.sendPetMatchNotification).toHaveBeenCalledWith(\n        testUser1.email,\n        expect.objectContaining({\n          lostPet: expect.objectContaining({ name: 'Lost Dog' }),\n          foundPet: expect.objectContaining({ name: 'Found Dog' })\n        })\n      );\n    });\n\n    it('should handle email notification failures gracefully', async () => {\n      mockEmailService.sendPetMatchNotification.mockRejectedValue(\n        new Error('Email service unavailable')\n      );\n      \n      const matchData = {\n        lostPetId: lostPet._id.toString(),\n        foundPetId: foundPet._id.toString(),\n        similarity: 0.85,\n        confidence: 'high' as const\n      };\n      \n      // Should not throw error even if email fails\n      const match = await MatchingService.createMatch(matchData);\n      expect(match).toBeDefined();\n    });\n\n    it('should validate pet existence', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      \n      await expect(MatchingService.createMatch({\n        lostPetId: nonExistentId,\n        foundPetId: foundPet._id.toString(),\n        similarity: 0.85,\n        confidence: 'high'\n      })).rejects.toThrow('寵物不存在');\n    });\n\n    it('should validate pet statuses', async () => {\n      foundPet.status = 'lost'; // Both pets are lost\n      await foundPet.save();\n      \n      await expect(MatchingService.createMatch({\n        lostPetId: lostPet._id.toString(),\n        foundPetId: foundPet._id.toString(),\n        similarity: 0.85,\n        confidence: 'high'\n      })).rejects.toThrow('無效的寵物狀態');\n    });\n  });\n\n  describe('getMatchById', () => {\n    let testMatch: IMatch;\n\n    beforeEach(async () => {\n      testMatch = await new Match({\n        lostPet: lostPet._id,\n        foundPet: foundPet._id,\n        similarity: 0.85,\n        confidence: 'high',\n        status: 'pending'\n      }).save();\n    });\n\n    it('should get match by ID with populated data', async () => {\n      const match = await MatchingService.getMatchById(testMatch._id.toString());\n      \n      expect(match).toBeDefined();\n      expect(match?.lostPet).toBeDefined();\n      expect(match?.foundPet).toBeDefined();\n      expect(typeof match?.lostPet).toBe('object');\n      expect(typeof match?.foundPet).toBe('object');\n    });\n\n    it('should return null for non-existent match', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      const match = await MatchingService.getMatchById(nonExistentId);\n      \n      expect(match).toBeNull();\n    });\n  });\n\n  describe('updateMatchStatus', () => {\n    let testMatch: IMatch;\n\n    beforeEach(async () => {\n      testMatch = await new Match({\n        lostPet: lostPet._id,\n        foundPet: foundPet._id,\n        similarity: 0.85,\n        confidence: 'high',\n        status: 'pending'\n      }).save();\n    });\n\n    it('should confirm match successfully', async () => {\n      const updatedMatch = await MatchingService.updateMatchStatus(\n        testMatch._id.toString(),\n        testUser1._id.toString(),\n        'confirmed'\n      );\n      \n      expect(updatedMatch?.status).toBe('confirmed');\n      expect(updatedMatch?.confirmedAt).toBeDefined();\n      expect(updatedMatch?.confirmedBy.toString()).toBe(testUser1._id.toString());\n    });\n\n    it('should reject match successfully', async () => {\n      const updatedMatch = await MatchingService.updateMatchStatus(\n        testMatch._id.toString(),\n        testUser1._id.toString(),\n        'rejected'\n      );\n      \n      expect(updatedMatch?.status).toBe('rejected');\n      expect(updatedMatch?.rejectedAt).toBeDefined();\n    });\n\n    it('should only allow pet owners to update match', async () => {\n      const unauthorizedUser = await new User({\n        ...validUserData,\n        email: 'unauthorized@example.com'\n      }).save();\n      \n      await expect(MatchingService.updateMatchStatus(\n        testMatch._id.toString(),\n        unauthorizedUser._id.toString(),\n        'confirmed'\n      )).rejects.toThrow('無權限');\n    });\n\n    it('should not allow updating already confirmed match', async () => {\n      testMatch.status = 'confirmed';\n      await testMatch.save();\n      \n      await expect(MatchingService.updateMatchStatus(\n        testMatch._id.toString(),\n        testUser1._id.toString(),\n        'rejected'\n      )).rejects.toThrow('配對已經處理過了');\n    });\n\n    it('should handle non-existent match', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      \n      await expect(MatchingService.updateMatchStatus(\n        nonExistentId,\n        testUser1._id.toString(),\n        'confirmed'\n      )).rejects.toThrow('配對不存在');\n    });\n  });\n\n  describe('getUserMatches', () => {\n    beforeEach(async () => {\n      // Create multiple matches\n      await new Match({\n        lostPet: lostPet._id,\n        foundPet: foundPet._id,\n        similarity: 0.85,\n        confidence: 'high',\n        status: 'pending'\n      }).save();\n      \n      const anotherFoundPet = await new Pet({\n        ...validPetData,\n        name: 'Another Found Dog',\n        status: 'found',\n        owner: testUser2._id\n      }).save();\n      \n      await new Match({\n        lostPet: lostPet._id,\n        foundPet: anotherFoundPet._id,\n        similarity: 0.75,\n        confidence: 'medium',\n        status: 'confirmed'\n      }).save();\n    });\n\n    it('should get all matches for user', async () => {\n      const result = await MatchingService.getUserMatches(testUser1._id.toString());\n      \n      expect(result.matches).toHaveLength(2);\n      expect(result.total).toBe(2);\n    });\n\n    it('should filter matches by status', async () => {\n      const result = await MatchingService.getUserMatches(\n        testUser1._id.toString(),\n        { status: 'pending' }\n      );\n      \n      expect(result.matches).toHaveLength(1);\n      expect(result.matches[0].status).toBe('pending');\n    });\n\n    it('should paginate matches', async () => {\n      const result = await MatchingService.getUserMatches(\n        testUser1._id.toString(),\n        { page: 1, limit: 1 }\n      );\n      \n      expect(result.matches).toHaveLength(1);\n      expect(result.totalPages).toBe(2);\n    });\n\n    it('should sort matches by creation date', async () => {\n      const result = await MatchingService.getUserMatches(\n        testUser1._id.toString(),\n        { sortBy: 'createdAt', sortOrder: 'desc' }\n      );\n      \n      expect(result.matches.length).toBeGreaterThan(1);\n      for (let i = 1; i < result.matches.length; i++) {\n        expect(result.matches[i-1].createdAt.getTime())\n          .toBeGreaterThanOrEqual(result.matches[i].createdAt.getTime());\n      }\n    });\n\n    it('should handle user with no matches', async () => {\n      const userWithNoMatches = await new User({\n        ...validUserData,\n        email: 'nomatch@example.com'\n      }).save();\n      \n      const result = await MatchingService.getUserMatches(userWithNoMatches._id.toString());\n      \n      expect(result.matches).toHaveLength(0);\n      expect(result.total).toBe(0);\n    });\n  });\n\n  describe('runAutomaticMatching', () => {\n    beforeEach(async () => {\n      mockAiService.calculateSimilarity.mockReturnValue(0.85);\n    });\n\n    it('should create automatic matches for recent pets', async () => {\n      const result = await MatchingService.runAutomaticMatching();\n      \n      expect(result.matchesCreated).toBe(1);\n      expect(result.petsProcessed).toBe(2);\n      \n      const matches = await Match.find({});\n      expect(matches).toHaveLength(1);\n    });\n\n    it('should not create duplicate matches', async () => {\n      // Run matching twice\n      await MatchingService.runAutomaticMatching();\n      const result = await MatchingService.runAutomaticMatching();\n      \n      expect(result.matchesCreated).toBe(0); // No new matches created\n      \n      const matches = await Match.find({});\n      expect(matches).toHaveLength(1); // Still only one match\n    });\n\n    it('should only process recent pets', async () => {\n      // Make pets old\n      const oldDate = new Date(Date.now() - 8 * 24 * 60 * 60 * 1000); // 8 days ago\n      lostPet.createdAt = oldDate;\n      foundPet.createdAt = oldDate;\n      await lostPet.save();\n      await foundPet.save();\n      \n      const result = await MatchingService.runAutomaticMatching({ maxDays: 7 });\n      \n      expect(result.matchesCreated).toBe(0);\n      expect(result.petsProcessed).toBe(0);\n    });\n\n    it('should handle AI service errors gracefully', async () => {\n      mockAiService.calculateSimilarity.mockImplementation(() => {\n        throw new Error('AI service error');\n      });\n      \n      const result = await MatchingService.runAutomaticMatching();\n      \n      expect(result.matchesCreated).toBe(0);\n      expect(result.errors).toHaveLength(1);\n    });\n  });\n\n  describe('getMatchStatistics', () => {\n    beforeEach(async () => {\n      // Create various matches with different statuses\n      await new Match({\n        lostPet: lostPet._id,\n        foundPet: foundPet._id,\n        similarity: 0.85,\n        confidence: 'high',\n        status: 'pending'\n      }).save();\n      \n      const anotherFoundPet = await new Pet({\n        ...validPetData,\n        name: 'Another Found Dog',\n        status: 'found',\n        owner: testUser2._id\n      }).save();\n      \n      await new Match({\n        lostPet: lostPet._id,\n        foundPet: anotherFoundPet._id,\n        similarity: 0.75,\n        confidence: 'medium',\n        status: 'confirmed'\n      }).save();\n      \n      await new Match({\n        lostPet: lostPet._id,\n        foundPet: anotherFoundPet._id,\n        similarity: 0.65,\n        confidence: 'low',\n        status: 'rejected'\n      }).save();\n    });\n\n    it('should return correct match statistics', async () => {\n      const stats = await MatchingService.getMatchStatistics();\n      \n      expect(stats.total).toBe(3);\n      expect(stats.pending).toBe(1);\n      expect(stats.confirmed).toBe(1);\n      expect(stats.rejected).toBe(1);\n      expect(stats.averageSimilarity).toBeCloseTo(0.75, 2);\n    });\n\n    it('should filter statistics by date range', async () => {\n      const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000);\n      \n      const stats = await MatchingService.getMatchStatistics({\n        startDate: yesterday,\n        endDate: tomorrow\n      });\n      \n      expect(stats.total).toBe(3);\n    });\n\n    it('should handle empty results', async () => {\n      await Match.deleteMany({});\n      \n      const stats = await MatchingService.getMatchStatistics();\n      \n      expect(stats.total).toBe(0);\n      expect(stats.pending).toBe(0);\n      expect(stats.confirmed).toBe(0);\n      expect(stats.rejected).toBe(0);\n      expect(stats.averageSimilarity).toBe(0);\n    });\n  });\n\n  describe('Confidence Level Calculation', () => {\n    it('should calculate high confidence for high similarity', () => {\n      const confidence = MatchingService.calculateConfidence(0.9);\n      expect(confidence).toBe('high');\n    });\n\n    it('should calculate medium confidence for medium similarity', () => {\n      const confidence = MatchingService.calculateConfidence(0.75);\n      expect(confidence).toBe('medium');\n    });\n\n    it('should calculate low confidence for low similarity', () => {\n      const confidence = MatchingService.calculateConfidence(0.6);\n      expect(confidence).toBe('low');\n    });\n  });\n\n  describe('Location Distance Calculation', () => {\n    it('should calculate distance between coordinates correctly', () => {\n      const distance = MatchingService.calculateDistance(\n        [0, 0],\n        [0, 1]\n      );\n      \n      expect(distance).toBeCloseTo(111.32, 1); // ~111km for 1 degree latitude\n    });\n\n    it('should handle same coordinates', () => {\n      const distance = MatchingService.calculateDistance(\n        [0, 0],\n        [0, 0]\n      );\n      \n      expect(distance).toBe(0);\n    });\n  });\n});"],"version":3}