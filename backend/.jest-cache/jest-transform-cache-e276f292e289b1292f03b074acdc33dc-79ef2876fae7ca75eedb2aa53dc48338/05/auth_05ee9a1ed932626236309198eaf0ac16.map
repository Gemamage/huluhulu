{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\auth.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\routes\\auth.ts"],"sourcesContent":["import { Router, Request, Response } from \"express\";\nimport { logger } from \"../utils/logger\";\nimport { ErrorFactory } from \"../utils/errors\";\nimport { ResponseUtil } from \"../utils/response\";\nimport { validateRequest, validateParams } from \"../utils/validation\";\nimport {\n  userRegistrationSchema,\n  userLoginSchema,\n  forgotPasswordSchema,\n  passwordResetSchema,\n  verifyEmailParamsSchema,\n  resendVerificationEmailSchema,\n} from \"../schemas/auth\";\nimport { UserService } from \"../services/userService\";\nimport { EmailService } from \"../services/emailService\";\nimport { VerificationService } from \"../services/verificationService\";\nimport { authenticate } from \"../middleware/auth\";\nimport {\n  requireActiveAccount,\n  requireEmailVerification,\n} from \"../middleware/rbac\";\nimport { IUser } from \"../models/User\";\nimport { asyncHandler } from \"../middleware/error-handler\";\n\nconst router = Router();\nconst userService = new UserService();\n\n// 用戶註冊\nrouter.post(\n  \"/register\",\n  validateRequest(userRegistrationSchema),\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { email, password, name, phone } = req.body;\n    const userData = { email, password, name, phone };\n\n    // 註冊用戶（UserService 內部會檢查電子郵件是否已存在）\n    const result = await userService.registerUser(userData);\n\n    logger.info(\"用戶註冊成功\", { email, name, userId: result.user._id });\n\n    ResponseUtil.created(\n      res,\n      {\n        user: {\n          id: result.user._id,\n          email: result.user.email,\n          name: result.user.name,\n          isEmailVerified: result.user.isEmailVerified,\n        },\n      },\n      \"註冊成功，請檢查您的電子郵件以驗證帳號\",\n    );\n  }),\n);\n\n// 用戶登入\nrouter.post(\n  \"/login\",\n  validateRequest(userLoginSchema),\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { email, password } = req.body;\n    const loginData = { email, password };\n\n    // 用戶登入\n    const { user, token } = await userService.loginUser(loginData);\n\n    logger.info(\"用戶登入成功\", { email, userId: user._id });\n\n    ResponseUtil.success(\n      res,\n      {\n        user: {\n          id: user._id,\n          email: user.email,\n          name: user.name,\n          phone: user.phone,\n          avatar: user.avatar,\n          role: user.role,\n          isEmailVerified: user.isEmailVerified,\n          lastLoginAt: user.lastLoginAt,\n        },\n        token,\n      },\n      \"登入成功\",\n    );\n  }),\n);\n\n// 用戶登出\nrouter.post(\n  \"/logout\",\n  authenticate,\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const userId = (req.user as IUser)?._id?.toString();\n\n    // TODO: 實作令牌黑名單機制（可選）\n    // 目前採用客戶端刪除令牌的方式\n\n    logger.info(\"用戶登出成功\", { userId });\n\n    ResponseUtil.success(res, null, \"登出成功\");\n  }),\n);\n\n// 刷新令牌\nrouter.post(\n  \"/refresh\",\n  authenticate,\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const userId = (req.user as IUser)?._id?.toString();\n\n    if (!userId) {\n      throw ErrorFactory.createAuthenticationError(\"invalid_token\");\n    }\n\n    // 獲取用戶資料\n    const user = await userService.getUserById(userId);\n    if (!user) {\n      throw ErrorFactory.createNotFoundError(\"用戶\", userId);\n    }\n\n    // 生成新令牌\n    const newToken = user.generateAuthToken();\n\n    logger.info(\"令牌刷新成功\", { userId });\n\n    ResponseUtil.success(\n      res,\n      {\n        token: newToken,\n        user: {\n          id: user._id,\n          email: user.email,\n          name: user.name,\n          phone: user.phone,\n          avatar: user.avatar,\n          role: user.role,\n          isEmailVerified: user.isEmailVerified,\n        },\n      },\n      \"令牌刷新成功\",\n    );\n  }),\n);\n\n// 忘記密碼\nrouter.post(\n  \"/forgot-password\",\n  validateRequest(forgotPasswordSchema),\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { email } = req.body;\n\n    // 查找用戶\n    const user = await userService.getUserByEmail(email);\n    if (!user) {\n      // 為了安全考量，即使用戶不存在也返回成功訊息\n      ResponseUtil.success(\n        res,\n        null,\n        \"如果該電子郵件地址存在於我們的系統中，您將收到密碼重設郵件\",\n      );\n      return;\n    }\n\n    // 生成密碼重設令牌\n    const resetToken = user.generatePasswordResetToken();\n    await user.save();\n\n    // 發送密碼重設郵件\n    await EmailService.sendPasswordResetEmail(\n      user.email,\n      resetToken,\n      user.name,\n    );\n\n    logger.info(\"密碼重設郵件已發送\", { email, userId: user._id });\n\n    ResponseUtil.success(res, null, \"密碼重設郵件已發送，請檢查您的電子郵件\");\n  }),\n);\n\n// 重設密碼\nrouter.post(\n  \"/reset-password\",\n  validateRequest(passwordResetSchema),\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { token, newPassword } = req.body;\n\n    // 重設密碼\n    await userService.resetPassword(token, newPassword);\n\n    logger.info(\"密碼重設成功\");\n\n    ResponseUtil.success(res, null, \"密碼重設成功，請使用新密碼登入\");\n  }),\n);\n\n// 獲取當前用戶資訊\nrouter.get(\n  \"/me\",\n  authenticate,\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const userId = (req.user as IUser)?._id.toString();\n\n    if (!userId) {\n      throw ErrorFactory.createAuthenticationError(\"invalid_token\");\n    }\n\n    // 獲取用戶資訊\n    const user = await userService.getUserById(userId);\n    if (!user) {\n      throw ErrorFactory.createNotFoundError(\"用戶\", userId);\n    }\n\n    logger.info(\"獲取用戶資訊成功\", { userId });\n\n    ResponseUtil.success(res, {\n      user: {\n        id: user._id,\n        email: user.email,\n        name: user.name,\n        phone: user.phone,\n        avatar: user.avatar,\n        role: user.role,\n        isEmailVerified: user.isEmailVerified,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n        lastLoginAt: user.lastLoginAt,\n      },\n    });\n  }),\n);\n\n// 電子郵件驗證\nrouter.get(\n  \"/verify-email/:token\",\n  validateParams(verifyEmailParamsSchema),\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { token } = req.params;\n\n    if (!token) {\n      throw ErrorFactory.createValidationError(\"驗證令牌為必填項目\");\n    }\n\n    // 使用新的驗證服務\n    const result = await VerificationService.verifyEmailToken(token);\n\n    if (result.success) {\n      logger.info(\"電子郵件驗證成功\", { token });\n      ResponseUtil.success(\n        res,\n        result.user\n          ? {\n              user: {\n                id: result.user._id,\n                email: result.user.email,\n                name: result.user.name,\n                isEmailVerified: result.user.isEmailVerified,\n              },\n            }\n          : null,\n        result.message,\n      );\n    } else {\n      throw ErrorFactory.createValidationError(result.message);\n    }\n  }),\n);\n\n// 重新發送驗證郵件（需要登入）\nrouter.post(\n  \"/resend-verification\",\n  authenticate,\n  requireActiveAccount,\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const user = req.user as IUser;\n\n    // 使用新的驗證服務\n    const result = await VerificationService.resendVerificationEmail(\n      user.email,\n    );\n\n    if (result.success) {\n      logger.info(\"重新發送驗證郵件成功\", {\n        userId: user._id,\n        email: user.email,\n      });\n      ResponseUtil.success(res, null, result.message);\n    } else {\n      throw ErrorFactory.createValidationError(result.message);\n    }\n  }),\n);\n\n// 重新發送驗證郵件\nrouter.post(\n  \"/resend-verification\",\n  validateRequest(resendVerificationEmailSchema),\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { email } = req.body;\n\n    // 使用新的驗證服務\n    const result = await VerificationService.resendVerificationEmail(email);\n\n    if (result.success) {\n      logger.info(\"重新發送驗證郵件成功\", { email });\n      ResponseUtil.success(res, null, result.message);\n    } else {\n      throw ErrorFactory.createValidationError(result.message);\n    }\n  }),\n);\n\n// 檢查驗證狀態\nrouter.get(\n  \"/verification-status\",\n  authenticate,\n  requireActiveAccount,\n  asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const user = req.user as IUser;\n\n    const status = await VerificationService.checkVerificationStatus(user);\n\n    ResponseUtil.success(res, {\n      needsVerification: status.needsVerification,\n      hasValidToken: status.hasValidToken,\n      tokenExpiry: status.tokenExpiry,\n      isEmailVerified: user.isEmailVerified,\n    });\n  }),\n);\n\nexport { router as authRoutes };\n"],"version":3}