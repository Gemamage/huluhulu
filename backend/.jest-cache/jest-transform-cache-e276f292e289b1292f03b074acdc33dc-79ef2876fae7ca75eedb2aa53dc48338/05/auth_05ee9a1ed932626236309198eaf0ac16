d4fe51f86d3ba2023eae2fa92b160913
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRoutes = void 0;
const express_1 = require("express");
const logger_1 = require("../utils/logger");
const errors_1 = require("../utils/errors");
const response_1 = require("../utils/response");
const validation_1 = require("../utils/validation");
const auth_1 = require("../schemas/auth");
const userService_1 = require("../services/userService");
const emailService_1 = require("../services/emailService");
const verificationService_1 = require("../services/verificationService");
const auth_2 = require("../middleware/auth");
const rbac_1 = require("../middleware/rbac");
const error_handler_1 = require("../middleware/error-handler");
const router = (0, express_1.Router)();
exports.authRoutes = router;
const userService = new userService_1.UserService();
// 用戶註冊
router.post("/register", (0, validation_1.validateRequest)(auth_1.userRegistrationSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email, password, name, phone } = req.body;
    const userData = { email, password, name, phone };
    // 註冊用戶（UserService 內部會檢查電子郵件是否已存在）
    const result = await userService.registerUser(userData);
    logger_1.logger.info("用戶註冊成功", { email, name, userId: result.user._id });
    response_1.ResponseUtil.created(res, {
        user: {
            id: result.user._id,
            email: result.user.email,
            name: result.user.name,
            isEmailVerified: result.user.isEmailVerified,
        },
    }, "註冊成功，請檢查您的電子郵件以驗證帳號");
}));
// 用戶登入
router.post("/login", (0, validation_1.validateRequest)(auth_1.userLoginSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email, password } = req.body;
    const loginData = { email, password };
    // 用戶登入
    const { user, token } = await userService.loginUser(loginData);
    logger_1.logger.info("用戶登入成功", { email, userId: user._id });
    response_1.ResponseUtil.success(res, {
        user: {
            id: user._id,
            email: user.email,
            name: user.name,
            phone: user.phone,
            avatar: user.avatar,
            role: user.role,
            isEmailVerified: user.isEmailVerified,
            lastLoginAt: user.lastLoginAt,
        },
        token,
    }, "登入成功");
}));
// 用戶登出
router.post("/logout", auth_2.authenticate, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user?._id?.toString();
    // TODO: 實作令牌黑名單機制（可選）
    // 目前採用客戶端刪除令牌的方式
    logger_1.logger.info("用戶登出成功", { userId });
    response_1.ResponseUtil.success(res, null, "登出成功");
}));
// 刷新令牌
router.post("/refresh", auth_2.authenticate, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user?._id?.toString();
    if (!userId) {
        throw errors_1.ErrorFactory.createAuthenticationError("invalid_token");
    }
    // 獲取用戶資料
    const user = await userService.getUserById(userId);
    if (!user) {
        throw errors_1.ErrorFactory.createNotFoundError("用戶", userId);
    }
    // 生成新令牌
    const newToken = user.generateAuthToken();
    logger_1.logger.info("令牌刷新成功", { userId });
    response_1.ResponseUtil.success(res, {
        token: newToken,
        user: {
            id: user._id,
            email: user.email,
            name: user.name,
            phone: user.phone,
            avatar: user.avatar,
            role: user.role,
            isEmailVerified: user.isEmailVerified,
        },
    }, "令牌刷新成功");
}));
// 忘記密碼
router.post("/forgot-password", (0, validation_1.validateRequest)(auth_1.forgotPasswordSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email } = req.body;
    // 查找用戶
    const user = await userService.getUserByEmail(email);
    if (!user) {
        // 為了安全考量，即使用戶不存在也返回成功訊息
        response_1.ResponseUtil.success(res, null, "如果該電子郵件地址存在於我們的系統中，您將收到密碼重設郵件");
        return;
    }
    // 生成密碼重設令牌
    const resetToken = user.generatePasswordResetToken();
    await user.save();
    // 發送密碼重設郵件
    await emailService_1.EmailService.sendPasswordResetEmail(user.email, resetToken, user.name);
    logger_1.logger.info("密碼重設郵件已發送", { email, userId: user._id });
    response_1.ResponseUtil.success(res, null, "密碼重設郵件已發送，請檢查您的電子郵件");
}));
// 重設密碼
router.post("/reset-password", (0, validation_1.validateRequest)(auth_1.passwordResetSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { token, newPassword } = req.body;
    // 重設密碼
    await userService.resetPassword(token, newPassword);
    logger_1.logger.info("密碼重設成功");
    response_1.ResponseUtil.success(res, null, "密碼重設成功，請使用新密碼登入");
}));
// 獲取當前用戶資訊
router.get("/me", auth_2.authenticate, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user?._id.toString();
    if (!userId) {
        throw errors_1.ErrorFactory.createAuthenticationError("invalid_token");
    }
    // 獲取用戶資訊
    const user = await userService.getUserById(userId);
    if (!user) {
        throw errors_1.ErrorFactory.createNotFoundError("用戶", userId);
    }
    logger_1.logger.info("獲取用戶資訊成功", { userId });
    response_1.ResponseUtil.success(res, {
        user: {
            id: user._id,
            email: user.email,
            name: user.name,
            phone: user.phone,
            avatar: user.avatar,
            role: user.role,
            isEmailVerified: user.isEmailVerified,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt,
            lastLoginAt: user.lastLoginAt,
        },
    });
}));
// 電子郵件驗證
router.get("/verify-email/:token", (0, validation_1.validateParams)(auth_1.verifyEmailParamsSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { token } = req.params;
    if (!token) {
        throw errors_1.ErrorFactory.createValidationError("驗證令牌為必填項目");
    }
    // 使用新的驗證服務
    const result = await verificationService_1.VerificationService.verifyEmailToken(token);
    if (result.success) {
        logger_1.logger.info("電子郵件驗證成功", { token });
        response_1.ResponseUtil.success(res, result.user
            ? {
                user: {
                    id: result.user._id,
                    email: result.user.email,
                    name: result.user.name,
                    isEmailVerified: result.user.isEmailVerified,
                },
            }
            : null, result.message);
    }
    else {
        throw errors_1.ErrorFactory.createValidationError(result.message);
    }
}));
// 重新發送驗證郵件（需要登入）
router.post("/resend-verification", auth_2.authenticate, rbac_1.requireActiveAccount, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const user = req.user;
    // 使用新的驗證服務
    const result = await verificationService_1.VerificationService.resendVerificationEmail(user.email);
    if (result.success) {
        logger_1.logger.info("重新發送驗證郵件成功", {
            userId: user._id,
            email: user.email,
        });
        response_1.ResponseUtil.success(res, null, result.message);
    }
    else {
        throw errors_1.ErrorFactory.createValidationError(result.message);
    }
}));
// 重新發送驗證郵件
router.post("/resend-verification", (0, validation_1.validateRequest)(auth_1.resendVerificationEmailSchema), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { email } = req.body;
    // 使用新的驗證服務
    const result = await verificationService_1.VerificationService.resendVerificationEmail(email);
    if (result.success) {
        logger_1.logger.info("重新發送驗證郵件成功", { email });
        response_1.ResponseUtil.success(res, null, result.message);
    }
    else {
        throw errors_1.ErrorFactory.createValidationError(result.message);
    }
}));
// 檢查驗證狀態
router.get("/verification-status", auth_2.authenticate, rbac_1.requireActiveAccount, (0, error_handler_1.asyncHandler)(async (req, res) => {
    const user = req.user;
    const status = await verificationService_1.VerificationService.checkVerificationStatus(user);
    response_1.ResponseUtil.success(res, {
        needsVerification: status.needsVerification,
        hasValidToken: status.hasValidToken,
        tokenExpiry: status.tokenExpiry,
        isEmailVerified: user.isEmailVerified,
    });
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc2VyXFxEZXNrdG9wXFx0cmFlcHJvamVjdFxcdGVzdDJcXHBldC1maW5kZXItYXBwXFxiYWNrZW5kXFxzcmNcXHJvdXRlc1xcYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBb0Q7QUFDcEQsNENBQXlDO0FBQ3pDLDRDQUErQztBQUMvQyxnREFBaUQ7QUFDakQsb0RBQXNFO0FBQ3RFLDBDQU95QjtBQUN6Qix5REFBc0Q7QUFDdEQsMkRBQXdEO0FBQ3hELHlFQUFzRTtBQUN0RSw2Q0FBa0Q7QUFDbEQsNkNBRzRCO0FBRTVCLCtEQUEyRDtBQUUzRCxNQUFNLE1BQU0sR0FBRyxJQUFBLGdCQUFNLEdBQUUsQ0FBQztBQW9UTCw0QkFBVTtBQW5UN0IsTUFBTSxXQUFXLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7QUFFdEMsT0FBTztBQUNQLE1BQU0sQ0FBQyxJQUFJLENBQ1QsV0FBVyxFQUNYLElBQUEsNEJBQWUsRUFBQyw2QkFBc0IsQ0FBQyxFQUN2QyxJQUFBLDRCQUFZLEVBQUMsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQWlCLEVBQUU7SUFDaEUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDbEQsTUFBTSxRQUFRLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUVsRCxtQ0FBbUM7SUFDbkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxXQUFXLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXhELGVBQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRWhFLHVCQUFZLENBQUMsT0FBTyxDQUNsQixHQUFHLEVBQ0g7UUFDRSxJQUFJLEVBQUU7WUFDSixFQUFF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RUYsU0FBUztBQUNULE1BQU0sQ0FBQyxHQUFHLENBQ1Isc0JBQXNCLEVBQ3RCLG1CQUFZLEVBQ1osMkJBQW9CLEVBQ3BCLElBQUEsNEJBQVksRUFBQyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBaUIsRUFBRTtJQUNoRSxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBYSxDQUFDO0lBRS9CLE1BQU0sTUFBTSxHQUFHLE1BQU0seUNBQW1CLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdkUsdUJBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO1FBQ3hCLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxpQkFBaUI7UUFDM0MsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhO1FBQ25DLFdBQVcsRUFBRSxNQUFNLENBQUMsV0FBVztRQUMvQixlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7S0FDdEMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVzZXJcXERlc2t0b3BcXHRyYWVwcm9qZWN0XFx0ZXN0MlxccGV0LWZpbmRlci1hcHBcXGJhY2tlbmRcXHNyY1xccm91dGVzXFxhdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIi4uL3V0aWxzL2xvZ2dlclwiO1xuaW1wb3J0IHsgRXJyb3JGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWxzL2Vycm9yc1wiO1xuaW1wb3J0IHsgUmVzcG9uc2VVdGlsIH0gZnJvbSBcIi4uL3V0aWxzL3Jlc3BvbnNlXCI7XG5pbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QsIHZhbGlkYXRlUGFyYW1zIH0gZnJvbSBcIi4uL3V0aWxzL3ZhbGlkYXRpb25cIjtcbmltcG9ydCB7XG4gIHVzZXJSZWdpc3RyYXRpb25TY2hlbWEsXG4gIHVzZXJMb2dpblNjaGVtYSxcbiAgZm9yZ290UGFzc3dvcmRTY2hlbWEsXG4gIHBhc3N3b3JkUmVzZXRTY2hlbWEsXG4gIHZlcmlmeUVtYWlsUGFyYW1zU2NoZW1hLFxuICByZXNlbmRWZXJpZmljYXRpb25FbWFpbFNjaGVtYSxcbn0gZnJvbSBcIi4uL3NjaGVtYXMvYXV0aFwiO1xuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvdXNlclNlcnZpY2VcIjtcbmltcG9ydCB7IEVtYWlsU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9lbWFpbFNlcnZpY2VcIjtcbmltcG9ydCB7IFZlcmlmaWNhdGlvblNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvdmVyaWZpY2F0aW9uU2VydmljZVwiO1xuaW1wb3J0IHsgYXV0aGVudGljYXRlIH0gZnJvbSBcIi4uL21pZGRsZXdhcmUvYXV0aFwiO1xuaW1wb3J0IHtcbiAgcmVxdWlyZUFjdGl2ZUFjY291bnQsXG4gIHJlcXVpcmVFbWFpbFZlcmlmaWNhdGlvbixcbn0gZnJvbSBcIi4uL21pZGRsZXdhcmUvcmJhY1wiO1xuaW1wb3J0IHsgSVVzZXIgfSBmcm9tIFwiLi4vbW9kZWxzL1VzZXJcIjtcbmltcG9ydCB7IGFzeW5jSGFuZGxlciB9IGZyb20gXCIuLi9taWRkbGV3YXJlL2Vycm9yLWhhbmRsZXJcIjtcblxuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5jb25zdCB1c2VyU2VydmljZSA9IG5ldyBVc2VyU2VydmljZSgpO1xuXG4vLyDnlKjmiLboqLvlhopcbnJvdXRlci5wb3N0KFxuICBcIi9yZWdpc3RlclwiLFxuICB2YWxpZGF0ZVJlcXVlc3QodXNlclJlZ2lzdHJhdGlvblNjaGVtYSksXG4gIGFzeW5jSGFuZGxlcihhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQsIG5hbWUsIHBob25lIH0gPSByZXEuYm9keTtcbiAgICBjb25zdCB1c2VyRGF0YSA9IHsgZW1haWwsIHBhc3N3b3JkLCBuYW1lLCBwaG9uZSB9O1xuXG4gICAgLy8g6Ki75YaK55So5oi277yIVXNlclNlcnZpY2Ug5YWn6YOo5pyD5qqi5p+l6Zu75a2Q6YO15Lu25piv5ZCm5bey5a2Y5Zyo77yJXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlclNlcnZpY2UucmVnaXN0ZXJVc2VyKHVzZXJEYXRhKTtcblxuICAgIGxvZ2dlci5pbmZvKFwi55So5oi26Ki75YaK5oiQ5YqfXCIsIHsgZW1haWwsIG5hbWUsIHVzZXJJZDogcmVzdWx0LnVzZXIuX2lkIH0pO1xuXG4gICAgUmVzcG9uc2VVdGlsLmNyZWF0ZWQoXG4gICAgICByZXMsXG4gICAgICB7XG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICBpZDogcmVzdWx0LnVzZXIuX2lkLFxuICAgICAgICAgIGVtYWlsOiByZXN1bHQudXNlci5lbWFpbCxcbiAgICAgICAgICBuYW1lOiByZXN1bHQudXNlci5uYW1lLFxuICAgICAgICAgIGlzRW1haWxWZXJpZmllZDogcmVzdWx0LnVzZXIuaXNFbWFpbFZlcmlmaWVkLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIFwi6Ki75YaK5oiQ5Yqf77yM6KuL5qqi5p+l5oKo55qE6Zu75a2Q6YO15Lu25Lul6amX6K2J5biz6JmfXCIsXG4gICAgKTtcbiAgfSksXG4pO1xuXG4vLyDnlKjmiLbnmbvlhaVcbnJvdXRlci5wb3N0KFxuICBcIi9sb2dpblwiLFxuICB2YWxpZGF0ZVJlcXVlc3QodXNlckxvZ2luU2NoZW1hKSxcbiAgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG4gICAgY29uc3QgbG9naW5EYXRhID0geyBlbWFpbCwgcGFzc3dvcmQgfTtcblxuICAgIC8vIOeUqOaItueZu+WFpVxuICAgIGNvbnN0IHsgdXNlciwgdG9rZW4gfSA9IGF3YWl0IHVzZXJTZXJ2aWNlLmxvZ2luVXNlcihsb2dpbkRhdGEpO1xuXG4gICAgbG9nZ2VyLmluZm8oXCLnlKjmiLbnmbvlhaXmiJDlip9cIiwgeyBlbWFpbCwgdXNlcklkOiB1c2VyLl9pZCB9KTtcblxuICAgIFJlc3BvbnNlVXRpbC5zdWNjZXNzKFxuICAgICAgcmVzLFxuICAgICAge1xuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgaWQ6IHVzZXIuX2lkLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgICBwaG9uZTogdXNlci5waG9uZSxcbiAgICAgICAgICBhdmF0YXI6IHVzZXIuYXZhdGFyLFxuICAgICAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICAgICAgICBpc0VtYWlsVmVyaWZpZWQ6IHVzZXIuaXNFbWFpbFZlcmlmaWVkLFxuICAgICAgICAgIGxhc3RMb2dpbkF0OiB1c2VyLmxhc3RMb2dpbkF0LFxuICAgICAgICB9LFxuICAgICAgICB0b2tlbixcbiAgICAgIH0sXG4gICAgICBcIueZu+WFpeaIkOWKn1wiLFxuICAgICk7XG4gIH0pLFxuKTtcblxuLy8g55So5oi255m75Ye6XG5yb3V0ZXIucG9zdChcbiAgXCIvbG9nb3V0XCIsXG4gIGF1dGhlbnRpY2F0ZSxcbiAgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCB1c2VySWQgPSAocmVxLnVzZXIgYXMgSVVzZXIpPy5faWQ/LnRvU3RyaW5nKCk7XG5cbiAgICAvLyBUT0RPOiDlr6bkvZzku6TniYzpu5HlkI3llq7mqZ/liLbvvIjlj6/pgbjvvIlcbiAgICAvLyDnm67liY3mjqHnlKjlrqLmiLbnq6/liKrpmaTku6TniYznmoTmlrnlvI9cblxuICAgIGxvZ2dlci5pbmZvKFwi55So5oi255m75Ye65oiQ5YqfXCIsIHsgdXNlcklkIH0pO1xuXG4gICAgUmVzcG9uc2VVdGlsLnN1Y2Nlc3MocmVzLCBudWxsLCBcIueZu+WHuuaIkOWKn1wiKTtcbiAgfSksXG4pO1xuXG4vLyDliLfmlrDku6TniYxcbnJvdXRlci5wb3N0KFxuICBcIi9yZWZyZXNoXCIsXG4gIGF1dGhlbnRpY2F0ZSxcbiAgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCB1c2VySWQgPSAocmVxLnVzZXIgYXMgSVVzZXIpPy5faWQ/LnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgdGhyb3cgRXJyb3JGYWN0b3J5LmNyZWF0ZUF1dGhlbnRpY2F0aW9uRXJyb3IoXCJpbnZhbGlkX3Rva2VuXCIpO1xuICAgIH1cblxuICAgIC8vIOeNsuWPlueUqOaItuizh+aWmVxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB1c2VyU2VydmljZS5nZXRVc2VyQnlJZCh1c2VySWQpO1xuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgRXJyb3JGYWN0b3J5LmNyZWF0ZU5vdEZvdW5kRXJyb3IoXCLnlKjmiLZcIiwgdXNlcklkKTtcbiAgICB9XG5cbiAgICAvLyDnlJ/miJDmlrDku6TniYxcbiAgICBjb25zdCBuZXdUb2tlbiA9IHVzZXIuZ2VuZXJhdGVBdXRoVG9rZW4oKTtcblxuICAgIGxvZ2dlci5pbmZvKFwi5Luk54mM5Yi35paw5oiQ5YqfXCIsIHsgdXNlcklkIH0pO1xuXG4gICAgUmVzcG9uc2VVdGlsLnN1Y2Nlc3MoXG4gICAgICByZXMsXG4gICAgICB7XG4gICAgICAgIHRva2VuOiBuZXdUb2tlbixcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIGlkOiB1c2VyLl9pZCxcbiAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICAgICAgcGhvbmU6IHVzZXIucGhvbmUsXG4gICAgICAgICAgYXZhdGFyOiB1c2VyLmF2YXRhcixcbiAgICAgICAgICByb2xlOiB1c2VyLnJvbGUsXG4gICAgICAgICAgaXNFbWFpbFZlcmlmaWVkOiB1c2VyLmlzRW1haWxWZXJpZmllZCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBcIuS7pOeJjOWIt+aWsOaIkOWKn1wiLFxuICAgICk7XG4gIH0pLFxuKTtcblxuLy8g5b+Y6KiY5a+G56K8XG5yb3V0ZXIucG9zdChcbiAgXCIvZm9yZ290LXBhc3N3b3JkXCIsXG4gIHZhbGlkYXRlUmVxdWVzdChmb3Jnb3RQYXNzd29yZFNjaGVtYSksXG4gIGFzeW5jSGFuZGxlcihhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgeyBlbWFpbCB9ID0gcmVxLmJvZHk7XG5cbiAgICAvLyDmn6Xmib7nlKjmiLZcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdXNlclNlcnZpY2UuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgIGlmICghdXNlcikge1xuICAgICAgLy8g54K65LqG5a6J5YWo6ICD6YeP77yM5Y2z5L2/55So5oi25LiN5a2Y5Zyo5Lmf6L+U5Zue5oiQ5Yqf6KiK5oGvXG4gICAgICBSZXNwb25zZVV0aWwuc3VjY2VzcyhcbiAgICAgICAgcmVzLFxuICAgICAgICBudWxsLFxuICAgICAgICBcIuWmguaenOipsumbu+WtkOmDteS7tuWcsOWdgOWtmOWcqOaWvOaIkeWAkeeahOezu+e1seS4re+8jOaCqOWwh+aUtuWIsOWvhueivOmHjeioremDteS7tlwiLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDnlJ/miJDlr4bnorzph43oqK3ku6TniYxcbiAgICBjb25zdCByZXNldFRva2VuID0gdXNlci5nZW5lcmF0ZVBhc3N3b3JkUmVzZXRUb2tlbigpO1xuICAgIGF3YWl0IHVzZXIuc2F2ZSgpO1xuXG4gICAgLy8g55m86YCB5a+G56K86YeN6Kit6YO15Lu2XG4gICAgYXdhaXQgRW1haWxTZXJ2aWNlLnNlbmRQYXNzd29yZFJlc2V0RW1haWwoXG4gICAgICB1c2VyLmVtYWlsLFxuICAgICAgcmVzZXRUb2tlbixcbiAgICAgIHVzZXIubmFtZSxcbiAgICApO1xuXG4gICAgbG9nZ2VyLmluZm8oXCLlr4bnorzph43oqK3pg7Xku7blt7LnmbzpgIFcIiwgeyBlbWFpbCwgdXNlcklkOiB1c2VyLl9pZCB9KTtcblxuICAgIFJlc3BvbnNlVXRpbC5zdWNjZXNzKHJlcywgbnVsbCwgXCLlr4bnorzph43oqK3pg7Xku7blt7LnmbzpgIHvvIzoq4vmqqLmn6XmgqjnmoTpm7vlrZDpg7Xku7ZcIik7XG4gIH0pLFxuKTtcblxuLy8g6YeN6Kit5a+G56K8XG5yb3V0ZXIucG9zdChcbiAgXCIvcmVzZXQtcGFzc3dvcmRcIixcbiAgdmFsaWRhdGVSZXF1ZXN0KHBhc3N3b3JkUmVzZXRTY2hlbWEpLFxuICBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHsgdG9rZW4sIG5ld1Bhc3N3b3JkIH0gPSByZXEuYm9keTtcblxuICAgIC8vIOmHjeioreWvhueivFxuICAgIGF3YWl0IHVzZXJTZXJ2aWNlLnJlc2V0UGFzc3dvcmQodG9rZW4sIG5ld1Bhc3N3b3JkKTtcblxuICAgIGxvZ2dlci5pbmZvKFwi5a+G56K86YeN6Kit5oiQ5YqfXCIpO1xuXG4gICAgUmVzcG9uc2VVdGlsLnN1Y2Nlc3MocmVzLCBudWxsLCBcIuWvhueivOmHjeioreaIkOWKn++8jOiri+S9v+eUqOaWsOWvhueivOeZu+WFpVwiKTtcbiAgfSksXG4pO1xuXG4vLyDnjbLlj5bnlbbliY3nlKjmiLbos4foqIpcbnJvdXRlci5nZXQoXG4gIFwiL21lXCIsXG4gIGF1dGhlbnRpY2F0ZSxcbiAgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCB1c2VySWQgPSAocmVxLnVzZXIgYXMgSVVzZXIpPy5faWQudG9TdHJpbmcoKTtcblxuICAgIGlmICghdXNlcklkKSB7XG4gICAgICB0aHJvdyBFcnJvckZhY3RvcnkuY3JlYXRlQXV0aGVudGljYXRpb25FcnJvcihcImludmFsaWRfdG9rZW5cIik7XG4gICAgfVxuXG4gICAgLy8g542y5Y+W55So5oi26LOH6KiKXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHVzZXJTZXJ2aWNlLmdldFVzZXJCeUlkKHVzZXJJZCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBFcnJvckZhY3RvcnkuY3JlYXRlTm90Rm91bmRFcnJvcihcIueUqOaItlwiLCB1c2VySWQpO1xuICAgIH1cblxuICAgIGxvZ2dlci5pbmZvKFwi542y5Y+W55So5oi26LOH6KiK5oiQ5YqfXCIsIHsgdXNlcklkIH0pO1xuXG4gICAgUmVzcG9uc2VVdGlsLnN1Y2Nlc3MocmVzLCB7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGlkOiB1c2VyLl9pZCxcbiAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgcGhvbmU6IHVzZXIucGhvbmUsXG4gICAgICAgIGF2YXRhcjogdXNlci5hdmF0YXIsXG4gICAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICAgICAgaXNFbWFpbFZlcmlmaWVkOiB1c2VyLmlzRW1haWxWZXJpZmllZCxcbiAgICAgICAgY3JlYXRlZEF0OiB1c2VyLmNyZWF0ZWRBdCxcbiAgICAgICAgdXBkYXRlZEF0OiB1c2VyLnVwZGF0ZWRBdCxcbiAgICAgICAgbGFzdExvZ2luQXQ6IHVzZXIubGFzdExvZ2luQXQsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KSxcbik7XG5cbi8vIOmbu+WtkOmDteS7tumpl+itiVxucm91dGVyLmdldChcbiAgXCIvdmVyaWZ5LWVtYWlsLzp0b2tlblwiLFxuICB2YWxpZGF0ZVBhcmFtcyh2ZXJpZnlFbWFpbFBhcmFtc1NjaGVtYSksXG4gIGFzeW5jSGFuZGxlcihhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgeyB0b2tlbiB9ID0gcmVxLnBhcmFtcztcblxuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRocm93IEVycm9yRmFjdG9yeS5jcmVhdGVWYWxpZGF0aW9uRXJyb3IoXCLpqZforYnku6TniYzngrrlv4XloavpoIXnm65cIik7XG4gICAgfVxuXG4gICAgLy8g5L2/55So5paw55qE6amX6K2J5pyN5YuZXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgVmVyaWZpY2F0aW9uU2VydmljZS52ZXJpZnlFbWFpbFRva2VuKHRva2VuKTtcblxuICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgbG9nZ2VyLmluZm8oXCLpm7vlrZDpg7Xku7bpqZforYnmiJDlip9cIiwgeyB0b2tlbiB9KTtcbiAgICAgIFJlc3BvbnNlVXRpbC5zdWNjZXNzKFxuICAgICAgICByZXMsXG4gICAgICAgIHJlc3VsdC51c2VyXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0LnVzZXIuX2lkLFxuICAgICAgICAgICAgICAgIGVtYWlsOiByZXN1bHQudXNlci5lbWFpbCxcbiAgICAgICAgICAgICAgICBuYW1lOiByZXN1bHQudXNlci5uYW1lLFxuICAgICAgICAgICAgICAgIGlzRW1haWxWZXJpZmllZDogcmVzdWx0LnVzZXIuaXNFbWFpbFZlcmlmaWVkLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgcmVzdWx0Lm1lc3NhZ2UsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvckZhY3RvcnkuY3JlYXRlVmFsaWRhdGlvbkVycm9yKHJlc3VsdC5tZXNzYWdlKTtcbiAgICB9XG4gIH0pLFxuKTtcblxuLy8g6YeN5paw55m86YCB6amX6K2J6YO15Lu277yI6ZyA6KaB55m75YWl77yJXG5yb3V0ZXIucG9zdChcbiAgXCIvcmVzZW5kLXZlcmlmaWNhdGlvblwiLFxuICBhdXRoZW50aWNhdGUsXG4gIHJlcXVpcmVBY3RpdmVBY2NvdW50LFxuICBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHVzZXIgPSByZXEudXNlciBhcyBJVXNlcjtcblxuICAgIC8vIOS9v+eUqOaWsOeahOmpl+itieacjeWLmVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFZlcmlmaWNhdGlvblNlcnZpY2UucmVzZW5kVmVyaWZpY2F0aW9uRW1haWwoXG4gICAgICB1c2VyLmVtYWlsLFxuICAgICk7XG5cbiAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIGxvZ2dlci5pbmZvKFwi6YeN5paw55m86YCB6amX6K2J6YO15Lu25oiQ5YqfXCIsIHtcbiAgICAgICAgdXNlcklkOiB1c2VyLl9pZCxcbiAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICB9KTtcbiAgICAgIFJlc3BvbnNlVXRpbC5zdWNjZXNzKHJlcywgbnVsbCwgcmVzdWx0Lm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvckZhY3RvcnkuY3JlYXRlVmFsaWRhdGlvbkVycm9yKHJlc3VsdC5tZXNzYWdlKTtcbiAgICB9XG4gIH0pLFxuKTtcblxuLy8g6YeN5paw55m86YCB6amX6K2J6YO15Lu2XG5yb3V0ZXIucG9zdChcbiAgXCIvcmVzZW5kLXZlcmlmaWNhdGlvblwiLFxuICB2YWxpZGF0ZVJlcXVlc3QocmVzZW5kVmVyaWZpY2F0aW9uRW1haWxTY2hlbWEpLFxuICBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHsgZW1haWwgfSA9IHJlcS5ib2R5O1xuXG4gICAgLy8g5L2/55So5paw55qE6amX6K2J5pyN5YuZXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgVmVyaWZpY2F0aW9uU2VydmljZS5yZXNlbmRWZXJpZmljYXRpb25FbWFpbChlbWFpbCk7XG5cbiAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIGxvZ2dlci5pbmZvKFwi6YeN5paw55m86YCB6amX6K2J6YO15Lu25oiQ5YqfXCIsIHsgZW1haWwgfSk7XG4gICAgICBSZXNwb25zZVV0aWwuc3VjY2VzcyhyZXMsIG51bGwsIHJlc3VsdC5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3JGYWN0b3J5LmNyZWF0ZVZhbGlkYXRpb25FcnJvcihyZXN1bHQubWVzc2FnZSk7XG4gICAgfVxuICB9KSxcbik7XG5cbi8vIOaqouafpempl+itieeLgOaFi1xucm91dGVyLmdldChcbiAgXCIvdmVyaWZpY2F0aW9uLXN0YXR1c1wiLFxuICBhdXRoZW50aWNhdGUsXG4gIHJlcXVpcmVBY3RpdmVBY2NvdW50LFxuICBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHVzZXIgPSByZXEudXNlciBhcyBJVXNlcjtcblxuICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IFZlcmlmaWNhdGlvblNlcnZpY2UuY2hlY2tWZXJpZmljYXRpb25TdGF0dXModXNlcik7XG5cbiAgICBSZXNwb25zZVV0aWwuc3VjY2VzcyhyZXMsIHtcbiAgICAgIG5lZWRzVmVyaWZpY2F0aW9uOiBzdGF0dXMubmVlZHNWZXJpZmljYXRpb24sXG4gICAgICBoYXNWYWxpZFRva2VuOiBzdGF0dXMuaGFzVmFsaWRUb2tlbixcbiAgICAgIHRva2VuRXhwaXJ5OiBzdGF0dXMudG9rZW5FeHBpcnksXG4gICAgICBpc0VtYWlsVmVyaWZpZWQ6IHVzZXIuaXNFbWFpbFZlcmlmaWVkLFxuICAgIH0pO1xuICB9KSxcbik7XG5cbmV4cG9ydCB7IHJvdXRlciBhcyBhdXRoUm91dGVzIH07XG4iXSwidmVyc2lvbiI6M30=