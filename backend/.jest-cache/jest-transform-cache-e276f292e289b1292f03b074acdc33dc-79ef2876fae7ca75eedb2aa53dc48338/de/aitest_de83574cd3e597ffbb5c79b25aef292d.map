{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\schemas\\ai.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\schemas\\ai.test.ts"],"sourcesContent":["import { \n  imageOptimizeSchema,\n  imageCropSchema,\n  similaritySearchSchema,\n  ImageOptimizeRequest,\n  ImageCropRequest,\n  SimilaritySearchRequest\n} from '../../src/schemas/ai';\n\ndescribe('AI Schemas', () => {\n  describe('imageOptimizeSchema', () => {\n    it('should validate valid image optimization parameters', () => {\n      const validData: ImageOptimizeRequest = {\n        maxWidth: 800,\n        maxHeight: 600,\n        quality: 80,\n        format: 'jpeg'\n      };\n\n      const result = imageOptimizeSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual(validData);\n      }\n    });\n\n    it('should reject invalid width values', () => {\n      const invalidData = {\n        maxWidth: 50, // 小於最小值 100\n        quality: 80\n      };\n\n      const result = imageOptimizeSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject invalid quality values', () => {\n      const invalidData = {\n        quality: 5 // 小於最小值 10\n      };\n\n      const result = imageOptimizeSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should accept empty object (all optional)', () => {\n      const result = imageOptimizeSchema.safeParse({});\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('imageCropSchema', () => {\n    it('should validate valid crop parameters', () => {\n      const validData: ImageCropRequest = {\n        x: 10,\n        y: 20,\n        width: 100,\n        height: 150\n      };\n\n      const result = imageCropSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual(validData);\n      }\n    });\n\n    it('should coerce string numbers to numbers', () => {\n      const stringData = {\n        x: '10',\n        y: '20',\n        width: '100',\n        height: '150'\n      };\n\n      const result = imageCropSchema.safeParse(stringData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual({\n          x: 10,\n          y: 20,\n          width: 100,\n          height: 150\n        });\n      }\n    });\n\n    it('should reject negative coordinates', () => {\n      const invalidData = {\n        x: -5,\n        y: 10,\n        width: 100,\n        height: 150\n      };\n\n      const result = imageCropSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject zero or negative dimensions', () => {\n      const invalidData = {\n        x: 10,\n        y: 20,\n        width: 0,\n        height: 150\n      };\n\n      const result = imageCropSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('similaritySearchSchema', () => {\n    it('should validate valid similarity search parameters', () => {\n      const validData: SimilaritySearchRequest = {\n        petId: '507f1f77bcf86cd799439011',\n        threshold: 0.8,\n        limit: 20\n      };\n\n      const result = similaritySearchSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual(validData);\n      }\n    });\n\n    it('should apply default values', () => {\n      const minimalData = {};\n\n      const result = similaritySearchSchema.safeParse(minimalData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.threshold).toBe(0.7);\n        expect(result.data.limit).toBe(10);\n      }\n    });\n\n    it('should reject invalid threshold values', () => {\n      const invalidData = {\n        threshold: 1.5 // 大於最大值 1\n      };\n\n      const result = similaritySearchSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject invalid limit values', () => {\n      const invalidData = {\n        limit: 0 // 小於最小值 1\n      };\n\n      const result = similaritySearchSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n});"],"version":3}