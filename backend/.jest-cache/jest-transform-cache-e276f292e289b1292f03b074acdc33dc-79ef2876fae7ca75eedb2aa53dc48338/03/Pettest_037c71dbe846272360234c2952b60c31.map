{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\models\\Pet.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\models\\Pet.test.ts"],"sourcesContent":["import { Pet, IPet } from '../../src/models/Pet';\nimport { User, IUser } from '../../src/models/User';\nimport mongoose from 'mongoose';\nimport { validUserData, validPetData, createTestPet } from '../utils/testData';\n\ndescribe('Pet Model', () => {\n  let testUser: IUser;\n\n\n\n  beforeEach(async () => {\n    testUser = await new User(validUserData).save();\n  });\n\n  afterEach(async () => {\n    await Pet.deleteMany({});\n    await User.deleteMany({});\n  });\n\n  describe('Pet Creation', () => {\n    it('should create a valid pet', async () => {\n      const petData = {\n        ...validPetData,\n        userId: testUser._id\n      };\n      \n      const pet = new Pet(petData);\n      const savedPet = await pet.save();\n      \n      expect(savedPet._id).toBeDefined();\n      expect(savedPet.name).toBe(petData.name);\n      expect(savedPet.type).toBe(petData.type);\n      expect(savedPet.breed).toBe(petData.breed);\n      expect(savedPet.status).toBe(petData.status);\n      expect(savedPet.userId.toString()).toBe(testUser._id.toString());\n      expect(savedPet.viewCount).toBe(0);\n      expect(savedPet.shareCount).toBe(0);\n    });\n\n    it('should not save pet without required fields', async () => {\n      const pet = new Pet({});\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n\n    it('should not save pet without userId', async () => {\n      const pet = new Pet(validPetData);\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n\n    it('should validate pet type', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        type: 'invalid-type' as any\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n\n    it('should validate pet gender', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        gender: 'invalid-gender' as any\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n\n    it('should validate pet size', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        size: 'invalid-size' as any\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n\n    it('should validate pet status', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        status: 'invalid-status' as any\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n  });\n\n  describe('Pet Location', () => {\n    it('should save location information', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id\n      });\n      \n      const savedPet = await pet.save();\n      \n      expect(savedPet.lastSeenLocation).toBe(validPetData.lastSeenLocation);\n    });\n\n    it('should validate location is required', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        lastSeenLocation: ''\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n  });\n\n  describe('Pet Contact Info', () => {\n    it('should save contact information', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id\n      });\n      \n      const savedPet = await pet.save();\n      \n      expect(savedPet.contactInfo.name).toBe(validPetData.contactInfo.name);\n      expect(savedPet.contactInfo.phone).toBe(validPetData.contactInfo.phone);\n      expect(savedPet.contactInfo.email).toBe(validPetData.contactInfo.email);\n    });\n\n    it('should validate email format in contact info', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        contactInfo: {\n          ...validPetData.contactInfo,\n          email: 'invalid-email'\n        }\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n\n    it('should validate phone format in contact info', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        contactInfo: {\n          ...validPetData.contactInfo,\n          phone: 'invalid-phone'\n        }\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n  });\n\n  describe('Pet AI Features', () => {\n    it('should save AI analysis data', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        aiFeatures: [{\n          imageUrl: 'https://example.com/image1.jpg',\n          features: [0.1, 0.2, 0.3, 0.4, 0.5],\n          analysis: {\n            confidence: 0.95,\n            labels: ['dog', 'golden retriever'],\n            detectedBreed: 'Golden Retriever',\n            colors: ['golden', 'white'],\n            features: ['long fur', 'friendly face']\n          },\n          processedAt: new Date()\n        }],\n        aiBreedPrediction: 'Golden Retriever',\n        aiConfidence: 0.95,\n        aiTags: ['friendly', 'large', 'golden']\n      });\n      \n      const savedPet = await pet.save();\n      \n      expect(savedPet.aiFeatures[0].imageUrl).toBe('https://example.com/image1.jpg');\n      expect(savedPet.aiFeatures[0].analysis.detectedBreed).toBe('Golden Retriever');\n      expect(savedPet.aiFeatures[0].analysis.confidence).toBe(0.95);\n      expect(savedPet.aiBreedPrediction).toBe('Golden Retriever');\n      expect(savedPet.aiConfidence).toBe(0.95);\n      expect(savedPet.aiTags).toEqual(['friendly', 'large', 'golden']);\n    });\n\n    it('should validate AI confidence range', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        aiConfidence: 1.5 // Invalid confidence > 1\n      });\n      \n      await expect(pet.save()).rejects.toThrow();\n    });\n  });\n\n  describe('Pet Statistics', () => {\n    it('should initialize view and share counts to 0', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id\n      });\n      \n      const savedPet = await pet.save();\n      \n      expect(savedPet.viewCount).toBe(0);\n      expect(savedPet.shareCount).toBe(0);\n    });\n\n    it('should allow updating view and share counts', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id\n      });\n      \n      const savedPet = await pet.save();\n      \n      savedPet.viewCount = 10;\n      savedPet.shareCount = 5;\n      \n      const updatedPet = await savedPet.save();\n      \n      expect(updatedPet.viewCount).toBe(10);\n      expect(updatedPet.shareCount).toBe(5);\n    });\n  });\n\n  describe('Pet Timestamps', () => {\n    it('should set createdAt and updatedAt on creation', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id\n      });\n      \n      const savedPet = await pet.save();\n      \n      expect(savedPet.createdAt).toBeDefined();\n      expect(savedPet.updatedAt).toBeDefined();\n    });\n\n    it('should update updatedAt on modification', async () => {\n      const pet = new Pet({\n        ...validPetData,\n        userId: testUser._id\n      });\n      \n      const savedPet = await pet.save();\n      const originalUpdatedAt = savedPet.updatedAt;\n      \n      // 等待一毫秒確保時間戳不同\n      await new Promise(resolve => setTimeout(resolve, 1));\n      \n      savedPet.description = 'Updated description';\n      const updatedPet = await savedPet.save();\n      \n      expect(updatedPet.updatedAt.getTime()).toBeGreaterThan(originalUpdatedAt.getTime());\n    });\n  });\n});"],"version":3}