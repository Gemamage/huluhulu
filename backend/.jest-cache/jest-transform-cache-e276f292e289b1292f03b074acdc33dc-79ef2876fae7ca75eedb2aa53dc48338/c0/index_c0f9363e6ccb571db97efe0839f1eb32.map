{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\index.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\notifications\\index.ts"],"sourcesContent":["import { AIMatchingService, AIMatchingConfig } from './aiMatching';\nimport { GeofenceService, GeofenceConfig, GeofenceArea } from './geofence';\nimport { ReminderService, ReminderConfig } from './reminders';\nimport { NotificationStatisticsService, SmartNotificationStats, UserNotificationStats } from './statistics';\nimport { logger } from '../../utils/logger';\n\nexport interface SmartNotificationConfig {\n  aiMatching: AIMatchingConfig;\n  geofence: GeofenceConfig;\n  reminders: ReminderConfig;\n}\n\nconst DEFAULT_CONFIG: SmartNotificationConfig = {\n  aiMatching: {\n    enabled: true,\n    minSimilarity: 0.75,\n    checkInterval: 30, // 30 minutes\n    maxDistance: 50 // 50km\n  },\n  geofence: {\n    enabled: true,\n    defaultRadius: 10, // 10km\n    checkInterval: 15 // 15 minutes\n  },\n  reminders: {\n    enabled: true,\n    intervals: [1, 3, 7, 14, 30], // 1天, 3天, 1週, 2週, 1個月\n    maxReminders: 5\n  }\n};\n\nexport class SmartNotificationService {\n  private static config: SmartNotificationConfig = DEFAULT_CONFIG;\n  private static initialized = false;\n\n  /**\n   * 初始化智能通知服務\n   */\n  static async initialize(config?: Partial<SmartNotificationConfig>): Promise<void> {\n    if (this.initialized) {\n      logger.warn('智能通知服務已經初始化');\n      return;\n    }\n\n    if (config) {\n      this.config = {\n        aiMatching: { ...DEFAULT_CONFIG.aiMatching, ...config.aiMatching },\n        geofence: { ...DEFAULT_CONFIG.geofence, ...config.geofence },\n        reminders: { ...DEFAULT_CONFIG.reminders, ...config.reminders }\n      };\n    }\n\n    // 初始化各個服務\n    AIMatchingService.initialize(this.config.aiMatching);\n    await GeofenceService.initialize(this.config.geofence);\n    ReminderService.initialize(this.config.reminders);\n\n    this.initialized = true;\n    logger.info('智能通知服務已初始化', { config: this.config });\n  }\n\n  /**\n   * 停止智能通知服務\n   */\n  static stop(): void {\n    AIMatchingService.stop();\n    GeofenceService.stop();\n    ReminderService.stop();\n    \n    this.initialized = false;\n    logger.info('智能通知服務已停止');\n  }\n\n  /**\n   * 重啟智能通知服務\n   */\n  static async restart(config?: Partial<SmartNotificationConfig>): Promise<void> {\n    this.stop();\n    await this.initialize(config);\n  }\n\n  // ==================== AI 配對相關方法 ====================\n\n  /**\n   * 手動觸發 AI 配對檢查\n   */\n  static async triggerAIMatching(userId: string, petId?: string): Promise<{\n    matchesFound: number;\n    notificationsSent: number;\n    message: string;\n  }> {\n    return AIMatchingService.triggerAIMatching(userId, petId);\n  }\n\n  // ==================== 地理圍欄相關方法 ====================\n\n  /**\n   * 創建地理圍欄\n   */\n  static async createGeofence(data: {\n    userId: string;\n    petId: string;\n    latitude: number;\n    longitude: number;\n    radius?: number;\n    name?: string;\n  }): Promise<GeofenceArea> {\n    return GeofenceService.createGeofence(data);\n  }\n\n  /**\n   * 移除地理圍欄\n   */\n  static async removeGeofence(userId: string, geofenceId: string): Promise<boolean> {\n    return GeofenceService.removeGeofence(userId, geofenceId);\n  }\n\n  /**\n   * 獲取用戶的地理圍欄列表\n   */\n  static async getUserGeofences(userId: string): Promise<GeofenceArea[]> {\n    return GeofenceService.getUserGeofences(userId);\n  }\n\n  // ==================== 提醒相關方法 ====================\n\n  /**\n   * 手動發送提醒\n   */\n  static async sendManualReminder(\n    userId: string,\n    petId: string,\n    customMessage?: string\n  ): Promise<void> {\n    return ReminderService.sendManualReminder(userId, petId, customMessage);\n  }\n\n  /**\n   * 獲取用戶的提醒統計\n   */\n  static async getUserReminderStats(userId: string, startDate?: Date, endDate?: Date): Promise<{\n    totalReminders: number;\n    remindersByDay: Record<number, number>;\n    lastReminderDate?: Date;\n  }> {\n    return ReminderService.getUserReminderStats(userId, startDate, endDate);\n  }\n\n  // ==================== 配置管理方法 ====================\n\n  /**\n   * 獲取用戶配置\n   */\n  static async getConfig(userId?: string): Promise<SmartNotificationConfig> {\n    // 這裡可以從資料庫獲取用戶特定配置\n    // 暫時返回全域配置\n    return { ...this.config };\n  }\n\n  /**\n   * 更新用戶配置\n   */\n  static async updateConfig(userId: string, newConfig: Partial<SmartNotificationConfig>): Promise<SmartNotificationConfig> {\n    // 這裡可以保存用戶特定配置到資料庫\n    // 暫時更新全域配置\n    if (newConfig.aiMatching) {\n      AIMatchingService.updateConfig(newConfig.aiMatching);\n      this.config.aiMatching = { ...this.config.aiMatching, ...newConfig.aiMatching };\n    }\n    \n    if (newConfig.geofence) {\n      GeofenceService.updateConfig(newConfig.geofence);\n      this.config.geofence = { ...this.config.geofence, ...newConfig.geofence };\n    }\n    \n    if (newConfig.reminders) {\n      ReminderService.updateConfig(newConfig.reminders);\n      this.config.reminders = { ...this.config.reminders, ...newConfig.reminders };\n    }\n    \n    logger.info('智能通知配置已更新', { userId, config: this.config });\n    return { ...this.config };\n  }\n\n  // ==================== 統計相關方法 ====================\n\n  /**\n   * 獲取智能通知統計\n   */\n  static async getSmartNotificationStats(): Promise<SmartNotificationStats> {\n    return NotificationStatisticsService.getSmartNotificationStats();\n  }\n\n  /**\n   * 獲取智能通知統計（用戶特定）\n   */\n  static async getSmartNotificationStatistics(options: {\n    userId: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<UserNotificationStats> {\n    return NotificationStatisticsService.getSmartNotificationStatistics(options);\n  }\n\n  /**\n   * 獲取通知類型統計\n   */\n  static async getNotificationTypeStats(options: {\n    userId?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<Record<string, number>> {\n    return NotificationStatisticsService.getNotificationTypeStats(options);\n  }\n\n  /**\n   * 獲取通知趨勢統計\n   */\n  static async getNotificationTrends(options: {\n    userId?: string;\n    days?: number;\n  }): Promise<{\n    daily: Array<{ date: string; count: number }>;\n    weekly: Array<{ week: string; count: number }>;\n  }> {\n    return NotificationStatisticsService.getNotificationTrends(options);\n  }\n\n  /**\n   * 獲取通知效果統計\n   */\n  static async getNotificationEffectivenessStats(options: {\n    userId?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<{\n    totalSent: number;\n    totalRead: number;\n    totalClicked: number;\n    readRate: number;\n    clickRate: number;\n    typeEffectiveness: Record<string, {\n      sent: number;\n      read: number;\n      clicked: number;\n      readRate: number;\n      clickRate: number;\n    }>;\n  }> {\n    return NotificationStatisticsService.getNotificationEffectivenessStats(options);\n  }\n\n  /**\n   * 清理過期統計數據\n   */\n  static async cleanupOldStats(daysToKeep: number = 90): Promise<{\n    deletedCount: number;\n  }> {\n    return NotificationStatisticsService.cleanupOldStats(daysToKeep);\n  }\n\n  // ==================== 服務狀態方法 ====================\n\n  /**\n   * 獲取服務狀態\n   */\n  static getServiceStatus(): {\n    initialized: boolean;\n    aiMatching: {\n      enabled: boolean;\n      running: boolean;\n      lastRun: Date | null;\n    };\n    geofence: {\n      enabled: boolean;\n      running: boolean;\n      totalAreas: number;\n      activeAreas: number;\n    };\n    reminders: {\n      enabled: boolean;\n      running: boolean;\n    };\n  } {\n    const aiMatchingStatus = AIMatchingService.getStatus();\n    const geofenceStats = GeofenceService.getStats();\n    \n    return {\n      initialized: this.initialized,\n      aiMatching: {\n        enabled: aiMatchingStatus.enabled,\n        running: aiMatchingStatus.running,\n        lastRun: aiMatchingStatus.lastRun\n      },\n      geofence: {\n        enabled: geofenceStats.enabled,\n        running: geofenceStats.running,\n        totalAreas: geofenceStats.totalAreas,\n        activeAreas: geofenceStats.activeAreas\n      },\n      reminders: {\n        enabled: this.config.reminders.enabled,\n        running: true // ReminderService 沒有提供運行狀態，假設總是運行\n      }\n    };\n  }\n\n  /**\n   * 健康檢查\n   */\n  static async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    services: {\n      aiMatching: 'ok' | 'error';\n      geofence: 'ok' | 'error';\n      reminders: 'ok' | 'error';\n    };\n    message?: string;\n  }> {\n    const services = {\n      aiMatching: 'ok' as 'ok' | 'error',\n      geofence: 'ok' as 'ok' | 'error',\n      reminders: 'ok' as 'ok' | 'error'\n    };\n\n    let healthyCount = 0;\n\n    // 檢查 AI 配對服務\n    try {\n      const aiStatus = AIMatchingService.getStatus();\n      if (aiStatus.enabled && !aiStatus.running) {\n        services.aiMatching = 'error';\n      } else {\n        healthyCount++;\n      }\n    } catch (error) {\n      services.aiMatching = 'error';\n    }\n\n    // 檢查地理圍欄服務\n    try {\n      const geofenceStats = GeofenceService.getStats();\n      if (geofenceStats.enabled && !geofenceStats.running) {\n        services.geofence = 'error';\n      } else {\n        healthyCount++;\n      }\n    } catch (error) {\n      services.geofence = 'error';\n    }\n\n    // 檢查提醒服務\n    try {\n      const reminderStats = await ReminderService.getStats();\n      if (reminderStats.enabled && !reminderStats.running) {\n        services.reminders = 'error';\n      } else {\n        healthyCount++;\n      }\n    } catch (error) {\n      services.reminders = 'error';\n    }\n\n    let status: 'healthy' | 'degraded' | 'unhealthy';\n    let message: string | undefined;\n\n    if (healthyCount === 3) {\n      status = 'healthy';\n    } else if (healthyCount >= 1) {\n      status = 'degraded';\n      message = `${3 - healthyCount} 個服務出現問題`;\n    } else {\n      status = 'unhealthy';\n      message = '所有服務都出現問題';\n    }\n\n    return {\n      status,\n      services,\n      message\n    };\n  }\n}\n\n// 導出所有相關類型和服務\nexport {\n  AIMatchingService,\n  GeofenceService,\n  ReminderService,\n  NotificationStatisticsService,\n  AIMatchingConfig,\n  GeofenceConfig,\n  GeofenceArea,\n  ReminderConfig,\n  SmartNotificationStats,\n  UserNotificationStats\n};\n\n// 創建默認實例\nexport const smartNotificationService = SmartNotificationService;"],"version":3}