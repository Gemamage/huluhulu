4ee882c633cc8b1064788526ccb9b2cf
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchHistory = void 0;
const mongoose_1 = __importStar(require("mongoose"));
/**
 * 搜尋歷史 Schema
 */
const searchHistorySchema = new mongoose_1.Schema({
    userId: {
        type: mongoose_1.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
        index: true
    },
    searchQuery: {
        type: String,
        required: true,
        trim: true,
        maxlength: 200
    },
    filters: {
        type: {
            type: String,
            enum: ['dog', 'cat', 'bird', 'rabbit', 'hamster', 'fish', 'reptile', 'other']
        },
        status: {
            type: String,
            enum: ['lost', 'found', 'reunited']
        },
        location: {
            type: String,
            trim: true,
            maxlength: 200
        },
        breed: {
            type: String,
            trim: true,
            maxlength: 100
        },
        radius: {
            type: Number,
            min: 1,
            max: 100,
            default: 10
        }
    },
    resultCount: {
        type: Number,
        required: true,
        min: 0
    },
    searchedAt: {
        type: Date,
        default: Date.now,
        index: true
    }
}, {
    timestamps: true,
    collection: 'search_histories'
});
// 複合索引：用戶 + 搜尋時間（用於查詢用戶的搜尋歷史）
searchHistorySchema.index({ userId: 1, searchedAt: -1 });
// 複合索引：用戶 + 搜尋查詢（用於避免重複記錄）
searchHistorySchema.index({ userId: 1, searchQuery: 1, 'filters.type': 1, 'filters.status': 1 });
// TTL 索引：自動刪除 90 天前的搜尋歷史
searchHistorySchema.index({ searchedAt: 1 }, { expireAfterSeconds: 90 * 24 * 60 * 60 });
/**
 * 靜態方法：記錄搜尋歷史
 */
searchHistorySchema.statics.recordSearch = async function (userId, searchQuery, filters, resultCount) {
    try {
        // 檢查是否已有相同的搜尋記錄（24小時內）
        const existingSearch = await this.findOne({
            userId: new mongoose_1.default.Types.ObjectId(userId),
            searchQuery,
            'filters.type': filters.type,
            'filters.status': filters.status,
            'filters.location': filters.location,
            searchedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
        });
        if (existingSearch) {
            // 更新現有記錄
            existingSearch.resultCount = resultCount;
            existingSearch.searchedAt = new Date();
            await existingSearch.save();
            return existingSearch;
        }
        else {
            // 創建新記錄
            const searchHistory = new this({
                userId: new mongoose_1.default.Types.ObjectId(userId),
                searchQuery,
                filters,
                resultCount,
                searchedAt: new Date()
            });
            await searchHistory.save();
            return searchHistory;
        }
    }
    catch (error) {
        console.error('記錄搜尋歷史失敗:', error);
        // 不拋出錯誤，避免影響主要搜尋功能
        return null;
    }
};
/**
 * 靜態方法：獲取用戶搜尋歷史
 */
searchHistorySchema.statics.getUserSearchHistory = async function (userId, limit = 10) {
    return this.find({
        userId: new mongoose_1.default.Types.ObjectId(userId)
    })
        .sort({ searchedAt: -1 })
        .limit(limit)
        .lean();
};
/**
 * 靜態方法：獲取熱門搜尋關鍵字
 */
searchHistorySchema.statics.getPopularSearches = async function (limit = 10) {
    return this.aggregate([
        {
            $match: {
                searchedAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } // 最近 7 天
            }
        },
        {
            $group: {
                _id: '$searchQuery',
                count: { $sum: 1 },
                lastSearched: { $max: '$searchedAt' }
            }
        },
        {
            $match: {
                count: { $gte: 2 } // 至少被搜尋 2 次
            }
        },
        {
            $sort: { count: -1, lastSearched: -1 }
        },
        {
            $limit: limit
        },
        {
            $project: {
                searchQuery: '$_id',
                count: 1,
                lastSearched: 1,
                _id: 0
            }
        }
    ]);
};
/**
 * 靜態方法：清理用戶搜尋歷史
 */
searchHistorySchema.statics.clearUserHistory = async function (userId) {
    return this.deleteMany({
        userId: new mongoose_1.default.Types.ObjectId(userId)
    });
};
exports.SearchHistory = mongoose_1.default.model('SearchHistory', searchHistorySchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,