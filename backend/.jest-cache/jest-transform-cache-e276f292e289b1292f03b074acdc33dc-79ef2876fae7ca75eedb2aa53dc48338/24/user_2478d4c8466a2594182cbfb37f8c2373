567c36384d22fe49d66289f4c7a66416
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const error_handler_1 = require("../../middleware/error-handler");
const errors_1 = require("../../utils/errors");
const logger_1 = require("../../utils/logger");
const cacheMiddleware_1 = require("../../middleware/cacheMiddleware");
const validation_1 = require("../../utils/validation");
const search_1 = require("../../schemas/search");
const Pet_1 = require("../../models/Pet");
const auth_1 = require("../../middleware/auth");
const rbac_1 = require("../../middleware/rbac");
const mongoose_1 = __importDefault(require("mongoose"));
const router = (0, express_1.Router)();
/**
 * @route   GET /api/pets/my
 * @desc    獲取用戶自己的寵物協尋案例
 * @access  Private
 */
router.get("/my", auth_1.authenticate, rbac_1.requireActiveAccount, (0, validation_1.validateQuery)(search_1.petSearchSchema), (0, cacheMiddleware_1.createCacheMiddleware)({
    ttl: 5 * 60 * 1000, // 5分鐘快取
    keyGenerator: cacheMiddleware_1.petCacheKeyGenerator,
}), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const userId = req.user.id;
    const { page = 1, limit = 12, status, type, sortBy = "createdAt", sortOrder = "desc", } = req.validatedQuery;
    logger_1.logger.info("獲取用戶寵物案例請求", {
        userId,
        page,
        limit,
        status,
        type,
        sortBy,
        sortOrder,
    });
    // 建立查詢條件
    const query = { userId: new mongoose_1.default.Types.ObjectId(userId) };
    if (status) {
        query.status = status;
    }
    if (type) {
        query.type = type;
    }
    // 計算分頁
    const skip = (page - 1) * limit;
    // 排序設定
    const sortOptions = {};
    sortOptions[sortBy] = sortOrder === "desc" ? -1 : 1;
    // 執行查詢
    const [pets, totalItems] = await Promise.all([
        Pet_1.Pet.find(query).sort(sortOptions).skip(skip).limit(limit).lean(),
        Pet_1.Pet.countDocuments(query),
    ]);
    // 計算分頁資訊
    const totalPages = Math.ceil(totalItems / limit);
    res.json({
        success: true,
        data: {
            pets,
            pagination: {
                currentPage: page,
                totalPages,
                totalItems,
                itemsPerPage: limit,
                hasNextPage: page < totalPages,
                hasPrevPage: page > 1,
            },
        },
    });
}));
/**
 * @route   GET /api/pets/user/:userId
 * @desc    獲取特定用戶的寵物協尋案例
 * @access  Public
 */
router.get("/user/:userId", (0, validation_1.validateQuery)(search_1.petSearchSchema), (0, cacheMiddleware_1.createCacheMiddleware)({
    ttl: 10 * 60 * 1000, // 10分鐘快取
    keyGenerator: cacheMiddleware_1.petCacheKeyGenerator,
}), (0, error_handler_1.asyncHandler)(async (req, res) => {
    const { userId } = req.params;
    const { page = 1, limit = 12, status, type, sortBy = "createdAt", sortOrder = "desc", } = req.validatedQuery;
    if (!userId || !mongoose_1.default.Types.ObjectId.isValid(userId)) {
        throw new errors_1.ValidationError("請提供有效的用戶 ID");
    }
    logger_1.logger.info("獲取特定用戶寵物案例請求", {
        userId,
        page,
        limit,
        status,
        type,
        sortBy,
        sortOrder,
    });
    // 建立查詢條件
    const query = { userId: new mongoose_1.default.Types.ObjectId(userId) };
    if (status) {
        query.status = status;
    }
    if (type) {
        query.type = type;
    }
    // 計算分頁
    const skip = (page - 1) * limit;
    // 排序設定
    const sortOptions = {};
    sortOptions[sortBy] = sortOrder === "desc" ? -1 : 1;
    // 執行查詢
    const [pets, totalItems] = await Promise.all([
        Pet_1.Pet.find(query)
            .sort(sortOptions)
            .skip(skip)
            .limit(limit)
            .populate("userId", "name")
            .lean(),
        Pet_1.Pet.countDocuments(query),
    ]);
    // 計算分頁資訊
    const totalPages = Math.ceil(totalItems / limit);
    res.json({
        success: true,
        data: {
            pets,
            pagination: {
                currentPage: page,
                totalPages,
                totalItems,
                itemsPerPage: limit,
                hasNextPage: page < totalPages,
                hasPrevPage: page > 1,
            },
        },
    });
}));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,