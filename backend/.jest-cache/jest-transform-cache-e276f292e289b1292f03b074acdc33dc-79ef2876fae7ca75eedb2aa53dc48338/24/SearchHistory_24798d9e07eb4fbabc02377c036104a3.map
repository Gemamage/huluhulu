{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\models\\SearchHistory.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\models\\SearchHistory.ts"],"sourcesContent":["import mongoose, { Document, Schema, Model } from 'mongoose';\n\n/**\n * 搜尋歷史介面\n */\nexport interface ISearchHistory extends Document {\n  userId: mongoose.Types.ObjectId;\n  searchQuery: string;\n  filters: {\n    type?: string;\n    status?: string;\n    location?: string;\n    breed?: string;\n    radius?: number;\n  };\n  resultCount: number;\n  searchedAt: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n * 搜尋歷史靜態方法介面\n */\nexport interface ISearchHistoryModel extends Model<ISearchHistory> {\n  recordSearch(\n    userId: string,\n    searchQuery: string,\n    filters: any,\n    resultCount: number\n  ): Promise<ISearchHistory | null>;\n  getUserSearchHistory(userId: string, limit?: number): Promise<ISearchHistory[]>;\n  getPopularSearches(limit?: number): Promise<any[]>;\n  clearUserHistory(userId: string): Promise<any>;\n}\n\n/**\n * 搜尋歷史 Schema\n */\nconst searchHistorySchema = new Schema<ISearchHistory>({\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n    index: true\n  },\n  searchQuery: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  filters: {\n    type: {\n      type: String,\n      enum: ['dog', 'cat', 'bird', 'rabbit', 'hamster', 'fish', 'reptile', 'other']\n    },\n    status: {\n      type: String,\n      enum: ['lost', 'found', 'reunited']\n    },\n    location: {\n      type: String,\n      trim: true,\n      maxlength: 200\n    },\n    breed: {\n      type: String,\n      trim: true,\n      maxlength: 100\n    },\n    radius: {\n      type: Number,\n      min: 1,\n      max: 100,\n      default: 10\n    }\n  },\n  resultCount: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  searchedAt: {\n    type: Date,\n    default: Date.now,\n    index: true\n  }\n}, {\n  timestamps: true,\n  collection: 'search_histories'\n});\n\n// 複合索引：用戶 + 搜尋時間（用於查詢用戶的搜尋歷史）\nsearchHistorySchema.index({ userId: 1, searchedAt: -1 });\n\n// 複合索引：用戶 + 搜尋查詢（用於避免重複記錄）\nsearchHistorySchema.index({ userId: 1, searchQuery: 1, 'filters.type': 1, 'filters.status': 1 });\n\n// TTL 索引：自動刪除 90 天前的搜尋歷史\nsearchHistorySchema.index({ searchedAt: 1 }, { expireAfterSeconds: 90 * 24 * 60 * 60 });\n\n/**\n * 靜態方法：記錄搜尋歷史\n */\nsearchHistorySchema.statics.recordSearch = async function(\n  userId: string,\n  searchQuery: string,\n  filters: any,\n  resultCount: number\n) {\n  try {\n    // 檢查是否已有相同的搜尋記錄（24小時內）\n    const existingSearch = await this.findOne({\n      userId: new mongoose.Types.ObjectId(userId),\n      searchQuery,\n      'filters.type': filters.type,\n      'filters.status': filters.status,\n      'filters.location': filters.location,\n      searchedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }\n    });\n\n    if (existingSearch) {\n      // 更新現有記錄\n      existingSearch.resultCount = resultCount;\n      existingSearch.searchedAt = new Date();\n      await existingSearch.save();\n      return existingSearch;\n    } else {\n      // 創建新記錄\n      const searchHistory = new this({\n        userId: new mongoose.Types.ObjectId(userId),\n        searchQuery,\n        filters,\n        resultCount,\n        searchedAt: new Date()\n      });\n      await searchHistory.save();\n      return searchHistory;\n    }\n  } catch (error) {\n    console.error('記錄搜尋歷史失敗:', error);\n    // 不拋出錯誤，避免影響主要搜尋功能\n    return null;\n  }\n};\n\n/**\n * 靜態方法：獲取用戶搜尋歷史\n */\nsearchHistorySchema.statics.getUserSearchHistory = async function(\n  userId: string,\n  limit: number = 10\n) {\n  return this.find({\n    userId: new mongoose.Types.ObjectId(userId)\n  })\n    .sort({ searchedAt: -1 })\n    .limit(limit)\n    .lean();\n};\n\n/**\n * 靜態方法：獲取熱門搜尋關鍵字\n */\nsearchHistorySchema.statics.getPopularSearches = async function(limit: number = 10) {\n  return this.aggregate([\n    {\n      $match: {\n        searchedAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } // 最近 7 天\n      }\n    },\n    {\n      $group: {\n        _id: '$searchQuery',\n        count: { $sum: 1 },\n        lastSearched: { $max: '$searchedAt' }\n      }\n    },\n    {\n      $match: {\n        count: { $gte: 2 } // 至少被搜尋 2 次\n      }\n    },\n    {\n      $sort: { count: -1, lastSearched: -1 }\n    },\n    {\n      $limit: limit\n    },\n    {\n      $project: {\n        searchQuery: '$_id',\n        count: 1,\n        lastSearched: 1,\n        _id: 0\n      }\n    }\n  ]);\n};\n\n/**\n * 靜態方法：清理用戶搜尋歷史\n */\nsearchHistorySchema.statics.clearUserHistory = async function(userId: string) {\n  return this.deleteMany({\n    userId: new mongoose.Types.ObjectId(userId)\n  });\n};\n\nexport const SearchHistory = mongoose.model<ISearchHistory, ISearchHistoryModel>('SearchHistory', searchHistorySchema);"],"version":3}