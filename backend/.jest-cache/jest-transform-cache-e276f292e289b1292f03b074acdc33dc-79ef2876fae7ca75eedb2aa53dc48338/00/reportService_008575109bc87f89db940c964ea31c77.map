{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\reportService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\reportService.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport { Report, ReportStats, IReport, IReportStats } from '../models/Report';\nimport { User } from '../models/User';\nimport { Comment } from '../models/Comment';\nimport { Review } from '../models/Review';\nimport { Message } from '../models/Message';\nimport { Pet } from '../models/Pet';\nimport { NotificationService } from './notificationService';\nimport { NotificationType } from '../models/Notification';\n\nexport interface CreateReportData {\n  reporterId: string;\n  reportedUserId?: string;\n  reportedContentId?: string;\n  contentType: 'user' | 'comment' | 'review' | 'message' | 'pet';\n  reportType: string;\n  reason: string;\n  description?: string;\n  evidence?: string[];\n}\n\nexport interface UpdateReportData {\n  status?: 'pending' | 'investigating' | 'resolved' | 'dismissed';\n  priority?: 'low' | 'medium' | 'high' | 'urgent';\n  assignedTo?: string;\n  resolution?: string;\n}\n\nexport interface ReportQuery {\n  status?: string;\n  priority?: string;\n  contentType?: string;\n  reportType?: string;\n  assignedTo?: string;\n  reporterId?: string;\n  reportedUserId?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: 'createdAt' | 'priority' | 'status';\n  sortOrder?: 'asc' | 'desc';\n  dateFrom?: Date;\n  dateTo?: Date;\n}\n\nexport class ReportService {\n  private notificationService: NotificationService;\n\n  constructor() {\n    this.notificationService = new NotificationService();\n  }\n\n  /**\n   * 創建舉報\n   */\n  async createReport(data: CreateReportData): Promise<IReport> {\n    const {\n      reporterId,\n      reportedUserId,\n      reportedContentId,\n      contentType,\n      reportType,\n      reason,\n      description = '',\n      evidence = []\n    } = data;\n\n    // 驗證舉報者\n    const reporter = await User.findById(reporterId);\n    if (!reporter) {\n      throw new Error('舉報者不存在');\n    }\n\n    // 驗證被舉報的用戶（如果提供）\n    if (reportedUserId) {\n      const reportedUser = await User.findById(reportedUserId);\n      if (!reportedUser) {\n        throw new Error('被舉報的用戶不存在');\n      }\n      \n      // 不能舉報自己\n      if (reporterId === reportedUserId) {\n        throw new Error('不能舉報自己');\n      }\n    }\n\n    // 驗證被舉報的內容是否存在\n    if (reportedContentId) {\n      await this.validateReportedContent(reportedContentId, contentType);\n    }\n\n    // 檢查是否已經舉報過相同內容\n    const existingReport = await Report.findOne({\n      reporterId: new mongoose.Types.ObjectId(reporterId),\n      reportedContentId: reportedContentId ? new mongoose.Types.ObjectId(reportedContentId) : null,\n      contentType,\n      isDeleted: false\n    });\n\n    if (existingReport) {\n      throw new Error('您已經舉報過此內容');\n    }\n\n    // 創建舉報\n    const report = new Report({\n      reporterId: new mongoose.Types.ObjectId(reporterId),\n      reportedUserId: reportedUserId ? new mongoose.Types.ObjectId(reportedUserId) : null,\n      reportedContentId: reportedContentId ? new mongoose.Types.ObjectId(reportedContentId) : null,\n      contentType,\n      reportType,\n      reason: reason.trim(),\n      description: description.trim(),\n      evidence: evidence.filter(url => url.trim().length > 0)\n    });\n\n    await report.save();\n\n    // 通知管理員\n    await this.notifyAdmins(report);\n\n    // 更新統計\n    await this.updateReportStats(report);\n\n    const createdReport = await this.getReportById(report._id.toString());\n    if (!createdReport) {\n      throw new Error('創建舉報後無法獲取舉報詳情');\n    }\n    return createdReport;\n  }\n\n  /**\n   * 獲取舉報詳情\n   */\n  async getReportById(reportId: string): Promise<IReport | null> {\n    if (!mongoose.Types.ObjectId.isValid(reportId)) {\n      throw new Error('無效的舉報ID');\n    }\n\n    return await Report.findById(reportId)\n      .populate('reporterId', 'username email avatar')\n      .populate('reportedUserId', 'username email avatar')\n      .populate('assignedTo', 'username email')\n      .populate('resolvedBy', 'username email')\n      .lean();\n  }\n\n  /**\n   * 獲取舉報列表\n   */\n  async getReports(query: ReportQuery): Promise<{\n    reports: IReport[];\n    total: number;\n    page: number;\n    totalPages: number;\n    stats: {\n      pending: number;\n      investigating: number;\n      resolved: number;\n      dismissed: number;\n    };\n  }> {\n    const {\n      status,\n      priority,\n      contentType,\n      reportType,\n      assignedTo,\n      reporterId,\n      reportedUserId,\n      page = 1,\n      limit = 20,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n      dateFrom,\n      dateTo\n    } = query;\n\n    // 構建查詢條件\n    const filter: any = { isDeleted: false };\n    if (status) filter.status = status;\n    if (priority) filter.priority = priority;\n    if (contentType) filter.contentType = contentType;\n    if (reportType) filter.reportType = reportType;\n    if (assignedTo) filter.assignedTo = new mongoose.Types.ObjectId(assignedTo);\n    if (reporterId) filter.reporterId = new mongoose.Types.ObjectId(reporterId);\n    if (reportedUserId) filter.reportedUserId = new mongoose.Types.ObjectId(reportedUserId);\n    \n    if (dateFrom || dateTo) {\n      filter.createdAt = {};\n      if (dateFrom) filter.createdAt.$gte = dateFrom;\n      if (dateTo) filter.createdAt.$lte = dateTo;\n    }\n\n    // 計算分頁\n    const skip = (page - 1) * limit;\n    const sortOptions: any = {};\n    sortOptions[sortBy] = sortOrder === 'asc' ? 1 : -1;\n\n    // 執行查詢\n    const [reports, total, stats] = await Promise.all([\n      Report.find(filter)\n        .populate('reporterId', 'username email avatar')\n        .populate('reportedUserId', 'username email avatar')\n        .populate('assignedTo', 'username email')\n        .sort(sortOptions)\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      Report.countDocuments(filter),\n      this.getReportStatusStats()\n    ]);\n\n    return {\n      reports,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n      stats\n    };\n  }\n\n  /**\n   * 更新舉報\n   */\n  async updateReport(\n    reportId: string,\n    adminId: string,\n    data: UpdateReportData\n  ): Promise<IReport | null> {\n    if (!mongoose.Types.ObjectId.isValid(reportId)) {\n      throw new Error('無效的舉報ID');\n    }\n\n    const report = await Report.findById(reportId);\n    if (!report) {\n      throw new Error('舉報不存在');\n    }\n\n    // 構建更新資料\n    const updateData: any = {};\n    if (data.status !== undefined) {\n      updateData.status = data.status;\n      if (data.status === 'resolved' || data.status === 'dismissed') {\n        updateData.resolvedAt = new Date();\n        updateData.resolvedBy = new mongoose.Types.ObjectId(adminId);\n      }\n    }\n    if (data.priority !== undefined) updateData.priority = data.priority;\n    if (data.assignedTo !== undefined) {\n      updateData.assignedTo = data.assignedTo ? new mongoose.Types.ObjectId(data.assignedTo) : null;\n    }\n    if (data.resolution !== undefined) updateData.resolution = data.resolution.trim();\n\n    const updatedReport = await Report.findByIdAndUpdate(\n      reportId,\n      updateData,\n      { new: true }\n    )\n      .populate('reporterId', 'username email avatar')\n      .populate('reportedUserId', 'username email avatar')\n      .populate('assignedTo', 'username email')\n      .populate('resolvedBy', 'username email');\n\n    // 如果狀態變更為已處理，發送通知\n    if (data.status === 'resolved' && updatedReport) {\n      await this.notifyReporter(updatedReport);\n    }\n\n    return updatedReport;\n  }\n\n  /**\n   * 刪除舉報\n   */\n  async deleteReport(reportId: string, adminId: string): Promise<boolean> {\n    if (!mongoose.Types.ObjectId.isValid(reportId)) {\n      throw new Error('無效的舉報ID');\n    }\n\n    const report = await Report.findById(reportId);\n    if (!report) {\n      throw new Error('舉報不存在');\n    }\n\n    // 軟刪除\n    await Report.findByIdAndUpdate(reportId, {\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: new mongoose.Types.ObjectId(adminId)\n    });\n\n    return true;\n  }\n\n  /**\n   * 批量處理舉報\n   */\n  async batchUpdateReports(\n    reportIds: string[],\n    adminId: string,\n    data: UpdateReportData\n  ): Promise<number> {\n    const validIds = reportIds.filter(id => mongoose.Types.ObjectId.isValid(id));\n    if (validIds.length === 0) {\n      throw new Error('沒有有效的舉報ID');\n    }\n\n    const updateData: any = {};\n    if (data.status !== undefined) {\n      updateData.status = data.status;\n      if (data.status === 'resolved' || data.status === 'dismissed') {\n        updateData.resolvedAt = new Date();\n        updateData.resolvedBy = new mongoose.Types.ObjectId(adminId);\n      }\n    }\n    if (data.priority !== undefined) updateData.priority = data.priority;\n    if (data.assignedTo !== undefined) {\n      updateData.assignedTo = data.assignedTo ? new mongoose.Types.ObjectId(data.assignedTo) : null;\n    }\n\n    const result = await Report.updateMany(\n      { \n        _id: { $in: validIds.map(id => new mongoose.Types.ObjectId(id)) },\n        isDeleted: false\n      },\n      updateData\n    );\n\n    return result.modifiedCount;\n  }\n\n  /**\n   * 獲取舉報統計\n   */\n  async getReportStats(timeRange?: 'day' | 'week' | 'month' | 'year'): Promise<{\n    total: number;\n    byStatus: { [key: string]: number };\n    byType: { [key: string]: number };\n    byContentType: { [key: string]: number };\n    trends: Array<{ date: string; count: number }>;\n  }> {\n    let dateFilter = {};\n    if (timeRange) {\n      const now = new Date();\n      const startDate = new Date();\n      \n      switch (timeRange) {\n        case 'day':\n          startDate.setDate(now.getDate() - 1);\n          break;\n        case 'week':\n          startDate.setDate(now.getDate() - 7);\n          break;\n        case 'month':\n          startDate.setMonth(now.getMonth() - 1);\n          break;\n        case 'year':\n          startDate.setFullYear(now.getFullYear() - 1);\n          break;\n      }\n      \n      dateFilter = { createdAt: { $gte: startDate } };\n    }\n\n    const [total, byStatus, byType, byContentType, trends] = await Promise.all([\n      Report.countDocuments({ isDeleted: false, ...dateFilter }),\n      this.getGroupedStats('status', dateFilter),\n      this.getGroupedStats('reportType', dateFilter),\n      this.getGroupedStats('contentType', dateFilter),\n      this.getTrendStats(timeRange || 'month')\n    ]);\n\n    return {\n      total,\n      byStatus,\n      byType,\n      byContentType,\n      trends\n    };\n  }\n\n  /**\n   * 獲取用戶舉報歷史\n   */\n  async getUserReportHistory(\n    userId: string,\n    type: 'reporter' | 'reported' = 'reporter'\n  ): Promise<IReport[]> {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      throw new Error('無效的用戶ID');\n    }\n\n    const filter: any = { isDeleted: false };\n    if (type === 'reporter') {\n      filter.reporterId = new mongoose.Types.ObjectId(userId);\n    } else {\n      filter.reportedUserId = new mongoose.Types.ObjectId(userId);\n    }\n\n    return await Report.find(filter)\n      .populate('reporterId', 'username email avatar')\n      .populate('reportedUserId', 'username email avatar')\n      .sort({ createdAt: -1 })\n      .limit(50)\n      .lean();\n  }\n\n  /**\n   * 自動處理舉報\n   */\n  async autoProcessReports(): Promise<{\n    processed: number;\n    actions: Array<{ reportId: string; action: string; reason: string }>;\n  }> {\n    const actions: Array<{ reportId: string; action: string; reason: string }> = [];\n    let processed = 0;\n\n    // 自動處理高風險舉報\n    const highRiskReports = await Report.find({\n      status: 'pending',\n      reportType: { $in: ['暴力威脅', '仇恨言論', '詐騙行為'] },\n      isDeleted: false\n    });\n\n    for (const report of highRiskReports) {\n      await Report.findByIdAndUpdate(report._id, {\n        priority: 'urgent',\n        status: 'investigating'\n      });\n      \n      actions.push({\n        reportId: report._id.toString(),\n        action: 'escalated',\n        reason: '高風險內容自動升級處理'\n      });\n      processed++;\n    }\n\n    // 自動隱藏被多次舉報的內容\n    await this.autoHideReportedContent();\n\n    return { processed, actions };\n  }\n\n  /**\n   * 驗證被舉報的內容是否存在\n   */\n  private async validateReportedContent(contentId: string, contentType: string): Promise<void> {\n    let content;\n    \n    switch (contentType) {\n      case 'comment':\n        content = await Comment.findById(contentId);\n        break;\n      case 'review':\n        content = await Review.findById(contentId);\n        break;\n      case 'message':\n        content = await Message.findById(contentId);\n        break;\n      case 'pet':\n        content = await Pet.findById(contentId);\n        break;\n      case 'user':\n        content = await User.findById(contentId);\n        break;\n      default:\n        throw new Error('無效的內容類型');\n    }\n\n    if (!content) {\n      throw new Error('被舉報的內容不存在');\n    }\n  }\n\n  /**\n   * 通知管理員\n   */\n  private async notifyAdmins(report: IReport): Promise<void> {\n    try {\n      // 獲取所有管理員\n      const admins = await User.find({ role: 'admin' }).select('_id');\n      \n      for (const admin of admins) {\n        await NotificationService.sendNotification({\n          userId: admin._id.toString(),\n          type: NotificationType.REPORT,\n          title: '新舉報通知',\n          message: `收到新的${report.contentType}舉報：${report.reportType}`,\n          data: {\n            reportId: report._id.toString(),\n            contentType: report.contentType,\n            reportType: report.reportType,\n            priority: report.priority\n          }\n        });\n      }\n    } catch (error) {\n      console.error('通知管理員失敗:', error);\n    }\n  }\n\n  /**\n   * 通知舉報者\n   */\n  private async notifyReporter(report: IReport): Promise<void> {\n    try {\n      await NotificationService.sendNotification({\n        userId: report.reporterId.toString(),\n        type: NotificationType.REPORT_RESOLVED,\n        title: '舉報處理完成',\n        message: `您的舉報已處理完成`,\n        data: {\n          reportId: report._id.toString(),\n          status: report.status,\n          resolution: report.resolution\n        }\n      });\n    } catch (error) {\n      console.error('通知舉報者失敗:', error);\n    }\n  }\n\n  /**\n   * 更新舉報統計\n   */\n  private async updateReportStats(report: IReport): Promise<void> {\n    // 這裡可以實作更詳細的統計邏輯\n    // 例如更新用戶的舉報統計、內容的舉報統計等\n  }\n\n  /**\n   * 獲取舉報狀態統計\n   */\n  private async getReportStatusStats(): Promise<{\n    pending: number;\n    investigating: number;\n    resolved: number;\n    dismissed: number;\n  }> {\n    const stats = await Report.aggregate([\n      { $match: { isDeleted: false } },\n      {\n        $group: {\n          _id: '$status',\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    const result = { pending: 0, investigating: 0, resolved: 0, dismissed: 0 };\n    stats.forEach(stat => {\n      if (stat._id in result) {\n        result[stat._id as keyof typeof result] = stat.count;\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * 獲取分組統計\n   */\n  private async getGroupedStats(field: string, dateFilter: any): Promise<{ [key: string]: number }> {\n    const stats = await Report.aggregate([\n      { $match: { isDeleted: false, ...dateFilter } },\n      {\n        $group: {\n          _id: `$${field}`,\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    const result: { [key: string]: number } = {};\n    stats.forEach(stat => {\n      result[stat._id] = stat.count;\n    });\n\n    return result;\n  }\n\n  /**\n   * 獲取趨勢統計\n   */\n  private async getTrendStats(timeRange: string): Promise<Array<{ date: string; count: number }>> {\n    const now = new Date();\n    const startDate = new Date();\n    let groupFormat = '%Y-%m-%d';\n    \n    switch (timeRange) {\n      case 'day':\n        startDate.setDate(now.getDate() - 7);\n        groupFormat = '%Y-%m-%d';\n        break;\n      case 'week':\n        startDate.setDate(now.getDate() - 30);\n        groupFormat = '%Y-%m-%d';\n        break;\n      case 'month':\n        startDate.setMonth(now.getMonth() - 12);\n        groupFormat = '%Y-%m';\n        break;\n      case 'year':\n        startDate.setFullYear(now.getFullYear() - 5);\n        groupFormat = '%Y';\n        break;\n    }\n\n    const trends = await Report.aggregate([\n      {\n        $match: {\n          isDeleted: false,\n          createdAt: { $gte: startDate }\n        }\n      },\n      {\n        $group: {\n          _id: {\n            $dateToString: {\n              format: groupFormat,\n              date: '$createdAt'\n            }\n          },\n          count: { $sum: 1 }\n        }\n      },\n      {\n        $project: {\n          date: '$_id',\n          count: 1,\n          _id: 0\n        }\n      },\n      { $sort: { date: 1 } }\n    ]);\n\n    return trends;\n  }\n\n  /**\n   * 自動隱藏被舉報的內容\n   */\n  private async autoHideReportedContent(): Promise<void> {\n    // 獲取被多次舉報的內容\n    const reportedContent = await Report.aggregate([\n      {\n        $match: {\n          isDeleted: false,\n          reportedContentId: { $ne: null }\n        }\n      },\n      {\n        $group: {\n          _id: {\n            contentId: '$reportedContentId',\n            contentType: '$contentType'\n          },\n          reportCount: { $sum: 1 }\n        }\n      },\n      {\n        $match: {\n          reportCount: { $gte: 3 } // 3次以上舉報\n        }\n      }\n    ]);\n\n    // 隱藏被多次舉報的內容\n    for (const item of reportedContent) {\n      const { contentId, contentType } = item._id;\n      \n      switch (contentType) {\n        case 'comment':\n          await Comment.findByIdAndUpdate(contentId, { isHidden: true });\n          break;\n        case 'review':\n          await Review.findByIdAndUpdate(contentId, { isHidden: true });\n          break;\n        // 其他內容類型的處理...\n      }\n    }\n  }\n}\n\nexport const reportService = new ReportService();"],"version":3}