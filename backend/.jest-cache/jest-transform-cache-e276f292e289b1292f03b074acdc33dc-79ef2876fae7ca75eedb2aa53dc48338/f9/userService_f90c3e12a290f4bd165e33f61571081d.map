{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\userService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\userService.ts"],"sourcesContent":["import { User, IUser } from '../models/User';\nimport { ValidationError, AuthenticationError, NotFoundError } from '../utils/errors';\nimport { logger } from '../utils/logger';\nimport mongoose from 'mongoose';\n\n// 用戶註冊資料介面\nexport interface RegisterUserData {\n  email: string;\n  password: string;\n  name: string;\n  phone?: string;\n}\n\n// 用戶登入資料介面\nexport interface LoginUserData {\n  email: string;\n  password: string;\n}\n\n// 用戶更新資料介面\nexport interface UpdateUserData {\n  name?: string;\n  phone?: string;\n  avatar?: string;\n}\n\n// 用戶查詢選項介面\nexport interface UserQueryOptions {\n  page?: number;\n  limit?: number;\n  search?: string;\n  isActive?: boolean;\n  isEmailVerified?: boolean;\n  role?: 'user' | 'admin';\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\n/**\n * 用戶服務類別\n */\nexport class UserService {\n  /**\n   * 用戶註冊\n   */\n  static async registerUser(userData: RegisterUserData): Promise<{\n    user: IUser;\n    token: string;\n  }> {\n    try {\n      // 檢查電子郵件是否已存在\n      const existingUser = await User.findOne({ email: userData.email.toLowerCase() });\n      if (existingUser) {\n        throw new ValidationError('此電子郵件已被註冊');\n      }\n      \n      // 建立新用戶\n      const user = new User({\n        email: userData.email.toLowerCase(),\n        password: userData.password,\n        name: userData.name.trim(),\n        phone: userData.phone?.trim(),\n      });\n      \n      // 生成電子郵件驗證令牌\n      user.generateEmailVerificationToken();\n      \n      // 儲存用戶\n      await user.save();\n      \n      // 生成認證令牌\n      const authToken = user.generateAuthToken();\n      \n      logger.info('用戶註冊成功', {\n        userId: user._id,\n        email: user.email,\n        name: user.name,\n      });\n      \n      // TODO: 發送電子郵件驗證郵件\n      // await emailService.sendVerificationEmail(user.email, verificationToken);\n      \n      return {\n        user,\n        token: authToken,\n      };\n    } catch (error) {\n      logger.error('用戶註冊失敗', { error, userData: { email: userData.email, name: userData.name } });\n      throw error;\n    }\n  }\n  \n  /**\n   * 用戶登入\n   */\n  static async loginUser(loginData: LoginUserData): Promise<{\n    user: IUser;\n    token: string;\n  }> {\n    try {\n      // 查找用戶（包含密碼）\n      const user = await User.findOne({ email: loginData.email.toLowerCase() })\n        .select('+password');\n      \n      if (!user) {\n        throw new AuthenticationError('電子郵件或密碼錯誤');\n      }\n      \n      // 檢查用戶是否啟用\n      if (!user.isActive) {\n        throw new AuthenticationError('用戶帳號已被停用');\n      }\n      \n      // 驗證密碼\n      const isPasswordValid = await user.comparePassword(loginData.password);\n      if (!isPasswordValid) {\n        throw new AuthenticationError('電子郵件或密碼錯誤');\n      }\n      \n      // 更新最後登入時間\n      user.lastLoginAt = new Date();\n      await user.save();\n      \n      // 生成認證令牌\n      const token = user.generateAuthToken();\n      \n      logger.info('用戶登入成功', {\n        userId: user._id,\n        email: user.email,\n        lastLoginAt: user.lastLoginAt,\n      });\n      \n      return {\n        user,\n        token,\n      };\n    } catch (error) {\n      logger.error('用戶登入失敗', { error, email: loginData.email });\n      throw error;\n    }\n  }\n  \n  /**\n   * 根據 ID 獲取用戶\n   */\n  static async getUserById(userId: string): Promise<IUser> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError('無效的用戶 ID');\n      }\n      \n      const user = await User.findById(userId);\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n      \n      return user;\n    } catch (error) {\n      logger.error('獲取用戶失敗', { error, userId });\n      throw error;\n    }\n  }\n  \n  /**\n   * 根據電子郵件獲取用戶\n   */\n  static async getUserByEmail(email: string): Promise<IUser | null> {\n    try {\n      const user = await User.findOne({ email: email.toLowerCase() });\n      return user;\n    } catch (error) {\n      logger.error('根據電子郵件獲取用戶失敗', { error, email });\n      throw error;\n    }\n  }\n  \n  /**\n   * 更新用戶資料\n   */\n  static async updateUser(userId: string, updateData: UpdateUserData): Promise<IUser> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError('無效的用戶 ID');\n      }\n      \n      const user = await User.findById(userId);\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n      \n      // 更新用戶資料\n      if (updateData.name !== undefined) {\n        user.name = updateData.name.trim();\n      }\n      if (updateData.phone !== undefined) {\n        user.phone = updateData.phone?.trim();\n      }\n      if (updateData.avatar !== undefined) {\n        user.avatar = updateData.avatar;\n      }\n      \n      await user.save();\n      \n      logger.info('用戶資料更新成功', {\n        userId: user._id,\n        updatedFields: Object.keys(updateData),\n      });\n      \n      return user;\n    } catch (error) {\n      logger.error('更新用戶資料失敗', { error, userId, updateData });\n      throw error;\n    }\n  }\n  \n  /**\n   * 更改用戶密碼\n   */\n  static async changePassword(\n    userId: string,\n    currentPassword: string,\n    newPassword: string\n  ): Promise<void> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError('無效的用戶 ID');\n      }\n      \n      const user = await User.findById(userId).select('+password');\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n      \n      // 驗證當前密碼\n      const isCurrentPasswordValid = await user.comparePassword(currentPassword);\n      if (!isCurrentPasswordValid) {\n        throw new AuthenticationError('當前密碼錯誤');\n      }\n      \n      // 設定新密碼\n      user.password = newPassword;\n      await user.save();\n      \n      logger.info('用戶密碼更改成功', { userId: user._id });\n    } catch (error) {\n      logger.error('更改用戶密碼失敗', { error, userId });\n      throw error;\n    }\n  }\n  \n  /**\n   * 重設密碼\n   */\n  static async resetPassword(token: string, newPassword: string): Promise<void> {\n    try {\n      // 查找具有有效重設令牌的用戶\n      const user = await User.findOne({\n        passwordResetToken: token,\n        passwordResetExpires: { $gt: new Date() },\n      }).select('+passwordResetToken +passwordResetExpires');\n      \n      if (!user) {\n        throw new ValidationError('密碼重設令牌無效或已過期');\n      }\n      \n      // 設定新密碼並清除重設令牌\n      user.password = newPassword;\n      user.passwordResetToken = null;\n      user.passwordResetExpires = null;\n      \n      await user.save();\n      \n      logger.info('密碼重設成功', { userId: user._id });\n    } catch (error) {\n      logger.error('密碼重設失敗', { error });\n      throw error;\n    }\n  }\n  \n  /**\n   * 驗證電子郵件\n   */\n  static async verifyEmail(userId: string, token: string): Promise<void> {\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n\n      if (user.isEmailVerified) {\n        throw new ValidationError('電子郵件已經驗證過了');\n      }\n\n      if (!user.emailVerificationToken || user.emailVerificationToken !== token) {\n        throw new ValidationError('驗證令牌無效或已過期');\n      }\n\n      // 更新用戶驗證狀態\n      user.isEmailVerified = true;\n      user.emailVerificationToken = null;\n      await user.save();\n\n      logger.info('電子郵件驗證成功', { userId });\n    } catch (error) {\n      logger.error('電子郵件驗證失敗', { error, userId, token });\n      throw error;\n    }\n  }\n\n  /**\n   * 通過令牌驗證電子郵件\n   */\n  static async verifyEmailByToken(token: string): Promise<void> {\n    try {\n      const user = await User.findOne({ emailVerificationToken: token });\n      if (!user) {\n        throw new ValidationError('驗證令牌無效或已過期');\n      }\n\n      if (user.isEmailVerified) {\n        throw new ValidationError('電子郵件已經驗證過了');\n      }\n\n      // 更新用戶驗證狀態\n      user.isEmailVerified = true;\n      user.emailVerificationToken = null;\n      await user.save();\n\n      logger.info('電子郵件驗證成功', { userId: user._id });\n    } catch (error) {\n      logger.error('電子郵件驗證失敗', { error, token });\n      throw error;\n    }\n  }\n  \n  /**\n   * 停用用戶\n   */\n  static async deactivateUser(userId: string): Promise<void> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError('無效的用戶 ID');\n      }\n      \n      const user = await User.findById(userId);\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n      \n      user.isActive = false;\n      await user.save();\n      \n      logger.info('用戶已停用', { userId: user._id });\n    } catch (error) {\n      logger.error('停用用戶失敗', { error, userId });\n      throw error;\n    }\n  }\n  \n  /**\n   * 獲取用戶列表（分頁）\n   */\n  static async getUsers(options: UserQueryOptions = {}): Promise<{\n    users: IUser[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        search,\n        isActive,\n        isEmailVerified,\n        role,\n        sortBy = 'createdAt',\n        sortOrder = 'desc',\n      } = options;\n      \n      // 建立查詢條件\n      const query: any = {};\n      \n      if (search) {\n        query.$or = [\n          { name: { $regex: search, $options: 'i' } },\n          { email: { $regex: search, $options: 'i' } },\n        ];\n      }\n      \n      if (isActive !== undefined) {\n        query.isActive = isActive;\n      }\n      \n      if (isEmailVerified !== undefined) {\n        query.isEmailVerified = isEmailVerified;\n      }\n      \n      if (role) {\n        query.role = role;\n      }\n      \n      // 計算跳過的文檔數量\n      const skip = (page - 1) * limit;\n      \n      // 建立排序物件\n      const sort: any = {};\n      sort[sortBy] = sortOrder === 'asc' ? 1 : -1;\n      \n      // 執行查詢\n      const [users, total] = await Promise.all([\n        User.find(query)\n          .sort(sort)\n          .skip(skip)\n          .limit(limit)\n          .exec(),\n        User.countDocuments(query),\n      ]);\n      \n      const totalPages = Math.ceil(total / limit);\n      \n      return {\n        users,\n        total,\n        page,\n        limit,\n        totalPages,\n      };\n    } catch (error) {\n      logger.error('獲取用戶列表失敗', { error, options });\n      throw error;\n    }\n  }\n}"],"version":3}