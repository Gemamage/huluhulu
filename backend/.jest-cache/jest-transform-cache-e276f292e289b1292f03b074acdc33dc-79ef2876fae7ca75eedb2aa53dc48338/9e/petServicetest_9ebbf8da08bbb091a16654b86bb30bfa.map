{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\petService.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\services\\petService.test.ts"],"sourcesContent":["import { PetService } from '../../src/services/petService';\nimport { Pet, IPet } from '../../src/models/Pet';\nimport { User, IUser } from '../../src/models/User';\nimport { CloudinaryService } from '../../src/services/cloudinaryService';\nimport { aiService } from '../../src/services/aiService';\nimport { validUserData, validPetData } from '../utils/testData';\nimport mongoose from 'mongoose';\n\n// Mock external services\njest.mock('../../src/services/cloudinaryService');\njest.mock('../../src/services/aiService');\n\nconst mockCloudinaryService = CloudinaryService as jest.Mocked<typeof CloudinaryService>;\nconst mockAiService = aiService as jest.Mocked<typeof aiService>;\n\ndescribe('PetService', () => {\n  let testUser: IUser;\n  let testPet: IPet;\n\n  beforeEach(async () => {\n    await User.deleteMany({});\n    await Pet.deleteMany({});\n    \n    testUser = await new User(validUserData).save();\n    testPet = await new Pet({\n      ...validPetData,\n      owner: testUser._id\n    }).save();\n    \n    jest.clearAllMocks();\n  });\n\n  afterEach(async () => {\n    await User.deleteMany({});\n    await Pet.deleteMany({});\n  });\n\n  describe('createPet', () => {\n    const petData = {\n      name: 'Buddy',\n      type: 'dog' as const,\n      breed: 'Golden Retriever',\n      age: 3,\n      gender: 'male' as const,\n      size: 'large' as const,\n      color: 'golden',\n      description: 'Friendly dog',\n      status: 'lost' as const,\n      location: {\n        address: '123 Main St',\n        city: 'Test City',\n        coordinates: [0, 0] as [number, number]\n      },\n      contact: {\n        phone: '+1234567890',\n        email: 'test@example.com'\n      }\n    };\n\n    it('should create pet successfully', async () => {\n      const result = await PetService.createPet(testUser._id.toString(), petData);\n      \n      expect(result).toBeDefined();\n      expect(result.name).toBe(petData.name);\n      expect(result.owner.toString()).toBe(testUser._id.toString());\n      expect(result.type).toBe(petData.type);\n      expect(result.status).toBe(petData.status);\n    });\n\n    it('should create pet with images', async () => {\n      const images = ['image1.jpg', 'image2.jpg'];\n      mockCloudinaryService.uploadImage.mockResolvedValue({\n        public_id: 'test_id',\n        secure_url: 'https://cloudinary.com/test.jpg',\n        width: 800,\n        height: 600\n      });\n\n      const result = await PetService.createPet(testUser._id.toString(), {\n        ...petData,\n        images\n      });\n      \n      expect(mockCloudinaryService.uploadImage).toHaveBeenCalledTimes(2);\n      expect(result.images).toHaveLength(2);\n    });\n\n    it('should analyze pet image with AI', async () => {\n      const images = ['image1.jpg'];\n      mockCloudinaryService.uploadImage.mockResolvedValue({\n        public_id: 'test_id',\n        secure_url: 'https://cloudinary.com/test.jpg',\n        width: 800,\n        height: 600\n      });\n      \n      mockAiService.analyzeImage.mockResolvedValue({\n        breed: 'Golden Retriever',\n        confidence: 0.95,\n        features: [0.1, 0.2, 0.3]\n      });\n\n      const result = await PetService.createPet(testUser._id.toString(), {\n        ...petData,\n        images\n      });\n      \n      expect(mockAiService.analyzeImage).toHaveBeenCalled();\n      expect(result.aiData?.breed).toBe('Golden Retriever');\n      expect(result.aiData?.confidence).toBe(0.95);\n    });\n\n    it('should handle AI analysis failure gracefully', async () => {\n      const images = ['image1.jpg'];\n      mockCloudinaryService.uploadImage.mockResolvedValue({\n        public_id: 'test_id',\n        secure_url: 'https://cloudinary.com/test.jpg',\n        width: 800,\n        height: 600\n      });\n      \n      mockAiService.analyzeImage.mockRejectedValue(new Error('AI service unavailable'));\n\n      const result = await PetService.createPet(testUser._id.toString(), {\n        ...petData,\n        images\n      });\n      \n      expect(result).toBeDefined();\n      expect(result.aiData).toBeUndefined();\n    });\n\n    it('should validate required fields', async () => {\n      await expect(PetService.createPet(testUser._id.toString(), {\n        ...petData,\n        name: ''\n      })).rejects.toThrow();\n    });\n\n    it('should handle invalid owner ID', async () => {\n      await expect(PetService.createPet('invalid-id', petData))\n        .rejects.toThrow();\n    });\n  });\n\n  describe('getPetById', () => {\n    it('should get pet by ID successfully', async () => {\n      const result = await PetService.getPetById(testPet._id.toString());\n      \n      expect(result).toBeDefined();\n      expect(result?._id.toString()).toBe(testPet._id.toString());\n      expect(result?.name).toBe(testPet.name);\n    });\n\n    it('should return null for non-existent pet', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      const result = await PetService.getPetById(nonExistentId);\n      \n      expect(result).toBeNull();\n    });\n\n    it('should handle invalid pet ID', async () => {\n      await expect(PetService.getPetById('invalid-id'))\n        .rejects.toThrow();\n    });\n\n    it('should populate owner information', async () => {\n      const result = await PetService.getPetById(testPet._id.toString());\n      \n      expect(result?.owner).toBeDefined();\n      expect(typeof result?.owner).toBe('object');\n    });\n  });\n\n  describe('updatePet', () => {\n    const updateData = {\n      name: 'Updated Buddy',\n      description: 'Updated description'\n    };\n\n    it('should update pet successfully', async () => {\n      const result = await PetService.updatePet(\n        testPet._id.toString(),\n        testUser._id.toString(),\n        updateData\n      );\n      \n      expect(result).toBeDefined();\n      expect(result?.name).toBe(updateData.name);\n      expect(result?.description).toBe(updateData.description);\n    });\n\n    it('should not allow non-owner to update pet', async () => {\n      const anotherUser = await new User({\n        ...validUserData,\n        email: 'another@example.com'\n      }).save();\n      \n      await expect(PetService.updatePet(\n        testPet._id.toString(),\n        anotherUser._id.toString(),\n        updateData\n      )).rejects.toThrow('無權限');\n    });\n\n    it('should update pet images', async () => {\n      const newImages = ['new-image.jpg'];\n      mockCloudinaryService.uploadImage.mockResolvedValue({\n        public_id: 'new_test_id',\n        secure_url: 'https://cloudinary.com/new-test.jpg',\n        width: 800,\n        height: 600\n      });\n\n      const result = await PetService.updatePet(\n        testPet._id.toString(),\n        testUser._id.toString(),\n        { images: newImages }\n      );\n      \n      expect(mockCloudinaryService.uploadImage).toHaveBeenCalled();\n      expect(result?.images).toHaveLength(1);\n    });\n\n    it('should handle non-existent pet', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      \n      await expect(PetService.updatePet(\n        nonExistentId,\n        testUser._id.toString(),\n        updateData\n      )).rejects.toThrow('寵物不存在');\n    });\n\n    it('should validate update data', async () => {\n      await expect(PetService.updatePet(\n        testPet._id.toString(),\n        testUser._id.toString(),\n        { age: -1 }\n      )).rejects.toThrow();\n    });\n  });\n\n  describe('deletePet', () => {\n    it('should delete pet successfully', async () => {\n      const result = await PetService.deletePet(\n        testPet._id.toString(),\n        testUser._id.toString()\n      );\n      \n      expect(result).toBe(true);\n      \n      const deletedPet = await Pet.findById(testPet._id);\n      expect(deletedPet).toBeNull();\n    });\n\n    it('should not allow non-owner to delete pet', async () => {\n      const anotherUser = await new User({\n        ...validUserData,\n        email: 'another@example.com'\n      }).save();\n      \n      await expect(PetService.deletePet(\n        testPet._id.toString(),\n        anotherUser._id.toString()\n      )).rejects.toThrow('無權限');\n    });\n\n    it('should delete pet images from Cloudinary', async () => {\n      // Add images to pet\n      testPet.images = [{\n        url: 'https://cloudinary.com/test.jpg',\n        publicId: 'test_id',\n        width: 800,\n        height: 600\n      }];\n      await testPet.save();\n      \n      await PetService.deletePet(\n        testPet._id.toString(),\n        testUser._id.toString()\n      );\n      \n      expect(mockCloudinaryService.deleteImage).toHaveBeenCalledWith('test_id');\n    });\n\n    it('should handle non-existent pet', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      \n      await expect(PetService.deletePet(\n        nonExistentId,\n        testUser._id.toString()\n      )).rejects.toThrow('寵物不存在');\n    });\n  });\n\n  describe('searchPets', () => {\n    beforeEach(async () => {\n      // Create additional test pets\n      await new Pet({\n        ...validPetData,\n        name: 'Cat Whiskers',\n        type: 'cat',\n        breed: 'Persian',\n        status: 'found',\n        owner: testUser._id\n      }).save();\n      \n      await new Pet({\n        ...validPetData,\n        name: 'Dog Rex',\n        type: 'dog',\n        breed: 'German Shepherd',\n        status: 'lost',\n        size: 'large',\n        owner: testUser._id\n      }).save();\n    });\n\n    it('should search pets without filters', async () => {\n      const result = await PetService.searchPets({});\n      \n      expect(result.pets).toHaveLength(3); // testPet + 2 additional\n      expect(result.total).toBe(3);\n      expect(result.page).toBe(1);\n    });\n\n    it('should filter pets by type', async () => {\n      const result = await PetService.searchPets({ type: 'cat' });\n      \n      expect(result.pets).toHaveLength(1);\n      expect(result.pets[0].type).toBe('cat');\n    });\n\n    it('should filter pets by status', async () => {\n      const result = await PetService.searchPets({ status: 'lost' });\n      \n      expect(result.pets).toHaveLength(2);\n      result.pets.forEach(pet => {\n        expect(pet.status).toBe('lost');\n      });\n    });\n\n    it('should filter pets by breed', async () => {\n      const result = await PetService.searchPets({ breed: 'Persian' });\n      \n      expect(result.pets).toHaveLength(1);\n      expect(result.pets[0].breed).toBe('Persian');\n    });\n\n    it('should filter pets by size', async () => {\n      const result = await PetService.searchPets({ size: 'large' });\n      \n      expect(result.pets.length).toBeGreaterThan(0);\n      result.pets.forEach(pet => {\n        expect(pet.size).toBe('large');\n      });\n    });\n\n    it('should search pets by location', async () => {\n      const result = await PetService.searchPets({\n        location: {\n          coordinates: [0, 0],\n          radius: 10\n        }\n      });\n      \n      expect(result.pets.length).toBeGreaterThan(0);\n    });\n\n    it('should paginate results', async () => {\n      const result = await PetService.searchPets({\n        page: 1,\n        limit: 2\n      });\n      \n      expect(result.pets).toHaveLength(2);\n      expect(result.page).toBe(1);\n      expect(result.totalPages).toBe(2);\n    });\n\n    it('should sort pets by date', async () => {\n      const result = await PetService.searchPets({\n        sortBy: 'createdAt',\n        sortOrder: 'desc'\n      });\n      \n      expect(result.pets.length).toBeGreaterThan(1);\n      \n      for (let i = 1; i < result.pets.length; i++) {\n        expect(result.pets[i-1].createdAt.getTime())\n          .toBeGreaterThanOrEqual(result.pets[i].createdAt.getTime());\n      }\n    });\n\n    it('should handle text search', async () => {\n      const result = await PetService.searchPets({ search: 'Whiskers' });\n      \n      expect(result.pets).toHaveLength(1);\n      expect(result.pets[0].name).toContain('Whiskers');\n    });\n  });\n\n  describe('findSimilarPets', () => {\n    beforeEach(async () => {\n      // Mock AI service for similarity search\n      mockAiService.findSimilarPets.mockResolvedValue([\n        {\n          petId: testPet._id.toString(),\n          similarity: 0.95,\n          pet: testPet\n        }\n      ]);\n    });\n\n    it('should find similar pets using AI', async () => {\n      const imageBuffer = Buffer.from('fake-image-data');\n      \n      const result = await PetService.findSimilarPets(imageBuffer);\n      \n      expect(mockAiService.findSimilarPets).toHaveBeenCalledWith(imageBuffer, 0.7);\n      expect(result).toHaveLength(1);\n      expect(result[0].similarity).toBe(0.95);\n    });\n\n    it('should use custom similarity threshold', async () => {\n      const imageBuffer = Buffer.from('fake-image-data');\n      const threshold = 0.8;\n      \n      await PetService.findSimilarPets(imageBuffer, threshold);\n      \n      expect(mockAiService.findSimilarPets).toHaveBeenCalledWith(imageBuffer, threshold);\n    });\n\n    it('should handle AI service errors', async () => {\n      mockAiService.findSimilarPets.mockRejectedValue(new Error('AI service error'));\n      \n      const imageBuffer = Buffer.from('fake-image-data');\n      \n      await expect(PetService.findSimilarPets(imageBuffer))\n        .rejects.toThrow('AI service error');\n    });\n  });\n\n  describe('updatePetStats', () => {\n    it('should increment view count', async () => {\n      const initialViews = testPet.stats.views;\n      \n      await PetService.updatePetStats(testPet._id.toString(), 'view');\n      \n      const updatedPet = await Pet.findById(testPet._id);\n      expect(updatedPet?.stats.views).toBe(initialViews + 1);\n    });\n\n    it('should increment share count', async () => {\n      const initialShares = testPet.stats.shares;\n      \n      await PetService.updatePetStats(testPet._id.toString(), 'share');\n      \n      const updatedPet = await Pet.findById(testPet._id);\n      expect(updatedPet?.stats.shares).toBe(initialShares + 1);\n    });\n\n    it('should handle non-existent pet', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      \n      await expect(PetService.updatePetStats(nonExistentId, 'view'))\n        .rejects.toThrow('寵物不存在');\n    });\n\n    it('should handle invalid stat type', async () => {\n      await expect(PetService.updatePetStats(testPet._id.toString(), 'invalid' as any))\n        .rejects.toThrow();\n    });\n  });\n\n  describe('getUserPets', () => {\n    beforeEach(async () => {\n      // Create additional pets for the user\n      await new Pet({\n        ...validPetData,\n        name: 'User Pet 2',\n        owner: testUser._id\n      }).save();\n    });\n\n    it('should get all pets for a user', async () => {\n      const result = await PetService.getUserPets(testUser._id.toString());\n      \n      expect(result.pets).toHaveLength(2);\n      result.pets.forEach(pet => {\n        expect(pet.owner.toString()).toBe(testUser._id.toString());\n      });\n    });\n\n    it('should filter user pets by status', async () => {\n      const result = await PetService.getUserPets(testUser._id.toString(), {\n        status: 'lost'\n      });\n      \n      result.pets.forEach(pet => {\n        expect(pet.status).toBe('lost');\n      });\n    });\n\n    it('should paginate user pets', async () => {\n      const result = await PetService.getUserPets(testUser._id.toString(), {\n        page: 1,\n        limit: 1\n      });\n      \n      expect(result.pets).toHaveLength(1);\n      expect(result.totalPages).toBe(2);\n    });\n\n    it('should handle non-existent user', async () => {\n      const nonExistentId = new mongoose.Types.ObjectId().toString();\n      \n      const result = await PetService.getUserPets(nonExistentId);\n      \n      expect(result.pets).toHaveLength(0);\n      expect(result.total).toBe(0);\n    });\n  });\n\n  describe('markPetAsFound', () => {\n    it('should mark lost pet as found', async () => {\n      testPet.status = 'lost';\n      await testPet.save();\n      \n      const result = await PetService.markPetAsFound(\n        testPet._id.toString(),\n        testUser._id.toString()\n      );\n      \n      expect(result?.status).toBe('found');\n      expect(result?.foundAt).toBeDefined();\n    });\n\n    it('should not allow non-owner to mark pet as found', async () => {\n      const anotherUser = await new User({\n        ...validUserData,\n        email: 'another@example.com'\n      }).save();\n      \n      await expect(PetService.markPetAsFound(\n        testPet._id.toString(),\n        anotherUser._id.toString()\n      )).rejects.toThrow('無權限');\n    });\n\n    it('should handle already found pet', async () => {\n      testPet.status = 'found';\n      await testPet.save();\n      \n      await expect(PetService.markPetAsFound(\n        testPet._id.toString(),\n        testUser._id.toString()\n      )).rejects.toThrow('已經標記為找到');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      // Mock database error\n      jest.spyOn(Pet, 'findById').mockRejectedValueOnce(new Error('Database connection failed'));\n      \n      await expect(PetService.getPetById(testPet._id.toString()))\n        .rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle Cloudinary service errors', async () => {\n      mockCloudinaryService.uploadImage.mockRejectedValueOnce(\n        new Error('Cloudinary upload failed')\n      );\n      \n      const petData = {\n        name: 'Test Pet',\n        type: 'dog' as const,\n        breed: 'Test Breed',\n        age: 1,\n        gender: 'male' as const,\n        size: 'medium' as const,\n        color: 'brown',\n        description: 'Test description',\n        status: 'lost' as const,\n        location: {\n          address: '123 Test St',\n          city: 'Test City',\n          coordinates: [0, 0] as [number, number]\n        },\n        contact: {\n          phone: '+1234567890',\n          email: 'test@example.com'\n        },\n        images: ['test-image.jpg']\n      };\n      \n      await expect(PetService.createPet(testUser._id.toString(), petData))\n        .rejects.toThrow('Cloudinary upload failed');\n    });\n  });\n});"],"version":3}