{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\setup-simple.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\setup-simple.ts"],"sourcesContent":["import { MongoMemoryServer } from 'mongodb-memory-server';\nimport mongoose from 'mongoose';\n\nlet mongod: MongoMemoryServer;\n\n// 全局設置 - 在所有測試之前運行\nbeforeAll(async () => {\n  try {\n    // 如果已經連接，先斷開\n    if (mongoose.connection.readyState !== 0) {\n      await mongoose.disconnect();\n    }\n    \n    // 創建內存數據庫\n    mongod = await MongoMemoryServer.create({\n      instance: {\n        dbSize: 1, // 1MB\n      },\n      binary: {\n        version: '5.0.0',\n        skipMD5: true,\n      }\n    });\n    \n    const uri = mongod.getUri();\n    \n    // 連接到數據庫\n    await mongoose.connect(uri);\n    \n    console.log('✅ 測試數據庫已連接');\n  } catch (error) {\n    console.error('❌ 測試數據庫連接失敗:', error);\n    throw error;\n  }\n}, 60000);\n\n// 每個測試後清理數據\nafterEach(async () => {\n  if (mongoose.connection.readyState === 1) {\n    try {\n      const collections = mongoose.connection.collections;\n      for (const key in collections) {\n        await collections[key].deleteMany({});\n      }\n    } catch (error) {\n      console.warn('清理數據時出現警告:', error.message);\n    }\n  }\n});\n\n// 測試結束後清理\nafterAll(async () => {\n  try {\n    if (mongoose.connection.readyState !== 0) {\n      await mongoose.connection.close();\n    }\n    if (mongod) {\n      await mongod.stop();\n    }\n    console.log('✅ 測試數據庫已關閉');\n  } catch (error) {\n    console.warn('關閉數據庫時出現警告:', error.message);\n  }\n}, 30000);\n\n// 設置測試環境變數\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'test-jwt-secret-key-with-minimum-32-characters-length';\nprocess.env.CLOUDINARY_CLOUD_NAME = 'test-cloud';\nprocess.env.CLOUDINARY_API_KEY = 'test-api-key';\nprocess.env.CLOUDINARY_API_SECRET = 'test-api-secret';\nprocess.env.EMAIL_HOST = 'smtp.test.com';\nprocess.env.EMAIL_PORT = '587';\nprocess.env.EMAIL_USER = 'test@example.com';\nprocess.env.EMAIL_PASS = 'test-password';\nprocess.env.EMAIL_FROM_NAME = '測試網站';\nprocess.env.EMAIL_FROM_EMAIL = 'test@example.com';\nprocess.env.CLIENT_URL = 'http://localhost:3000';\nprocess.env.SESSION_SECRET = 'test-session-secret-key-with-minimum-32-characters';\nprocess.env.GOOGLE_CLIENT_ID = 'test-google-client-id';\nprocess.env.GOOGLE_CLIENT_SECRET = 'test-google-client-secret';\n\n// 模擬外部服務\njest.mock('../src/services/emailService', () => ({\n  EmailService: {\n    sendVerificationEmail: jest.fn().mockResolvedValue(true),\n    sendPasswordResetEmail: jest.fn().mockResolvedValue(true),\n    sendWelcomeEmail: jest.fn().mockResolvedValue(true),\n    sendNotificationEmail: jest.fn().mockResolvedValue(true)\n  }\n}));\n\njest.mock('../src/services/cloudinaryService', () => ({\n  CloudinaryService: {\n    uploadFile: jest.fn().mockResolvedValue({\n      public_id: 'test-image-id',\n      secure_url: 'https://test.cloudinary.com/test-image.jpg',\n      width: 800,\n      height: 600\n    }),\n    deleteFile: jest.fn().mockResolvedValue(true),\n    generateOptimizedUrl: jest.fn().mockReturnValue('https://test.cloudinary.com/optimized-image.jpg')\n  }\n}));\n\njest.mock('../src/services/aiService', () => ({\n  analyzeImage: jest.fn().mockResolvedValue({\n    breed: 'Golden Retriever',\n    confidence: 0.95,\n    features: {\n      color: 'golden',\n      size: 'large',\n      age: 'adult'\n    }\n  }),\n  findSimilarPets: jest.fn().mockResolvedValue([]),\n  generateSearchSuggestions: jest.fn().mockResolvedValue(['golden retriever', 'labrador'])\n}));\n\n// 全局錯誤處理\nprocess.on('unhandledRejection', (reason) => {\n  console.warn('測試中出現未處理的 Promise 拒絕:', reason);\n});\n\nprocess.on('uncaughtException', (error) => {\n  console.warn('測試中出現未捕獲的異常:', error.message);\n});"],"version":3}