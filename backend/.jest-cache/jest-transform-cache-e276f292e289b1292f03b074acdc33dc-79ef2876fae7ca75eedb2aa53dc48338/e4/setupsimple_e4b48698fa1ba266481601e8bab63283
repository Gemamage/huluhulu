4f400eb63b6cd63ddf57e01820102505
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// 模擬外部服務
jest.mock('../src/services/emailService', () => ({
    EmailService: {
        sendVerificationEmail: jest.fn().mockResolvedValue(true),
        sendPasswordResetEmail: jest.fn().mockResolvedValue(true),
        sendWelcomeEmail: jest.fn().mockResolvedValue(true),
        sendNotificationEmail: jest.fn().mockResolvedValue(true)
    }
}));
jest.mock('../src/services/cloudinaryService', () => ({
    CloudinaryService: {
        uploadFile: jest.fn().mockResolvedValue({
            public_id: 'test-image-id',
            secure_url: 'https://test.cloudinary.com/test-image.jpg',
            width: 800,
            height: 600
        }),
        deleteFile: jest.fn().mockResolvedValue(true),
        generateOptimizedUrl: jest.fn().mockReturnValue('https://test.cloudinary.com/optimized-image.jpg')
    }
}));
jest.mock('../src/services/aiService', () => ({
    analyzeImage: jest.fn().mockResolvedValue({
        breed: 'Golden Retriever',
        confidence: 0.95,
        features: {
            color: 'golden',
            size: 'large',
            age: 'adult'
        }
    }),
    findSimilarPets: jest.fn().mockResolvedValue([]),
    generateSearchSuggestions: jest.fn().mockResolvedValue(['golden retriever', 'labrador'])
}));
const mongodb_memory_server_1 = require("mongodb-memory-server");
const mongoose_1 = __importDefault(require("mongoose"));
let mongod;
let isConnected = false;
// 簡化的測試設置
beforeAll(async () => {
    if (!isConnected) {
        try {
            // 使用更簡單的配置
            mongod = await mongodb_memory_server_1.MongoMemoryServer.create({
                instance: {
                    port: undefined, // 讓系統自動分配端口
                    dbSize: 1, // 1MB
                },
                binary: {
                    version: '5.0.0', // 使用較舊但穩定的版本
                    skipMD5: true,
                }
            });
            const uri = mongod.getUri();
            // 簡化的連接配置
            await mongoose_1.default.connect(uri, {
                bufferCommands: false,
                bufferMaxEntries: 0,
            });
            isConnected = true;
            console.log('✅ 測試數據庫已連接');
        }
        catch (error) {
            console.error('❌ 測試數據庫連接失敗:', error);
            throw error;
        }
    }
}, 60000); // 增加超時時間
// 每個測試後清理數據
afterEach(async () => {
    if (isConnected) {
        try {
            const collections = mongoose_1.default.connection.collections;
            for (const key in collections) {
                await collections[key].deleteMany({});
            }
        }
        catch (error) {
            console.warn('清理數據時出現警告:', error.message);
        }
    }
});
// 測試結束後清理
afterAll(async () => {
    if (isConnected) {
        try {
            await mongoose_1.default.connection.close();
            if (mongod) {
                await mongod.stop();
            }
            console.log('✅ 測試數據庫已關閉');
        }
        catch (error) {
            console.warn('關閉數據庫時出現警告:', error.message);
        }
    }
}, 30000);
// 設置測試環境變數
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-jwt-secret-key-with-minimum-32-characters-length';
process.env.CLOUDINARY_CLOUD_NAME = 'test-cloud';
process.env.CLOUDINARY_API_KEY = 'test-api-key';
process.env.CLOUDINARY_API_SECRET = 'test-api-secret';
process.env.EMAIL_HOST = 'smtp.test.com';
process.env.EMAIL_PORT = '587';
process.env.EMAIL_USER = 'test@example.com';
process.env.EMAIL_PASS = 'test-password';
process.env.EMAIL_FROM_NAME = '測試網站';
process.env.EMAIL_FROM_EMAIL = 'test@example.com';
process.env.CLIENT_URL = 'http://localhost:3000';
process.env.SESSION_SECRET = 'test-session-secret-key-with-minimum-32-characters';
process.env.GOOGLE_CLIENT_ID = 'test-google-client-id';
process.env.GOOGLE_CLIENT_SECRET = 'test-google-client-secret';
// 全局錯誤處理
process.on('unhandledRejection', (reason) => {
    console.warn('測試中出現未處理的 Promise 拒絕:', reason);
});
process.on('uncaughtException', (error) => {
    console.warn('測試中出現未捕獲的異常:', error.message);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc2VyXFxEZXNrdG9wXFx0cmFlcHJvamVjdFxcdGVzdDJcXHBldC1maW5kZXItYXBwXFxiYWNrZW5kXFx0ZXN0XFxzZXR1cC1zaW1wbGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFxRkEsU0FBUztBQUNULElBQUksQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMvQyxZQUFZLEVBQUU7UUFDWixxQkFBcUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3hELHNCQUFzQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDekQsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUNuRCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0tBQ3pEO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDcEQsaUJBQWlCLEVBQUU7UUFDakIsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUN0QyxTQUFTLEVBQUUsZUFBZTtZQUMxQixVQUFVLEVBQUUsNENBQTRDO1lBQ3hELEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUc7U0FDWixDQUFDO1FBQ0YsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDN0Msb0JBQW9CLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxpREFBaUQsQ0FBQztLQUNuRztDQUNGLENBQUMsQ0FBQyxDQUFDO0FBRUosSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFB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QUFDLG9CQUFvQixFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7SUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUMsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVc2VyXFxEZXNrdG9wXFx0cmFlcHJvamVjdFxcdGVzdDJcXHBldC1maW5kZXItYXBwXFxiYWNrZW5kXFx0ZXN0XFxzZXR1cC1zaW1wbGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9uZ29NZW1vcnlTZXJ2ZXIgfSBmcm9tICdtb25nb2RiLW1lbW9yeS1zZXJ2ZXInO1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcblxubGV0IG1vbmdvZDogTW9uZ29NZW1vcnlTZXJ2ZXI7XG5sZXQgaXNDb25uZWN0ZWQgPSBmYWxzZTtcblxuLy8g57Ch5YyW55qE5ris6Kmm6Kit572uXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICBpZiAoIWlzQ29ubmVjdGVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOS9v+eUqOabtOewoeWWrueahOmFjee9rlxuICAgICAgbW9uZ29kID0gYXdhaXQgTW9uZ29NZW1vcnlTZXJ2ZXIuY3JlYXRlKHtcbiAgICAgICAgaW5zdGFuY2U6IHtcbiAgICAgICAgICBwb3J0OiB1bmRlZmluZWQsIC8vIOiuk+ezu+e1seiHquWLleWIhumFjeerr+WPo1xuICAgICAgICAgIGRiU2l6ZTogMSwgLy8gMU1CXG4gICAgICAgIH0sXG4gICAgICAgIGJpbmFyeToge1xuICAgICAgICAgIHZlcnNpb246ICc1LjAuMCcsIC8vIOS9v+eUqOi8g+iIiuS9huepqeWumueahOeJiOacrFxuICAgICAgICAgIHNraXBNRDU6IHRydWUsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCB1cmkgPSBtb25nb2QuZ2V0VXJpKCk7XG4gICAgICBcbiAgICAgIC8vIOewoeWMlueahOmAo+aOpemFjee9rlxuICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCh1cmksIHtcbiAgICAgICAgYnVmZmVyQ29tbWFuZHM6IGZhbHNlLFxuICAgICAgICBidWZmZXJNYXhFbnRyaWVzOiAwLFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUg5ris6Kmm5pW45pOa5bqr5bey6YCj5o6lJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCDmuKzoqabmlbjmk5rluqvpgKPmjqXlpLHmlZc6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59LCA2MDAwMCk7IC8vIOWinuWKoOi2heaZguaZgumWk1xuXG4vLyDmr4/lgIvmuKzoqablvozmuIXnkIbmlbjmk5pcbmFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gIGlmIChpc0Nvbm5lY3RlZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IG1vbmdvb3NlLmNvbm5lY3Rpb24uY29sbGVjdGlvbnM7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb2xsZWN0aW9ucykge1xuICAgICAgICBhd2FpdCBjb2xsZWN0aW9uc1trZXldLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+a4heeQhuaVuOaTmuaZguWHuuePvuitpuWRijonLCBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vLyDmuKzoqabntZDmnZ/lvozmuIXnkIZcbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgaWYgKGlzQ29ubmVjdGVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgIGlmIChtb25nb2QpIHtcbiAgICAgICAgYXdhaXQgbW9uZ29kLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKCfinIUg5ris6Kmm5pW45pOa5bqr5bey6Zec6ZaJJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign6Zec6ZaJ5pW45pOa5bqr5pmC5Ye654++6K2m5ZGKOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufSwgMzAwMDApO1xuXG4vLyDoqK3nva7muKzoqabnkrDlooPorormlbhcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xucHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LWp3dC1zZWNyZXQta2V5LXdpdGgtbWluaW11bS0zMi1jaGFyYWN0ZXJzLWxlbmd0aCc7XG5wcm9jZXNzLmVudi5DTE9VRElOQVJZX0NMT1VEX05BTUUgPSAndGVzdC1jbG91ZCc7XG5wcm9jZXNzLmVudi5DTE9VRElOQVJZX0FQSV9LRVkgPSAndGVzdC1hcGkta2V5JztcbnByb2Nlc3MuZW52LkNMT1VESU5BUllfQVBJX1NFQ1JFVCA9ICd0ZXN0LWFwaS1zZWNyZXQnO1xucHJvY2Vzcy5lbnYuRU1BSUxfSE9TVCA9ICdzbXRwLnRlc3QuY29tJztcbnByb2Nlc3MuZW52LkVNQUlMX1BPUlQgPSAnNTg3JztcbnByb2Nlc3MuZW52LkVNQUlMX1VTRVIgPSAndGVzdEBleGFtcGxlLmNvbSc7XG5wcm9jZXNzLmVudi5FTUFJTF9QQVNTID0gJ3Rlc3QtcGFzc3dvcmQnO1xucHJvY2Vzcy5lbnYuRU1BSUxfRlJPTV9OQU1FID0gJ+a4rOippue2suermSc7XG5wcm9jZXNzLmVudi5FTUFJTF9GUk9NX0VNQUlMID0gJ3Rlc3RAZXhhbXBsZS5jb20nO1xucHJvY2Vzcy5lbnYuQ0xJRU5UX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnO1xucHJvY2Vzcy5lbnYuU0VTU0lPTl9TRUNSRVQgPSAndGVzdC1zZXNzaW9uLXNlY3JldC1rZXktd2l0aC1taW5pbXVtLTMyLWNoYXJhY3RlcnMnO1xucHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9JRCA9ICd0ZXN0LWdvb2dsZS1jbGllbnQtaWQnO1xucHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVQgPSAndGVzdC1nb29nbGUtY2xpZW50LXNlY3JldCc7XG5cbi8vIOaooeaTrOWklumDqOacjeWLmVxuamVzdC5tb2NrKCcuLi9zcmMvc2VydmljZXMvZW1haWxTZXJ2aWNlJywgKCkgPT4gKHtcbiAgRW1haWxTZXJ2aWNlOiB7XG4gICAgc2VuZFZlcmlmaWNhdGlvbkVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIHNlbmRXZWxjb21lRW1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBzZW5kTm90aWZpY2F0aW9uRW1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKVxuICB9XG59KSk7XG5cbmplc3QubW9jaygnLi4vc3JjL3NlcnZpY2VzL2Nsb3VkaW5hcnlTZXJ2aWNlJywgKCkgPT4gKHtcbiAgQ2xvdWRpbmFyeVNlcnZpY2U6IHtcbiAgICB1cGxvYWRGaWxlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgcHVibGljX2lkOiAndGVzdC1pbWFnZS1pZCcsXG4gICAgICBzZWN1cmVfdXJsOiAnaHR0cHM6Ly90ZXN0LmNsb3VkaW5hcnkuY29tL3Rlc3QtaW1hZ2UuanBnJyxcbiAgICAgIHdpZHRoOiA4MDAsXG4gICAgICBoZWlnaHQ6IDYwMFxuICAgIH0pLFxuICAgIGRlbGV0ZUZpbGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBnZW5lcmF0ZU9wdGltaXplZFVybDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaHR0cHM6Ly90ZXN0LmNsb3VkaW5hcnkuY29tL29wdGltaXplZC1pbWFnZS5qcGcnKVxuICB9XG59KSk7XG5cbmplc3QubW9jaygnLi4vc3JjL3NlcnZpY2VzL2FpU2VydmljZScsICgpID0+ICh7XG4gIGFuYWx5emVJbWFnZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICBicmVlZDogJ0dvbGRlbiBSZXRyaWV2ZXInLFxuICAgIGNvbmZpZGVuY2U6IDAuOTUsXG4gICAgZmVhdHVyZXM6IHtcbiAgICAgIGNvbG9yOiAnZ29sZGVuJyxcbiAgICAgIHNpemU6ICdsYXJnZScsXG4gICAgICBhZ2U6ICdhZHVsdCdcbiAgICB9XG4gIH0pLFxuICBmaW5kU2ltaWxhclBldHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gIGdlbmVyYXRlU2VhcmNoU3VnZ2VzdGlvbnM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbJ2dvbGRlbiByZXRyaWV2ZXInLCAnbGFicmFkb3InXSlcbn0pKTtcblxuLy8g5YWo5bGA6Yyv6Kqk6JmV55CGXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAocmVhc29uKSA9PiB7XG4gIGNvbnNvbGUud2Fybign5ris6Kmm5Lit5Ye654++5pyq6JmV55CG55qEIFByb21pc2Ug5ouS57WVOicsIHJlYXNvbik7XG59KTtcblxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyb3IpID0+IHtcbiAgY29uc29sZS53YXJuKCfmuKzoqabkuK3lh7rnj77mnKrmjZXnjbLnmoTnlbDluLg6JywgZXJyb3IubWVzc2FnZSk7XG59KTsiXSwidmVyc2lvbiI6M30=