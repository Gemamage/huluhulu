{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\indexing.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\indexing.ts"],"sourcesContent":["import { elasticsearchService } from \"../elasticsearchService\";\nimport { logger } from \"../../utils/logger\";\nimport { IPet } from \"../../models/Pet\";\n\n/**\n * 索引管理服務\n * 負責處理 Elasticsearch 索引的初始化、文檔的增刪改查等基本操作\n */\nexport class IndexingService {\n  private readonly PET_INDEX = \"pets\";\n  private readonly SEARCH_ANALYTICS_INDEX = \"search_analytics\";\n\n  /**\n   * 初始化寵物搜尋索引\n   */\n  public async initializePetIndex(): Promise<boolean> {\n    const mapping = {\n      properties: {\n        name: {\n          type: \"text\",\n          analyzer: \"chinese_analyzer\",\n          fields: {\n            keyword: { type: \"keyword\" },\n            suggest: {\n              type: \"completion\",\n              analyzer: \"simple\",\n            },\n          },\n        },\n        type: { type: \"keyword\" },\n        breed: {\n          type: \"text\",\n          analyzer: \"chinese_analyzer\",\n          fields: {\n            keyword: { type: \"keyword\" },\n            suggest: {\n              type: \"completion\",\n              analyzer: \"simple\",\n            },\n          },\n        },\n        gender: { type: \"keyword\" },\n        age: { type: \"integer\" },\n        color: {\n          type: \"text\",\n          analyzer: \"chinese_analyzer\",\n          fields: {\n            keyword: { type: \"keyword\" },\n          },\n        },\n        size: { type: \"keyword\" },\n        status: { type: \"keyword\" },\n        description: {\n          type: \"text\",\n          analyzer: \"chinese_analyzer\",\n        },\n        lastSeenLocation: {\n          type: \"text\",\n          analyzer: \"chinese_analyzer\",\n          fields: {\n            keyword: { type: \"keyword\" },\n            suggest: {\n              type: \"completion\",\n              analyzer: \"simple\",\n            },\n          },\n        },\n        location: {\n          type: \"geo_point\",\n        },\n        lastSeenDate: { type: \"date\" },\n        contactInfo: {\n          properties: {\n            name: {\n              type: \"text\",\n              analyzer: \"chinese_analyzer\",\n            },\n            phone: { type: \"keyword\" },\n            email: { type: \"keyword\" },\n          },\n        },\n        images: { type: \"keyword\" },\n        reward: { type: \"integer\" },\n        isUrgent: { type: \"boolean\" },\n        microchipId: { type: \"keyword\" },\n        vaccinations: { type: \"keyword\" },\n        medicalConditions: { type: \"keyword\" },\n        specialMarks: {\n          type: \"text\",\n          analyzer: \"chinese_analyzer\",\n        },\n        personality: { type: \"keyword\" },\n        viewCount: { type: \"integer\" },\n        shareCount: { type: \"integer\" },\n        userId: { type: \"keyword\" },\n        aiTags: { type: \"keyword\" },\n        aiBreedPrediction: { type: \"keyword\" },\n        aiConfidence: { type: \"float\" },\n        createdAt: { type: \"date\" },\n        updatedAt: { type: \"date\" },\n      },\n    };\n\n    return await elasticsearchService.createIndex(this.PET_INDEX, mapping);\n  }\n\n  /**\n   * 初始化搜尋分析索引\n   */\n  public async initializeSearchAnalyticsIndex(): Promise<boolean> {\n    const mapping = {\n      properties: {\n        query: {\n          type: \"text\",\n          analyzer: \"chinese_analyzer\",\n          fields: {\n            keyword: { type: \"keyword\" },\n          },\n        },\n        filters: {\n          properties: {\n            type: { type: \"keyword\" },\n            status: { type: \"keyword\" },\n            location: { type: \"keyword\" },\n            breed: { type: \"keyword\" },\n            size: { type: \"keyword\" },\n            gender: { type: \"keyword\" },\n          },\n        },\n        userId: { type: \"keyword\" },\n        resultCount: { type: \"integer\" },\n        timestamp: { type: \"date\" },\n        sessionId: { type: \"keyword\" },\n        userAgent: { type: \"text\" },\n        ipAddress: { type: \"ip\" },\n      },\n    };\n\n    return await elasticsearchService.createIndex(\n      this.SEARCH_ANALYTICS_INDEX,\n      mapping,\n    );\n  }\n\n  /**\n   * 將寵物資料轉換為索引文檔格式\n   */\n  private petToDocument(pet: IPet): any {\n    return {\n      name: pet.name,\n      type: pet.type,\n      breed: pet.breed,\n      gender: pet.gender,\n      age: pet.age,\n      color: pet.color,\n      size: pet.size,\n      status: pet.status,\n      description: pet.description,\n      lastSeenLocation: pet.lastSeenLocation,\n      lastSeenDate: pet.lastSeenDate,\n      contactInfo: pet.contactInfo,\n      images: pet.images,\n      reward: pet.reward,\n      isUrgent: pet.isUrgent,\n      microchipId: pet.microchipId,\n      vaccinations: pet.vaccinations,\n      medicalConditions: pet.medicalConditions,\n      specialMarks: pet.specialMarks,\n      personality: pet.personality,\n      viewCount: pet.viewCount,\n      shareCount: pet.shareCount,\n      userId: pet.userId.toString(),\n      aiTags: pet.aiTags,\n      aiBreedPrediction: pet.aiBreedPrediction,\n      aiConfidence: pet.aiConfidence,\n      createdAt: pet.createdAt,\n      updatedAt: pet.updatedAt,\n    };\n  }\n\n  /**\n   * 索引寵物文檔\n   */\n  public async indexPet(pet: IPet): Promise<boolean> {\n    const document = this.petToDocument(pet);\n    return await elasticsearchService.indexDocument(\n      this.PET_INDEX,\n      pet._id.toString(),\n      document,\n    );\n  }\n\n  /**\n   * 批量索引寵物文檔\n   */\n  public async bulkIndexPets(pets: IPet[]): Promise<boolean> {\n    const documents = pets.map((pet) => ({\n      id: pet._id.toString(),\n      document: this.petToDocument(pet),\n    }));\n\n    return await elasticsearchService.bulkIndex(this.PET_INDEX, documents);\n  }\n\n  /**\n   * 刪除寵物文檔\n   */\n  public async deletePet(petId: string): Promise<boolean> {\n    return await elasticsearchService.deleteDocument(this.PET_INDEX, petId);\n  }\n\n  /**\n   * 更新寵物文檔\n   */\n  public async updatePet(pet: IPet): Promise<boolean> {\n    const document = {\n      ...this.petToDocument(pet),\n      updatedAt: new Date(),\n    };\n\n    return await elasticsearchService.updateDocument(\n      this.PET_INDEX,\n      pet._id.toString(),\n      document,\n    );\n  }\n\n  /**\n   * 檢查索引是否存在\n   */\n  public async indexExists(indexName: string): Promise<boolean> {\n    try {\n      const exists = await elasticsearchService.getClient().indices.exists({\n        index: indexName,\n      });\n      return exists;\n    } catch (error) {\n      logger.error(`檢查索引 ${indexName} 是否存在失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 刪除索引\n   */\n  public async deleteIndex(indexName: string): Promise<boolean> {\n    try {\n      await elasticsearchService.getClient().indices.delete({\n        index: indexName,\n      });\n      logger.info(`索引 ${indexName} 已刪除`);\n      return true;\n    } catch (error) {\n      logger.error(`刪除索引 ${indexName} 失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 重建索引\n   */\n  public async rebuildPetIndex(): Promise<boolean> {\n    try {\n      // 刪除現有索引\n      if (await this.indexExists(this.PET_INDEX)) {\n        await this.deleteIndex(this.PET_INDEX);\n      }\n\n      // 重新創建索引\n      const result = await this.initializePetIndex();\n\n      if (result) {\n        logger.info(\"寵物索引重建成功\");\n      } else {\n        logger.error(\"寵物索引重建失敗\");\n      }\n\n      return result;\n    } catch (error) {\n      logger.error(\"重建寵物索引失敗:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * 獲取索引統計信息\n   */\n  public async getIndexStats(indexName: string): Promise<any> {\n    try {\n      const response = await elasticsearchService.getClient().indices.stats({\n        index: indexName,\n      });\n      return response;\n    } catch (error) {\n      logger.error(`獲取索引 ${indexName} 統計信息失敗:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 獲取寵物索引名稱\n   */\n  public getPetIndexName(): string {\n    return this.PET_INDEX;\n  }\n\n  /**\n   * 獲取搜尋分析索引名稱\n   */\n  public getSearchAnalyticsIndexName(): string {\n    return this.SEARCH_ANALYTICS_INDEX;\n  }\n}\n\n// 導出單例實例\nexport const indexingService = new IndexingService();\n"],"version":3}