5cfc42dc853fe1682424ad49ddda94cb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserRepository = void 0;
const User_1 = require("../models/User");
class UserRepository {
    async findById(id) {
        return User_1.User.findById(id).exec();
    }
    async findByEmail(email) {
        return User_1.User.findOne({ email }).exec();
    }
    async create(userData) {
        const user = new User_1.User(userData);
        return user.save();
    }
    async update(id, userData) {
        return User_1.User.findByIdAndUpdate(id, userData, { new: true }).exec();
    }
    async delete(id) {
        return User_1.User.findByIdAndDelete(id).exec();
    }
    async findAll() {
        return User_1.User.find().exec();
    }
    async findByEmailVerificationToken(token) {
        return User_1.User.findOne({ emailVerificationToken: token }).exec();
    }
    async findByPasswordResetToken(token) {
        return User_1.User.findOne({ passwordResetToken: token }).exec();
    }
    async verifyEmail(id) {
        return User_1.User.findByIdAndUpdate(id, {
            isEmailVerified: true,
            emailVerificationToken: undefined,
        }, { new: true }).exec();
    }
    async deactivate(id) {
        return User_1.User.findByIdAndUpdate(id, { isActive: false }, { new: true }).exec();
    }
    async findWithPagination(query, options) {
        const { page, limit, sortBy, sortOrder } = options;
        const skip = (page - 1) * limit;
        const sort = {};
        sort[sortBy] = sortOrder === "asc" ? 1 : -1;
        const [users, total] = await Promise.all([
            User_1.User.find(query).sort(sort).skip(skip).limit(limit).exec(),
            User_1.User.countDocuments(query),
        ]);
        return { users, total };
    }
    async findByPasswordResetTokenWithExpiry(token) {
        return User_1.User.findOne({
            passwordResetToken: token,
            passwordResetExpires: { $gt: new Date() },
        })
            .select("+passwordResetToken +passwordResetExpires")
            .exec();
    }
    // 管理員功能相關方法
    async countDocuments(filter = {}) {
        return User_1.User.countDocuments(filter).exec();
    }
    async findWithSelect(filter, select, options) {
        let query = User_1.User.find(filter).select(select);
        if (options?.sort) {
            query = query.sort(options.sort);
        }
        if (options?.skip) {
            query = query.skip(options.skip);
        }
        if (options?.limit) {
            query = query.limit(options.limit);
        }
        return query.exec();
    }
    async findByIdWithSelect(id, select) {
        return User_1.User.findById(id).select(select).exec();
    }
    async updateWithValidation(id, updateData) {
        return User_1.User.findByIdAndUpdate(id, updateData, {
            new: true,
            runValidators: true,
        })
            .select("-password -passwordResetToken -passwordResetExpires -emailVerificationToken -emailVerificationExpires")
            .exec();
    }
    async softDelete(id, email) {
        return User_1.User.findByIdAndUpdate(id, {
            isActive: false,
            email: `deleted_${Date.now()}_${email}`,
        }).exec();
    }
    async updatePassword(id, password) {
        const user = await User_1.User.findById(id);
        if (user) {
            user.password = password;
            await user.save();
            return user;
        }
        return null;
    }
    async getStatistics() {
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        const [total, active, verified, admins, recent] = await Promise.all([
            User_1.User.countDocuments(),
            User_1.User.countDocuments({ isActive: true }),
            User_1.User.countDocuments({ isEmailVerified: true }),
            User_1.User.countDocuments({ role: { $in: ["admin", "moderator"] } }),
            User_1.User.countDocuments({ createdAt: { $gte: thirtyDaysAgo } }),
        ]);
        return { total, active, verified, admins, recent };
    }
    // 清理過期驗證令牌
    async cleanupExpiredTokens() {
        const now = new Date();
        const result = await User_1.User.updateMany({
            $or: [
                {
                    emailVerificationExpires: { $lt: now },
                    emailVerificationToken: { $exists: true, $ne: null },
                },
                {
                    passwordResetExpires: { $lt: now },
                    passwordResetToken: { $exists: true, $ne: null },
                },
            ],
        }, {
            $unset: {
                emailVerificationToken: 1,
                emailVerificationExpires: 1,
                passwordResetToken: 1,
                passwordResetExpires: 1,
            },
        });
        return { deletedCount: result.modifiedCount };
    }
}
exports.UserRepository = UserRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,