{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\pets.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\pets.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport { User, IUser } from '../../src/models/User';\nimport { Pet } from '../../src/models/Pet';\nimport { petRoutes } from '../../src/routes/pets';\nimport { authenticate } from '../../src/middleware/auth';\nimport { errorHandler } from '../../src/middleware/error-handler';\nimport { validUserData, otherUserData, validPetData, createTestPet } from '../utils/testData';\n\n// 創建測試應用\nconst app = express();\napp.use(express.json());\napp.use('/api/pets', petRoutes);\napp.use(errorHandler);\n\ndescribe('Pet Routes', () => {\n  let testUser: IUser;\n  let authToken: string;\n  let otherUser: IUser;\n  let otherAuthToken: string;\n\n\n\n\n\n  beforeEach(async () => {\n    testUser = await new User(validUserData).save();\n    authToken = testUser.generateAuthToken();\n    \n    otherUser = await new User(otherUserData).save();\n    otherAuthToken = otherUser.generateAuthToken();\n  });\n\n  afterEach(async () => {\n    await Pet.deleteMany({});\n    await User.deleteMany({});\n  });\n\n  describe('POST /api/pets', () => {\n    it('should create a new pet with valid data', async () => {\n      const response = await request(app)\n        .post('/api/pets')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(validPetData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.pet).toBeDefined();\n      expect(response.body.data.pet.name).toBe(validPetData.name);\n      expect(response.body.data.pet.type).toBe(validPetData.type);\n      expect(response.body.data.pet.userId.id).toBe(testUser._id.toString());\n    });\n\n    it('should not create pet without authentication', async () => {\n      const response = await request(app)\n        .post('/api/pets')\n        .send(validPetData)\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error || response.body.message).toBeDefined();\n    });\n\n    it('should not create pet with invalid data', async () => {\n      const response = await request(app)\n        .post('/api/pets')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...validPetData,\n          type: 'invalid-type'\n        })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should not create pet with missing required fields', async () => {\n      const response = await request(app)\n        .post('/api/pets')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          name: 'Buddy'\n          // 缺少其他必需字段\n        })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('GET /api/pets', () => {\n    beforeEach(async () => {\n      // 創建測試寵物\n      await new Pet({\n        ...validPetData,\n        userId: testUser._id,\n        lastSeenDate: new Date('2024-01-15T10:00:00Z')\n      }).save();\n\n      await new Pet({\n        ...validPetData,\n        name: 'Max',\n        breed: 'Labrador',\n        type: 'dog',\n        status: 'found',\n        userId: testUser._id,\n        lastSeenDate: new Date('2024-01-16T14:30:00Z')\n      }).save();\n\n      await new Pet({\n        ...validPetData,\n        name: 'Whiskers',\n        breed: 'Persian',\n        type: 'cat',\n        status: 'lost',\n        userId: otherUser._id,\n        lastSeenDate: new Date('2024-01-17T09:15:00Z')\n      }).save();\n    });\n\n    it('should get all pets without filters', async () => {\n      const response = await request(app)\n        .get('/api/pets')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.pets).toBeDefined();\n      expect(response.body.data.pets.length).toBeGreaterThan(0);\n      expect(response.body.data.pagination.totalItems).toBeGreaterThan(0);\n      expect(response.body.data.pagination.currentPage).toBe(1);\n      expect(response.body.data.pagination.itemsPerPage).toBeDefined();\n    });\n\n    it('should filter pets by type', async () => {\n      const response = await request(app)\n        .get('/api/pets?type=dog')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      response.body.data.pets.forEach((pet: any) => {\n        expect(pet.type).toBe('dog');\n      });\n    });\n\n    it('should filter pets by status', async () => {\n      const response = await request(app)\n        .get('/api/pets?status=lost')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      response.body.data.pets.forEach((pet: any) => {\n        expect(pet.status).toBe('lost');\n      });\n    });\n\n    it('should filter pets by breed', async () => {\n      const response = await request(app)\n        .get('/api/pets?breed=Golden Retriever')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      response.body.data.pets.forEach((pet: any) => {\n        expect(pet.breed).toBe('Golden Retriever');\n      });\n    });\n\n    it('should paginate results', async () => {\n      const response = await request(app)\n        .get('/api/pets?page=1&limit=2')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.pets.length).toBeLessThanOrEqual(2);\n      expect(response.body.data.pagination.currentPage).toBe(1);\n      expect(response.body.data.pagination.itemsPerPage).toBe(2);\n    });\n\n    it('should sort results', async () => {\n      const response = await request(app)\n        .get('/api/pets?sortBy=createdAt&sortOrder=desc')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      \n      if (response.body.data.pets.length > 1) {\n        const dates = response.body.data.pets.map((pet: any) => new Date(pet.createdAt).getTime());\n        for (let i = 1; i < dates.length; i++) {\n          expect(dates[i-1]).toBeGreaterThanOrEqual(dates[i]);\n        }\n      }\n    });\n  });\n\n  describe('GET /api/pets/:id', () => {\n    let testPet: any;\n\n    beforeEach(async () => {\n      testPet = await new Pet({\n        ...validPetData,\n        userId: testUser._id\n      }).save();\n    });\n\n    it('should get pet by valid ID', async () => {\n      const response = await request(app)\n        .get(`/api/pets/${testPet._id}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.pet).toBeDefined();\n      expect(response.body.data.pet._id).toBe(testPet._id.toString());\n      expect(response.body.data.pet.name).toBe(testPet.name);\n    });\n\n    it('should increment view count when getting pet', async () => {\n      const originalViewCount = testPet.viewCount;\n      \n      await request(app)\n        .get(`/api/pets/${testPet._id}`)\n        .expect(200);\n      \n      const updatedPet = await Pet.findById(testPet._id);\n      expect(updatedPet?.viewCount).toBe(originalViewCount + 1);\n    });\n\n    it('should not get pet with invalid ID', async () => {\n      const response = await request(app)\n        .get('/api/pets/invalid-id')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toBeDefined();\n    });\n\n    it('should not get non-existent pet', async () => {\n      const fakeId = new mongoose.Types.ObjectId();\n      \n      const response = await request(app)\n        .get(`/api/pets/${fakeId}`)\n        .expect(404);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toBeDefined();\n    });\n  });\n\n  describe('PUT /api/pets/:id', () => {\n    let testPet: any;\n\n    beforeEach(async () => {\n      testPet = await new Pet({\n        ...validPetData,\n        userId: testUser._id\n      }).save();\n    });\n\n    it('should update pet by owner', async () => {\n      const updateData = {\n        name: 'Updated Buddy',\n        description: 'Updated description'\n      };\n\n      const response = await request(app)\n        .put(`/api/pets/${testPet._id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(updateData)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.pet.name).toBe(updateData.name);\n      expect(response.body.data.pet.description).toBe(updateData.description);\n    });\n\n    it('should not update pet without authentication', async () => {\n      const response = await request(app)\n        .put(`/api/pets/${testPet._id}`)\n        .send({ name: 'Updated' })\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toBeDefined();\n    });\n\n    it('should not update pet by non-owner', async () => {\n      const response = await request(app)\n        .put(`/api/pets/${testPet._id}`)\n        .set('Authorization', `Bearer ${otherAuthToken}`)\n        .send({ name: 'Updated' })\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toBeDefined();\n    });\n\n    it('should not update pet with invalid data', async () => {\n      const response = await request(app)\n        .put(`/api/pets/${testPet._id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ type: 'invalid-type' })\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error || response.body.message).toBeDefined();\n    });\n  });\n\n  describe('DELETE /api/pets/:id', () => {\n    let testPet: any;\n\n    beforeEach(async () => {\n      testPet = await new Pet({\n        ...validPetData,\n        userId: testUser._id\n      }).save();\n    });\n\n    it('should delete pet by owner', async () => {\n      const response = await request(app)\n        .delete(`/api/pets/${testPet._id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toBe('寵物協尋案例已刪除');\n      \n      const deletedPet = await Pet.findById(testPet._id);\n      expect(deletedPet).toBeNull();\n    });\n\n    it('should not delete pet without authentication', async () => {\n      const response = await request(app)\n        .delete(`/api/pets/${testPet._id}`)\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toBeDefined();\n    });\n\n    it('should not delete pet by non-owner', async () => {\n      const response = await request(app)\n        .delete(`/api/pets/${testPet._id}`)\n        .set('Authorization', `Bearer ${otherAuthToken}`)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toBeDefined();\n    });\n  });\n\n  describe('POST /api/pets/:id/share', () => {\n    let testPet: any;\n\n    beforeEach(async () => {\n      testPet = await new Pet({\n        ...validPetData,\n        userId: testUser._id\n      }).save();\n    });\n\n    it('should increment share count', async () => {\n      const originalShareCount = testPet.shareCount;\n      \n      const response = await request(app)\n        .post(`/api/pets/${testPet._id}/share`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      \n      const updatedPet = await Pet.findById(testPet._id);\n      expect(updatedPet?.shareCount).toBe(originalShareCount + 1);\n    });\n\n    it('should not increment share count for invalid ID', async () => {\n      const response = await request(app)\n        .post('/api/pets/invalid-id/share')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toBeDefined();\n    });\n  });\n\n  describe('GET /api/pets/user/:userId', () => {\n    beforeEach(async () => {\n      await new Pet({\n        ...validPetData,\n        userId: testUser._id\n      }).save();\n\n      await new Pet({\n        ...validPetData,\n        name: 'Max',\n        userId: testUser._id\n      }).save();\n    });\n\n    it('should get pets for valid user', async () => {\n      const response = await request(app)\n        .get(`/api/pets/user/${testUser._id}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.pets).toBeDefined();\n      expect(response.body.data.pets.length).toBeGreaterThan(0);\n      response.body.data.pets.forEach((pet: any) => {\n        expect(pet.userId._id.toString()).toBe(testUser._id.toString());\n      });\n    });\n\n    it('should return empty array for user with no pets', async () => {\n      const response = await request(app)\n        .get(`/api/pets/user/${otherUser._id}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.pets).toBeDefined();\n      expect(response.body.data.pets.length).toBe(0);\n    });\n\n    it('should not get pets for invalid user ID', async () => {\n      const response = await request(app)\n        .get('/api/pets/user/invalid-id')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toBeDefined();\n    });\n  });\n});"],"version":3}