c040f0c72f516b403b682e242d61de8b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificationService = void 0;
const mongoose_1 = __importDefault(require("mongoose"));
const crypto_1 = __importDefault(require("crypto"));
const UserRepository_1 = require("../../repositories/UserRepository");
const errors_1 = require("../../utils/errors");
const logger_1 = require("../../utils/logger");
const emailService_1 = require("../emailService");
/**
 * 郵件驗證服務 - 處理郵件驗證相關功能
 */
class VerificationService {
    constructor() {
        this.userRepository = new UserRepository_1.UserRepository();
        this.emailService = new emailService_1.EmailService();
    }
    /**
     * 發送郵件驗證
     */
    async sendEmailVerification(userId) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
                throw new errors_1.ValidationError('無效的用戶 ID');
            }
            const user = await this.userRepository.findById(userId);
            if (!user) {
                throw new errors_1.NotFoundError('用戶不存在');
            }
            // 檢查是否已經驗證
            if (user.isEmailVerified) {
                throw new errors_1.ValidationError('郵箱已經驗證過了');
            }
            // 檢查帳號狀態
            if (!user.isActive) {
                throw new errors_1.ValidationError('帳號已被停用');
            }
            // 生成驗證令牌
            const verificationToken = crypto_1.default.randomBytes(32).toString('hex');
            const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24小時後過期
            // 保存驗證令牌
            await this.userRepository.updateWithValidation(userId, {
                emailVerificationToken: verificationToken,
                emailVerificationExpires: verificationExpires,
            });
            // 發送驗證郵件
            await this.emailService.sendEmailVerification(user.email, user.name, verificationToken);
            logger_1.logger.info('郵件驗證發送成功', { userId, email: user.email });
        }
        catch (error) {
            logger_1.logger.error('發送郵件驗證失敗', { error, userId });
            throw error;
        }
    }
    /**
     * 驗證郵箱（通過用戶ID）
     */
    async verifyEmailByUserId(userId) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
                throw new errors_1.ValidationError('無效的用戶 ID');
            }
            const user = await this.userRepository.findById(userId);
            if (!user) {
                throw new errors_1.NotFoundError('用戶不存在');
            }
            // 檢查是否已經驗證
            if (user.isEmailVerified) {
                throw new errors_1.ValidationError('郵箱已經驗證過了');
            }
            // 更新驗證狀態
            await this.userRepository.updateWithValidation(userId, {
                isEmailVerified: true,
                emailVerificationToken: undefined,
                emailVerificationExpires: undefined,
            });
            logger_1.logger.info('郵箱驗證成功', { userId });
            // 發送歡迎郵件
            try {
                await this.emailService.sendWelcomeEmail(user.email, user.name);
            }
            catch (emailError) {
                logger_1.logger.warn('歡迎郵件發送失敗', { error: emailError, userId });
            }
        }
        catch (error) {
            logger_1.logger.error('郵箱驗證失敗', { error, userId });
            throw error;
        }
    }
    /**
     * 驗證郵箱（通過令牌）
     */
    async verifyEmailByToken(token) {
        try {
            // 查找有效的驗證令牌
            const user = await this.userRepository.findByVerificationToken(token);
            if (!user) {
                throw new errors_1.ValidationError('無效或已過期的驗證令牌');
            }
            // 檢查令牌是否過期
            if (!user.emailVerificationExpires || user.emailVerificationExpires < new Date()) {
                throw new errors_1.ValidationError('驗證令牌已過期');
            }
            // 檢查是否已經驗證
            if (user.isEmailVerified) {
                throw new errors_1.ValidationError('郵箱已經驗證過了');
            }
            // 更新驗證狀態
            await this.userRepository.updateWithValidation(user._id.toString(), {
                isEmailVerified: true,
                emailVerificationToken: undefined,
                emailVerificationExpires: undefined,
            });
            logger_1.logger.info('郵箱驗證成功', { userId: user._id, email: user.email });
            // 發送歡迎郵件
            try {
                await this.emailService.sendWelcomeEmail(user.email, user.name);
            }
            catch (emailError) {
                logger_1.logger.warn('歡迎郵件發送失敗', { error: emailError, userId: user._id });
            }
        }
        catch (error) {
            logger_1.logger.error('通過令牌驗證郵箱失敗', { error, token });
            throw error;
        }
    }
    /**
     * 重新發送驗證郵件
     */
    async resendEmailVerification(email) {
        try {
            const user = await this.userRepository.findByEmail(email);
            if (!user) {
                // 為了安全考慮，即使用戶不存在也返回成功
                logger_1.logger.info('重新發送驗證郵件 - 用戶不存在', { email });
                return;
            }
            // 檢查是否已經驗證
            if (user.isEmailVerified) {
                throw new errors_1.ValidationError('郵箱已經驗證過了');
            }
            // 檢查帳號狀態
            if (!user.isActive) {
                throw new errors_1.ValidationError('帳號已被停用');
            }
            // 檢查是否在冷卻期內（防止濫用）
            const lastSent = user.emailVerificationExpires;
            if (lastSent && lastSent > new Date(Date.now() - 5 * 60 * 1000)) {
                throw new errors_1.ValidationError('請等待5分鐘後再重新發送驗證郵件');
            }
            // 生成新的驗證令牌
            const verificationToken = crypto_1.default.randomBytes(32).toString('hex');
            const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24小時後過期
            // 更新驗證令牌
            await this.userRepository.updateWithValidation(user._id.toString(), {
                emailVerificationToken: verificationToken,
                emailVerificationExpires: verificationExpires,
            });
            // 發送驗證郵件
            await this.emailService.sendEmailVerification(email, user.name, verificationToken);
            logger_1.logger.info('重新發送驗證郵件成功', { userId: user._id, email });
        }
        catch (error) {
            logger_1.logger.error('重新發送驗證郵件失敗', { error, email });
            throw error;
        }
    }
    /**
     * 驗證郵件驗證令牌
     */
    async validateVerificationToken(token) {
        try {
            const user = await this.userRepository.findByVerificationToken(token);
            if (!user || !user.emailVerificationExpires || user.emailVerificationExpires < new Date()) {
                return false;
            }
            return true;
        }
        catch (error) {
            logger_1.logger.error('驗證郵件驗證令牌失敗', { error, token });
            return false;
        }
    }
    /**
     * 清理過期的郵件驗證令牌
     */
    async cleanupExpiredVerificationTokens() {
        try {
            const result = await this.userRepository.cleanupExpiredEmailVerificationTokens();
            logger_1.logger.info('清理過期郵件驗證令牌成功', { deletedCount: result.deletedCount });
            return result;
        }
        catch (error) {
            logger_1.logger.error('清理過期郵件驗證令牌失敗', { error });
            throw error;
        }
    }
    /**
     * 獲取用戶驗證狀態
     */
    async getVerificationStatus(userId) {
        try {
            if (!mongoose_1.default.Types.ObjectId.isValid(userId)) {
                throw new errors_1.ValidationError('無效的用戶 ID');
            }
            const user = await this.userRepository.findById(userId);
            if (!user) {
                throw new errors_1.NotFoundError('用戶不存在');
            }
            return {
                isEmailVerified: user.isEmailVerified,
                hasVerificationToken: !!user.emailVerificationToken,
                tokenExpires: user.emailVerificationExpires,
            };
        }
        catch (error) {
            logger_1.logger.error('獲取驗證狀態失敗', { error, userId });
            throw error;
        }
    }
}
exports.VerificationService = VerificationService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,