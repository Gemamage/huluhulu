{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\verification.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\verification.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport { IUser } from '../../models/User';\nimport { UserRepository } from '../../repositories/UserRepository';\nimport { ValidationError, NotFoundError } from '../../utils/errors';\nimport { logger } from '../../utils/logger';\nimport { EmailService } from '../emailService';\n\n/**\n * 郵件驗證服務 - 處理郵件驗證相關功能\n */\nexport class VerificationService {\n  private userRepository: UserRepository;\n  private emailService: EmailService;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n    this.emailService = new EmailService();\n  }\n\n  /**\n   * 發送郵件驗證\n   */\n  async sendEmailVerification(userId: string): Promise<void> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError('無效的用戶 ID');\n      }\n\n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n\n      // 檢查是否已經驗證\n      if (user.isEmailVerified) {\n        throw new ValidationError('郵箱已經驗證過了');\n      }\n\n      // 檢查帳號狀態\n      if (!user.isActive) {\n        throw new ValidationError('帳號已被停用');\n      }\n\n      // 生成驗證令牌\n      const verificationToken = crypto.randomBytes(32).toString('hex');\n      const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24小時後過期\n\n      // 保存驗證令牌\n      await this.userRepository.updateWithValidation(userId, {\n        emailVerificationToken: verificationToken,\n        emailVerificationExpires: verificationExpires,\n      });\n\n      // 發送驗證郵件\n      await this.emailService.sendEmailVerification(user.email, user.name, verificationToken);\n\n      logger.info('郵件驗證發送成功', { userId, email: user.email });\n    } catch (error) {\n      logger.error('發送郵件驗證失敗', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 驗證郵箱（通過用戶ID）\n   */\n  async verifyEmailByUserId(userId: string): Promise<void> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError('無效的用戶 ID');\n      }\n\n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n\n      // 檢查是否已經驗證\n      if (user.isEmailVerified) {\n        throw new ValidationError('郵箱已經驗證過了');\n      }\n\n      // 更新驗證狀態\n      await this.userRepository.updateWithValidation(userId, {\n        isEmailVerified: true,\n        emailVerificationToken: undefined,\n        emailVerificationExpires: undefined,\n      });\n\n      logger.info('郵箱驗證成功', { userId });\n\n      // 發送歡迎郵件\n      try {\n        await this.emailService.sendWelcomeEmail(user.email, user.name);\n      } catch (emailError) {\n        logger.warn('歡迎郵件發送失敗', { error: emailError, userId });\n      }\n    } catch (error) {\n      logger.error('郵箱驗證失敗', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 驗證郵箱（通過令牌）\n   */\n  async verifyEmailByToken(token: string): Promise<void> {\n    try {\n      // 查找有效的驗證令牌\n      const user = await this.userRepository.findByVerificationToken(token);\n      if (!user) {\n        throw new ValidationError('無效或已過期的驗證令牌');\n      }\n\n      // 檢查令牌是否過期\n      if (!user.emailVerificationExpires || user.emailVerificationExpires < new Date()) {\n        throw new ValidationError('驗證令牌已過期');\n      }\n\n      // 檢查是否已經驗證\n      if (user.isEmailVerified) {\n        throw new ValidationError('郵箱已經驗證過了');\n      }\n\n      // 更新驗證狀態\n      await this.userRepository.updateWithValidation(user._id.toString(), {\n        isEmailVerified: true,\n        emailVerificationToken: undefined,\n        emailVerificationExpires: undefined,\n      });\n\n      logger.info('郵箱驗證成功', { userId: user._id, email: user.email });\n\n      // 發送歡迎郵件\n      try {\n        await this.emailService.sendWelcomeEmail(user.email, user.name);\n      } catch (emailError) {\n        logger.warn('歡迎郵件發送失敗', { error: emailError, userId: user._id });\n      }\n    } catch (error) {\n      logger.error('通過令牌驗證郵箱失敗', { error, token });\n      throw error;\n    }\n  }\n\n  /**\n   * 重新發送驗證郵件\n   */\n  async resendEmailVerification(email: string): Promise<void> {\n    try {\n      const user = await this.userRepository.findByEmail(email);\n      if (!user) {\n        // 為了安全考慮，即使用戶不存在也返回成功\n        logger.info('重新發送驗證郵件 - 用戶不存在', { email });\n        return;\n      }\n\n      // 檢查是否已經驗證\n      if (user.isEmailVerified) {\n        throw new ValidationError('郵箱已經驗證過了');\n      }\n\n      // 檢查帳號狀態\n      if (!user.isActive) {\n        throw new ValidationError('帳號已被停用');\n      }\n\n      // 檢查是否在冷卻期內（防止濫用）\n      const lastSent = user.emailVerificationExpires;\n      if (lastSent && lastSent > new Date(Date.now() - 5 * 60 * 1000)) {\n        throw new ValidationError('請等待5分鐘後再重新發送驗證郵件');\n      }\n\n      // 生成新的驗證令牌\n      const verificationToken = crypto.randomBytes(32).toString('hex');\n      const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24小時後過期\n\n      // 更新驗證令牌\n      await this.userRepository.updateWithValidation(user._id.toString(), {\n        emailVerificationToken: verificationToken,\n        emailVerificationExpires: verificationExpires,\n      });\n\n      // 發送驗證郵件\n      await this.emailService.sendEmailVerification(email, user.name, verificationToken);\n\n      logger.info('重新發送驗證郵件成功', { userId: user._id, email });\n    } catch (error) {\n      logger.error('重新發送驗證郵件失敗', { error, email });\n      throw error;\n    }\n  }\n\n  /**\n   * 驗證郵件驗證令牌\n   */\n  async validateVerificationToken(token: string): Promise<boolean> {\n    try {\n      const user = await this.userRepository.findByVerificationToken(token);\n      \n      if (!user || !user.emailVerificationExpires || user.emailVerificationExpires < new Date()) {\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      logger.error('驗證郵件驗證令牌失敗', { error, token });\n      return false;\n    }\n  }\n\n  /**\n   * 清理過期的郵件驗證令牌\n   */\n  async cleanupExpiredVerificationTokens(): Promise<{ deletedCount: number }> {\n    try {\n      const result = await this.userRepository.cleanupExpiredEmailVerificationTokens();\n      \n      logger.info('清理過期郵件驗證令牌成功', { deletedCount: result.deletedCount });\n      return result;\n    } catch (error) {\n      logger.error('清理過期郵件驗證令牌失敗', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取用戶驗證狀態\n   */\n  async getVerificationStatus(userId: string): Promise<{\n    isEmailVerified: boolean;\n    hasVerificationToken: boolean;\n    tokenExpires?: Date;\n  }> {\n    try {\n      if (!mongoose.Types.ObjectId.isValid(userId)) {\n        throw new ValidationError('無效的用戶 ID');\n      }\n\n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new NotFoundError('用戶不存在');\n      }\n\n      return {\n        isEmailVerified: user.isEmailVerified,\n        hasVerificationToken: !!user.emailVerificationToken,\n        tokenExpires: user.emailVerificationExpires,\n      };\n    } catch (error) {\n      logger.error('獲取驗證狀態失敗', { error, userId });\n      throw error;\n    }\n  }\n}"],"version":3}