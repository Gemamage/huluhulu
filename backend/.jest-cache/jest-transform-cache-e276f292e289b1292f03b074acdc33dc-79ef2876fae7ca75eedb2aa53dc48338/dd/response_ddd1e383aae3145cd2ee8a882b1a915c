9810b48c214769c5d29b448a82782066
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.responseMiddleware = exports.ResponseUtil = void 0;
const errors_1 = require("./errors");
/**
 * 響應工具類
 */
class ResponseUtil {
    /**
     * 發送成功響應
     */
    static success(res, data, message, statusCode = 200, meta) {
        const response = {
            success: true,
            timestamp: new Date().toISOString(),
        };
        if (message) {
            response.message = message;
        }
        if (data !== undefined) {
            response.data = data;
        }
        if (meta) {
            response.meta = meta;
        }
        res.status(statusCode).json(response);
    }
    /**
     * 發送創建成功響應
     */
    static created(res, data, message = "創建成功") {
        ResponseUtil.success(res, data, message, 201);
    }
    /**
     * 發送更新成功響應
     */
    static updated(res, data, message = "更新成功") {
        ResponseUtil.success(res, data, message, 200);
    }
    /**
     * 發送刪除成功響應
     */
    static deleted(res, message = "刪除成功") {
        ResponseUtil.success(res, undefined, message, 200);
    }
    /**
     * 發送分頁響應
     */
    static paginated(res, data, pagination, message) {
        const totalPages = Math.ceil(pagination.total / pagination.limit);
        const meta = {
            page: pagination.page,
            limit: pagination.limit,
            total: pagination.total,
            totalPages,
            hasNext: pagination.page < totalPages,
            hasPrev: pagination.page > 1,
        };
        ResponseUtil.success(res, data, message, 200, meta);
    }
    /**
     * 發送錯誤響應
     */
    static error(res, error, path, method) {
        const response = {
            success: false,
            error: {
                message: error.message,
                code: error.errorCode,
                statusCode: error.statusCode,
                timestamp: error.timestamp,
            },
        };
        if (error.details && error.details.length > 0) {
            response.error.details = error.details;
        }
        if (path) {
            response.error.path = path;
        }
        if (method) {
            response.error.method = method;
        }
        res.status(error.statusCode).json(response);
    }
    /**
     * 發送驗證錯誤響應
     */
    static validationError(res, errors, message = "輸入資料驗證失敗") {
        const appError = new errors_1.AppError(message, 400, errors_1.ErrorCode.VALIDATION_ERROR, errors);
        ResponseUtil.error(res, appError);
    }
    /**
     * 發送未授權響應
     */
    static unauthorized(res, message = "認證失敗") {
        const appError = new errors_1.AppError(message, 401, errors_1.ErrorCode.AUTHENTICATION_FAILED);
        ResponseUtil.error(res, appError);
    }
    /**
     * 發送禁止訪問響應
     */
    static forbidden(res, message = "權限不足") {
        const appError = new errors_1.AppError(message, 403, errors_1.ErrorCode.INSUFFICIENT_PERMISSIONS);
        ResponseUtil.error(res, appError);
    }
    /**
     * 發送未找到響應
     */
    static notFound(res, resource = "資源", identifier) {
        const message = identifier
            ? `${resource} (${identifier}) 未找到`
            : `${resource} 未找到`;
        const appError = new errors_1.AppError(message, 404, errors_1.ErrorCode.RESOURCE_NOT_FOUND, [
            { resource, identifier },
        ]);
        ResponseUtil.error(res, appError);
    }
    /**
     * 發送衝突響應
     */
    static conflict(res, resource, field, value) {
        const message = `${resource} 的 ${field} 已存在`;
        const appError = new errors_1.AppError(message, 409, errors_1.ErrorCode.RESOURCE_CONFLICT, [
            { resource, field, value, constraint: "unique" },
        ]);
        ResponseUtil.error(res, appError);
    }
    /**
     * 發送速率限制響應
     */
    static rateLimited(res, message = "請求過於頻繁，請稍後再試") {
        const appError = new errors_1.AppError(message, 429, errors_1.ErrorCode.RATE_LIMIT_EXCEEDED);
        ResponseUtil.error(res, appError);
    }
    /**
     * 發送內部伺服器錯誤響應
     */
    static internalError(res, message = "內部伺服器錯誤") {
        const appError = new errors_1.AppError(message, 500, errors_1.ErrorCode.INTERNAL_SERVER_ERROR, undefined, false);
        ResponseUtil.error(res, appError);
    }
}
exports.ResponseUtil = ResponseUtil;
/**
 * 響應中間件 - 為 Response 對象添加便捷方法
 */
const responseMiddleware = (req, res, next) => {
    // 添加便捷方法到 Response 對象
    res.success = function (data, message, statusCode, meta) {
        return ResponseUtil.success(this, data, message, statusCode, meta);
    };
    res.created = function (data, message) {
        return ResponseUtil.created(this, data, message);
    };
    res.updated = function (data, message) {
        return ResponseUtil.updated(this, data, message);
    };
    res.deleted = function (message) {
        return ResponseUtil.deleted(this, message);
    };
    res.paginated = function (data, pagination, message) {
        return ResponseUtil.paginated(this, data, pagination, message);
    };
    res.validationError = function (errors, message) {
        return ResponseUtil.validationError(this, errors, message);
    };
    res.unauthorized = function (message) {
        return ResponseUtil.unauthorized(this, message);
    };
    res.forbidden = function (message) {
        return ResponseUtil.forbidden(this, message);
    };
    res.notFound = function (resource, identifier) {
        return ResponseUtil.notFound(this, resource, identifier);
    };
    res.conflict = function (resource, field, value) {
        return ResponseUtil.conflict(this, resource, field, value);
    };
    res.rateLimited = function (message) {
        return ResponseUtil.rateLimited(this, message);
    };
    res.internalError = function (message) {
        return ResponseUtil.internalError(this, message);
    };
    next();
};
exports.responseMiddleware = responseMiddleware;
exports.default = ResponseUtil;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,