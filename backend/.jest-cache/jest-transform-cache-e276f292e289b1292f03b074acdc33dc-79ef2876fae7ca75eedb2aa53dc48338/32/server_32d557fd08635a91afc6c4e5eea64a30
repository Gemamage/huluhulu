288d006f6e8df47010905034f87f393e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.io = exports.httpServer = exports.app = void 0;
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const helmet_1 = __importDefault(require("helmet"));
const compression_1 = __importDefault(require("compression"));
const morgan_1 = __importDefault(require("morgan"));
const express_rate_limit_1 = __importDefault(require("express-rate-limit"));
const express_session_1 = __importDefault(require("express-session"));
const connect_mongo_1 = __importDefault(require("connect-mongo"));
const passport_1 = __importDefault(require("passport"));
const http_1 = require("http");
const environment_1 = require("./config/environment");
const database_dev_1 = require("./config/database-dev");
const logger_1 = require("./utils/logger");
const error_handler_1 = require("./middleware/error-handler");
const not_found_1 = require("./middleware/not-found");
const swagger_1 = require("./config/swagger");
// 服務導入
const socketService_1 = require("./services/socketService");
const notificationService_1 = require("./services/notificationService");
const smartNotificationService_1 = require("./services/smartNotificationService");
const elasticsearchService_1 = require("./services/elasticsearchService");
const petSearchService_1 = require("./services/petSearchService");
const mockElasticsearchService_1 = require("./services/mockElasticsearchService");
// Passport 配置
require("./config/passport");
// 路由導入
const auth_1 = require("./routes/auth");
const users_1 = require("./routes/users");
const pets_1 = require("./routes/pets");
const search_1 = require("./routes/search");
const upload_1 = __importDefault(require("./routes/upload"));
const oauth_1 = require("./routes/oauth");
const privacy_1 = require("./routes/privacy");
const admin_1 = require("./routes/admin");
const ai_1 = require("./routes/ai");
const notifications_1 = __importDefault(require("./routes/notifications"));
const smartNotifications_1 = require("./routes/smartNotifications");
const advancedSearch_1 = __importDefault(require("./routes/advancedSearch"));
// 建立 Express 應用程式和 HTTP 伺服器
const app = (0, express_1.default)();
exports.app = app;
const httpServer = (0, http_1.createServer)(app);
exports.httpServer = httpServer;
// 初始化 Socket 服務
const io = socketService_1.SocketService.initialize(httpServer);
exports.io = io;
// 安全性中介軟體
app.use((0, helmet_1.default)({
    crossOriginEmbedderPolicy: false,
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'"],
            scriptSrc: [
                "'self'",
                "*.dify.dev",
                "*.dify.ai",
                "*.udify.app",
                "udify.app",
                "https://www.gstatic.com",
            ],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: [
                "'self'",
                "*.dify.dev",
                "*.dify.ai",
                "*.udify.app",
                "udify.app",
            ],
            frameSrc: [
                "'self'",
                "*.dify.dev",
                "*.dify.ai",
                "*.udify.app",
                "udify.app",
            ],
        },
    },
}));
// CORS 設定
app.use((0, cors_1.default)({
    origin: environment_1.config.cors.allowedOrigins,
    credentials: true,
    methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
}));
// 壓縮回應
app.use((0, compression_1.default)());
// 請求日誌
if (environment_1.config.env !== "test") {
    app.use((0, morgan_1.default)("combined", {
        stream: {
            write: (message) => logger_1.logger.info(message.trim()),
        },
    }));
}
// 速率限制
const limiter = (0, express_rate_limit_1.default)({
    windowMs: 15 * 60 * 1000, // 15 分鐘
    max: environment_1.config.env === "production" ? 100 : 1000, // 限制請求次數
    message: {
        error: "請求過於頻繁，請稍後再試",
        retryAfter: "15 分鐘",
    },
    standardHeaders: true,
    legacyHeaders: false,
});
app.use("/api", limiter);
// 解析請求體
app.use(express_1.default.json({ limit: "10mb" }));
app.use(express_1.default.urlencoded({ extended: true, limit: "10mb" }));
// Session 配置
const sessionConfig = {
    secret: environment_1.config.session.secret,
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: environment_1.config.env === "production", // HTTPS only in production
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000, // 24 小時
    },
};
// 在開發模式下使用內存存儲，避免 MongoDB 依賴
if (environment_1.config.env !== "development") {
    sessionConfig.store = connect_mongo_1.default.create({
        mongoUrl: environment_1.config.database.uri,
        touchAfter: 24 * 3600, // 24 小時內只更新一次
    });
}
app.use((0, express_session_1.default)(sessionConfig));
// Passport 中介軟體
app.use(passport_1.default.initialize());
app.use(passport_1.default.session());
// API 文件
if (environment_1.config.env !== "production") {
    (0, swagger_1.swaggerSetup)(app);
}
// 根路徑歡迎頁面
app.get("/", (_req, res) => {
    res.status(200).json({
        message: "歡迎使用呼嚕寵物協尋網站 API",
        version: process.env.npm_package_version || "1.0.0",
        environment: environment_1.config.env,
        timestamp: new Date().toISOString(),
        endpoints: {
            health: "/health",
            apiDocs: environment_1.config.env !== "production" ? "/api-docs" : null,
            api: "/api",
        },
        description: "這是一個專為寵物協尋設計的後端 API 服務",
    });
});
// 健康檢查端點
app.get("/health", (_req, res) => {
    res.status(200).json({
        status: "OK",
        timestamp: new Date().toISOString(),
        environment: environment_1.config.env,
        version: process.env.npm_package_version || "1.0.0",
    });
});
// API 路由
app.use("/api/auth", auth_1.authRoutes);
app.use("/api/oauth", oauth_1.oauthRoutes);
app.use("/api/users", users_1.userRoutes);
app.use("/api/pets", pets_1.petRoutes);
app.use("/api/search", search_1.searchRoutes);
app.use("/api/advanced-search", advancedSearch_1.default);
app.use("/api/upload", upload_1.default);
app.use("/api/privacy", privacy_1.privacyRoutes);
app.use("/api/admin", admin_1.adminRoutes);
app.use("/api/ai", ai_1.aiRoutes);
app.use("/api/notifications", notifications_1.default);
app.use("/api/smart-notifications", smartNotifications_1.smartNotificationRoutes);
// 404 處理
app.use(not_found_1.notFoundHandler);
// 錯誤處理
app.use(error_handler_1.errorHandler);
// 啟動伺服器
const startServer = async () => {
    try {
        // 連接資料庫
        await (0, database_dev_1.connectDatabase)();
        logger_1.logger.info("資料庫連接成功");
        // 初始化搜尋服務
        const useElasticsearch = process.env.ELASTICSEARCH_URL && process.env.NODE_ENV !== "development";
        if (useElasticsearch) {
            try {
                const elasticsearchConnected = await elasticsearchService_1.elasticsearchService.connect();
                if (elasticsearchConnected) {
                    logger_1.logger.info("Elasticsearch 服務已啟動");
                    // 初始化搜尋索引
                    await petSearchService_1.petSearchService.initializePetIndex();
                    await petSearchService_1.petSearchService.initializeSearchAnalyticsIndex();
                    logger_1.logger.info("搜尋索引初始化完成");
                }
                else {
                    logger_1.logger.warn("Elasticsearch 連接失敗，切換到模擬服務");
                    await mockElasticsearchService_1.mockElasticsearchService.initializeIndex();
                    logger_1.logger.info("模擬搜尋服務初始化完成");
                }
            }
            catch (error) {
                logger_1.logger.error("Elasticsearch 初始化失敗，切換到模擬服務:", error);
                await mockElasticsearchService_1.mockElasticsearchService.initializeIndex();
                logger_1.logger.info("模擬搜尋服務初始化完成");
            }
        }
        else {
            await mockElasticsearchService_1.mockElasticsearchService.initializeIndex();
            logger_1.logger.info("開發模式：使用模擬搜尋服務");
        }
        // 啟動伺服器
        const server = httpServer.listen(environment_1.config.port, () => {
            logger_1.logger.info(`伺服器運行在 http://localhost:${environment_1.config.port}`);
            logger_1.logger.info(`環境: ${environment_1.config.env}`);
            logger_1.logger.info("Socket.IO 服務已啟動");
            if (environment_1.config.env !== "production") {
                logger_1.logger.info(`API 文件: http://localhost:${environment_1.config.port}/api-docs`);
            }
        });
        // 啟動通知服務的定期任務
        notificationService_1.NotificationService.startScheduledTasks();
        logger_1.logger.info("通知服務定期任務已啟動");
        // 初始化智能通知服務
        await smartNotificationService_1.SmartNotificationService.initialize();
        logger_1.logger.info("智能通知服務已初始化");
        // 優雅關閉
        const gracefulShutdown = async (signal) => {
            logger_1.logger.info(`收到 ${signal} 信號，開始優雅關閉...`);
            try {
                // 停止通知服務定期任務
                notificationService_1.NotificationService.stopScheduledTasks();
                // 停止智能通知服務
                await smartNotificationService_1.SmartNotificationService.stop();
                logger_1.logger.info("智能通知服務已停止");
                // 關閉搜尋服務連接
                if (process.env.ELASTICSEARCH_URL &&
                    process.env.NODE_ENV !== "development") {
                    await elasticsearchService_1.elasticsearchService.close();
                    logger_1.logger.info("Elasticsearch 連接已關閉");
                }
                else {
                    logger_1.logger.info("模擬搜尋服務已清理");
                }
            }
            catch (error) {
                logger_1.logger.error("停止服務時發生錯誤:", error);
            }
            // 關閉 Socket.IO 連接
            io.close(() => {
                logger_1.logger.info("Socket.IO 伺服器已關閉");
            });
            server.close(() => {
                logger_1.logger.info("HTTP 伺服器已關閉");
                process.exit(0);
            });
            // 強制關閉
            setTimeout(() => {
                logger_1.logger.error("強制關閉伺服器");
                process.exit(1);
            }, 10000);
        };
        process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
        process.on("SIGINT", () => gracefulShutdown("SIGINT"));
    }
    catch (error) {
        logger_1.logger.error("伺服器啟動失敗:", error);
        process.exit(1);
    }
};
// 處理未捕獲的異常
process.on("uncaughtException", (error) => {
    logger_1.logger.error("未捕獲的異常:", error);
    process.exit(1);
});
process.on("unhandledRejection", (reason, promise) => {
    logger_1.logger.error("未處理的 Promise 拒絕:", { reason, promise });
    process.exit(1);
});
// 啟動應用程式
if (require.main === module) {
    startServer();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,