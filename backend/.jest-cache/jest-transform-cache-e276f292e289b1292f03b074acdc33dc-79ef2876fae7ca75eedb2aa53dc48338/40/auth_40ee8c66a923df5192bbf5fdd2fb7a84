eb15e132ed2252f1646357649c0e0e2a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRoutes = void 0;
const express_1 = require("express");
const express_validator_1 = require("express-validator");
const logger_1 = require("../utils/logger");
const errors_1 = require("../utils/errors");
const userService_1 = require("../services/userService");
const emailService_1 = require("../services/emailService");
const verificationService_1 = require("../services/verificationService");
const auth_1 = require("../middleware/auth");
const rbac_1 = require("../middleware/rbac");
const router = (0, express_1.Router)();
exports.authRoutes = router;
const userService = new userService_1.UserService();
// 用戶註冊
router.post('/register', [
    (0, express_validator_1.body)('email').isEmail().normalizeEmail(),
    (0, express_validator_1.body)('password').isLength({ min: 6 }),
    (0, express_validator_1.body)('name').trim().isLength({ min: 1 }),
    (0, express_validator_1.body)('phone').optional().isMobilePhone('zh-TW'),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: '輸入資料驗證失敗',
                errors: errors.array(),
            });
            return;
        }
        const { email, password, name, phone } = req.body;
        const userData = { email, password, name, phone };
        // 註冊用戶（UserService 內部會檢查電子郵件是否已存在）
        const result = await userService.registerUser(userData);
        logger_1.logger.info('用戶註冊成功', { email, name, userId: result.user._id });
        res.status(201).json({
            success: true,
            message: '註冊成功，請檢查您的電子郵件以驗證帳號',
            data: {
                user: {
                    id: result.user._id,
                    email: result.user.email,
                    name: result.user.name,
                    isEmailVerified: result.user.isEmailVerified,
                },
            },
        });
    }
    catch (error) {
        logger_1.logger.error('用戶註冊失敗', { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: '註冊失敗，請稍後再試',
        });
    }
});
// 用戶登入
router.post('/login', [
    (0, express_validator_1.body)('email').isEmail().normalizeEmail(),
    (0, express_validator_1.body)('password').notEmpty(),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: '輸入資料驗證失敗',
                errors: errors.array(),
            });
            return;
        }
        const { email, password } = req.body;
        const loginData = { email, password };
        // 用戶登入
        const { user, token } = await userService.loginUser(loginData);
        logger_1.logger.info('用戶登入成功', { email, userId: user._id });
        res.json({
            success: true,
            message: '登入成功',
            data: {
                user: {
                    id: user._id,
                    email: user.email,
                    name: user.name,
                    phone: user.phone,
                    avatar: user.avatar,
                    role: user.role,
                    isEmailVerified: user.isEmailVerified,
                    lastLoginAt: user.lastLoginAt,
                },
                token,
            },
        });
    }
    catch (error) {
        logger_1.logger.error('用戶登入失敗', { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: '登入失敗，請稍後再試',
        });
    }
});
// 用戶登出
router.post('/logout', auth_1.authenticate, async (req, res) => {
    try {
        const userId = req.user?._id?.toString();
        // TODO: 實作令牌黑名單機制（可選）
        // 目前採用客戶端刪除令牌的方式
        logger_1.logger.info('用戶登出成功', { userId });
        res.json({
            success: true,
            message: '登出成功',
        });
    }
    catch (error) {
        logger_1.logger.error('用戶登出失敗', { error });
        res.status(500).json({
            success: false,
            message: '登出失敗，請稍後再試',
        });
    }
});
// 刷新令牌
router.post('/refresh', auth_1.authenticate, async (req, res) => {
    try {
        const userId = req.user?._id?.toString();
        if (!userId) {
            res.status(401).json({
                success: false,
                message: '無效的令牌',
            });
            return;
        }
        // 獲取用戶資料
        const user = await userService.getUserById(userId);
        if (!user) {
            res.status(404).json({
                success: false,
                message: '用戶不存在',
            });
            return;
        }
        // 生成新令牌
        const newToken = user.generateAuthToken();
        logger_1.logger.info('令牌刷新成功', { userId });
        res.json({
            success: true,
            message: '令牌刷新成功',
            data: {
                token: newToken,
                user: {
                    id: user._id,
                    email: user.email,
                    name: user.name,
                    phone: user.phone,
                    avatar: user.avatar,
                    role: user.role,
                    isEmailVerified: user.isEmailVerified,
                },
            },
        });
    }
    catch (error) {
        logger_1.logger.error('令牌刷新失敗', { error });
        res.status(500).json({
            success: false,
            message: '令牌刷新失敗，請稍後再試',
        });
    }
});
// 忘記密碼
router.post('/forgot-password', [
    (0, express_validator_1.body)('email').isEmail().normalizeEmail(),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: '輸入資料驗證失敗',
                errors: errors.array(),
            });
            return;
        }
        const { email } = req.body;
        // 查找用戶
        const user = await userService.getUserByEmail(email);
        if (!user) {
            // 為了安全考量，即使用戶不存在也返回成功訊息
            res.json({
                success: true,
                message: '如果該電子郵件地址存在於我們的系統中，您將收到密碼重設郵件',
            });
            return;
        }
        // 生成密碼重設令牌
        const resetToken = user.generatePasswordResetToken();
        await user.save();
        // 發送密碼重設郵件
        await emailService_1.EmailService.sendPasswordResetEmail(user.email, resetToken, user.name);
        logger_1.logger.info('密碼重設郵件已發送', { email, userId: user._id });
        res.json({
            success: true,
            message: '密碼重設郵件已發送，請檢查您的電子郵件',
        });
    }
    catch (error) {
        logger_1.logger.error('忘記密碼處理失敗', { error });
        res.status(500).json({
            success: false,
            message: '處理失敗，請稍後再試',
        });
    }
});
// 重設密碼
router.post('/reset-password', [
    (0, express_validator_1.body)('token').notEmpty().withMessage('請提供重設令牌'),
    (0, express_validator_1.body)('newPassword').isLength({ min: 6 }).withMessage('密碼長度至少6個字符'),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: '輸入資料驗證失敗',
                errors: errors.array(),
            });
            return;
        }
        const { token, newPassword } = req.body;
        // 重設密碼
        await userService.resetPassword(token, newPassword);
        logger_1.logger.info('密碼重設成功');
        res.json({
            success: true,
            message: '密碼重設成功，請使用新密碼登入',
        });
    }
    catch (error) {
        logger_1.logger.error('密碼重設失敗', { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: '密碼重設失敗，請稍後再試',
        });
    }
});
// 獲取當前用戶資訊
router.get('/me', auth_1.authenticate, async (req, res) => {
    try {
        const userId = req.user?._id.toString();
        if (!userId) {
            res.status(401).json({
                success: false,
                message: '未授權的請求',
            });
            return;
        }
        // 獲取用戶資訊
        const user = await userService.getUserById(userId);
        if (!user) {
            res.status(404).json({
                success: false,
                message: '用戶不存在',
            });
            return;
        }
        logger_1.logger.info('獲取用戶資訊成功', { userId });
        res.json({
            success: true,
            data: {
                user: {
                    id: user._id,
                    email: user.email,
                    name: user.name,
                    phone: user.phone,
                    avatar: user.avatar,
                    role: user.role,
                    isEmailVerified: user.isEmailVerified,
                    createdAt: user.createdAt,
                    updatedAt: user.updatedAt,
                    lastLoginAt: user.lastLoginAt,
                },
            },
        });
    }
    catch (error) {
        logger_1.logger.error('獲取用戶資訊失敗', { error });
        res.status(500).json({
            success: false,
            message: '獲取用戶資訊失敗，請稍後再試',
        });
    }
});
// 電子郵件驗證
router.get('/verify-email/:token', async (req, res) => {
    try {
        const { token } = req.params;
        if (!token) {
            res.status(400).json({
                success: false,
                message: '請提供驗證令牌',
            });
            return;
        }
        // 使用新的驗證服務
        const result = await verificationService_1.VerificationService.verifyEmailToken(token);
        if (result.success) {
            logger_1.logger.info('電子郵件驗證成功', { token });
            res.json({
                success: true,
                message: result.message,
                data: result.user ? {
                    user: {
                        id: result.user._id,
                        email: result.user.email,
                        name: result.user.name,
                        isEmailVerified: result.user.isEmailVerified,
                    },
                } : undefined,
            });
        }
        else {
            res.status(400).json({
                success: false,
                message: result.message,
            });
        }
    }
    catch (error) {
        logger_1.logger.error('電子郵件驗證失敗', { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: '電子郵件驗證失敗，請稍後再試',
        });
    }
});
// 重新發送驗證郵件（需要登入）
router.post('/resend-verification', auth_1.authenticate, rbac_1.requireActiveAccount, async (req, res) => {
    try {
        const user = req.user;
        // 使用新的驗證服務
        const result = await verificationService_1.VerificationService.resendVerificationEmail(user.email);
        if (result.success) {
            logger_1.logger.info('重新發送驗證郵件成功', { userId: user._id, email: user.email });
            res.json({
                success: true,
                message: result.message,
            });
        }
        else {
            res.status(400).json({
                success: false,
                message: result.message,
                cooldownRemaining: result.cooldownRemaining,
            });
        }
    }
    catch (error) {
        logger_1.logger.error('重新發送驗證郵件失敗', { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: '發送失敗，請稍後再試',
        });
    }
});
// 重新發送驗證郵件（無需登入）
router.post('/resend-verification-email', [
    (0, express_validator_1.body)('email').isEmail().normalizeEmail(),
], async (req, res) => {
    try {
        const errors = (0, express_validator_1.validationResult)(req);
        if (!errors.isEmpty()) {
            res.status(400).json({
                success: false,
                message: '輸入資料驗證失敗',
                errors: errors.array(),
            });
            return;
        }
        const { email } = req.body;
        // 使用新的驗證服務
        const result = await verificationService_1.VerificationService.resendVerificationEmail(email);
        if (result.success) {
            logger_1.logger.info('重新發送驗證郵件成功', { email });
            res.json({
                success: true,
                message: result.message,
            });
        }
        else {
            res.status(400).json({
                success: false,
                message: result.message,
                cooldownRemaining: result.cooldownRemaining,
            });
        }
    }
    catch (error) {
        logger_1.logger.error('重新發送驗證郵件失敗', { error });
        if (error instanceof errors_1.AppError) {
            res.status(error.statusCode).json({
                success: false,
                message: error.message,
            });
            return;
        }
        res.status(500).json({
            success: false,
            message: '發送失敗，請稍後再試',
        });
    }
});
// 檢查驗證狀態
router.get('/verification-status', auth_1.authenticate, rbac_1.requireActiveAccount, async (req, res) => {
    try {
        const user = req.user;
        const status = await verificationService_1.VerificationService.checkVerificationStatus(user);
        res.json({
            success: true,
            data: {
                needsVerification: status.needsVerification,
                hasValidToken: status.hasValidToken,
                tokenExpiry: status.tokenExpiry,
                isEmailVerified: user.isEmailVerified,
            },
        });
    }
    catch (error) {
        logger_1.logger.error('檢查驗證狀態失敗', { error });
        res.status(500).json({
            success: false,
            message: '檢查狀態失敗，請稍後再試',
        });
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,