{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\query.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\users\\query.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { IUser } from \"../../models/User\";\nimport { UserRepository } from \"../../repositories/UserRepository\";\nimport { ValidationError } from \"../../utils/errors\";\nimport { logger } from \"../../utils/logger\";\n\n// 介面定義\nexport interface UserQueryOptions {\n  page?: number;\n  limit?: number;\n  search?: string;\n  role?: \"user\" | \"admin\";\n  isActive?: boolean;\n  isEmailVerified?: boolean;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n}\n\nexport interface UserListResult {\n  users: IUser[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\n/**\n * 用戶查詢服務 - 處理用戶查詢、分頁和統計功能\n */\nexport class UserQueryService {\n  private userRepository: UserRepository;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n  }\n\n  /**\n   * 獲取用戶列表（帶篩選和分頁）\n   */\n  async getUserList(options: UserQueryOptions = {}): Promise<UserListResult> {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        search,\n        role,\n        isActive,\n        isEmailVerified,\n        sortBy = \"createdAt\",\n        sortOrder = \"desc\",\n      } = options;\n\n      // 驗證分頁參數\n      if (page < 1 || limit < 1 || limit > 100) {\n        throw new ValidationError(\"無效的分頁參數\");\n      }\n\n      // 構建查詢條件\n      const query: any = {};\n\n      if (search) {\n        query.$or = [\n          { name: { $regex: search, $options: \"i\" } },\n          { email: { $regex: search, $options: \"i\" } },\n        ];\n      }\n\n      if (isActive !== undefined) {\n        query.isActive = isActive;\n      }\n\n      if (isEmailVerified !== undefined) {\n        query.isEmailVerified = isEmailVerified;\n      }\n\n      if (role) {\n        query.role = role;\n      }\n\n      // 執行查詢\n      const { users, total } = await this.userRepository.findWithPagination(\n        query,\n        {\n          page,\n          limit,\n          sortBy,\n          sortOrder,\n        },\n      );\n\n      const totalPages = Math.ceil(total / limit);\n\n      return {\n        users,\n        total,\n        page,\n        limit,\n        totalPages,\n      };\n    } catch (error) {\n      logger.error(\"獲取用戶列表失敗\", { error, options });\n      throw error;\n    }\n  }\n\n  /**\n   * 搜索用戶\n   */\n  async searchUsers(\n    searchTerm: string,\n    options: {\n      limit?: number;\n      includeInactive?: boolean;\n      role?: \"user\" | \"admin\";\n    } = {},\n  ): Promise<IUser[]> {\n    try {\n      const { limit = 10, includeInactive = false, role } = options;\n\n      if (!searchTerm || searchTerm.trim().length < 2) {\n        throw new ValidationError(\"搜索關鍵字至少需要2個字符\");\n      }\n\n      const filter: any = {\n        $or: [\n          { name: { $regex: searchTerm.trim(), $options: \"i\" } },\n          { email: { $regex: searchTerm.trim(), $options: \"i\" } },\n        ],\n      };\n\n      if (!includeInactive) {\n        filter.isActive = true;\n      }\n\n      if (role) {\n        filter.role = role;\n      }\n\n      const selectFields =\n        \"-password -passwordResetToken -passwordResetExpires -emailVerificationToken -emailVerificationExpires\";\n\n      const users = await this.userRepository.findWithSelect(\n        filter,\n        selectFields,\n        {\n          limit,\n          sort: { name: 1 },\n        },\n      );\n\n      return users;\n    } catch (error) {\n      logger.error(\"搜索用戶失敗\", { error, searchTerm, options });\n      throw error;\n    }\n  }\n\n  /**\n   * 根據角色獲取用戶列表\n   */\n  async getUsersByRole(\n    role: \"user\" | \"admin\",\n    options: {\n      page?: number;\n      limit?: number;\n      isActive?: boolean;\n    } = {},\n  ): Promise<UserListResult> {\n    try {\n      const { page = 1, limit = 20, isActive = true } = options;\n\n      const filter: any = { role };\n      if (isActive !== undefined) {\n        filter.isActive = isActive;\n      }\n\n      const { users, total } = await this.userRepository.findWithPagination(\n        filter,\n        {\n          page,\n          limit,\n          sortBy: \"createdAt\",\n          sortOrder: \"desc\",\n        },\n      );\n\n      const totalPages = Math.ceil(total / limit);\n\n      return {\n        users,\n        total,\n        page,\n        limit,\n        totalPages,\n      };\n    } catch (error) {\n      logger.error(\"根據角色獲取用戶列表失敗\", { error, role, options });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取最近註冊的用戶\n   */\n  async getRecentUsers(limit: number = 10): Promise<IUser[]> {\n    try {\n      if (limit < 1 || limit > 50) {\n        throw new ValidationError(\"限制數量必須在1-50之間\");\n      }\n\n      const selectFields =\n        \"-password -passwordResetToken -passwordResetExpires -emailVerificationToken -emailVerificationExpires\";\n\n      const users = await this.userRepository.findWithSelect(\n        { isActive: true },\n        selectFields,\n        {\n          limit,\n          sort: { createdAt: -1 },\n        },\n      );\n\n      return users;\n    } catch (error) {\n      logger.error(\"獲取最近註冊用戶失敗\", { error, limit });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取活躍用戶列表\n   */\n  async getActiveUsers(\n    options: {\n      page?: number;\n      limit?: number;\n      sortBy?: \"lastLogin\" | \"createdAt\";\n    } = {},\n  ): Promise<UserListResult> {\n    try {\n      const { page = 1, limit = 20, sortBy = \"lastLogin\" } = options;\n\n      const filter = {\n        isActive: true,\n        isEmailVerified: true,\n      };\n\n      const { users, total } = await this.userRepository.findWithPagination(\n        filter,\n        {\n          page,\n          limit,\n          sortBy,\n          sortOrder: \"desc\",\n        },\n      );\n\n      const totalPages = Math.ceil(total / limit);\n\n      return {\n        users,\n        total,\n        page,\n        limit,\n        totalPages,\n      };\n    } catch (error) {\n      logger.error(\"獲取活躍用戶列表失敗\", { error, options });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取用戶統計信息\n   */\n  async getUserStatistics(): Promise<{\n    total: number;\n    active: number;\n    verified: number;\n    admins: number;\n    recent: number;\n    byRole: { [key: string]: number };\n    byStatus: {\n      active: number;\n      inactive: number;\n      verified: number;\n      unverified: number;\n    };\n  }> {\n    try {\n      const [basicStats, roleStats, statusStats] = await Promise.all([\n        this.userRepository.getStatistics(),\n        this.getUserRoleStatistics(),\n        this.getUserStatusStatistics(),\n      ]);\n\n      return {\n        ...basicStats,\n        byRole: roleStats,\n        byStatus: statusStats,\n      };\n    } catch (error) {\n      logger.error(\"獲取用戶統計信息失敗\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取用戶角色統計\n   */\n  private async getUserRoleStatistics(): Promise<{ [key: string]: number }> {\n    try {\n      const pipeline = [\n        {\n          $group: {\n            _id: \"$role\",\n            count: { $sum: 1 },\n          },\n        },\n      ];\n\n      const results = await this.userRepository.aggregate(pipeline);\n      const roleStats: { [key: string]: number } = {};\n\n      results.forEach((result: any) => {\n        roleStats[result._id] = result.count;\n      });\n\n      return roleStats;\n    } catch (error) {\n      logger.error(\"獲取用戶角色統計失敗\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 獲取用戶狀態統計\n   */\n  private async getUserStatusStatistics(): Promise<{\n    active: number;\n    inactive: number;\n    verified: number;\n    unverified: number;\n  }> {\n    try {\n      const [activeCount, verifiedCount, totalCount] = await Promise.all([\n        this.userRepository.countDocuments({ isActive: true }),\n        this.userRepository.countDocuments({ isEmailVerified: true }),\n        this.userRepository.countDocuments({}),\n      ]);\n\n      return {\n        active: activeCount,\n        inactive: totalCount - activeCount,\n        verified: verifiedCount,\n        unverified: totalCount - verifiedCount,\n      };\n    } catch (error) {\n      logger.error(\"獲取用戶狀態統計失敗\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 檢查用戶是否存在\n   */\n  async userExists(\n    identifier: string,\n    type: \"id\" | \"email\" = \"id\",\n  ): Promise<boolean> {\n    try {\n      let user: IUser | null = null;\n\n      if (type === \"id\") {\n        if (!mongoose.Types.ObjectId.isValid(identifier)) {\n          return false;\n        }\n        user = await this.userRepository.findById(identifier);\n      } else {\n        user = await this.userRepository.findByEmail(identifier);\n      }\n\n      return !!user;\n    } catch (error) {\n      logger.error(\"檢查用戶是否存在失敗\", { error, identifier, type });\n      return false;\n    }\n  }\n\n  /**\n   * 清理過期令牌\n   */\n  async cleanupExpiredTokens(): Promise<{ deletedCount: number }> {\n    try {\n      const result = await this.userRepository.cleanupExpiredTokens();\n\n      logger.info(\"清理過期驗證令牌成功\", {\n        deletedCount: result.deletedCount,\n      });\n      return result;\n    } catch (error) {\n      logger.error(\"清理過期驗證令牌失敗\", { error });\n      throw error;\n    }\n  }\n}\n"],"version":3}