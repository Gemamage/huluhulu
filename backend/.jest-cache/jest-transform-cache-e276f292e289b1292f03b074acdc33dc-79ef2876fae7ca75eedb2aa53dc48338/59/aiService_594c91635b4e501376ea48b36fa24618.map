{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\aiService.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\aiService.ts"],"sourcesContent":["import { ImageAnnotatorClient } from \"@google-cloud/vision\";\nimport sharp from \"sharp\";\nimport { config } from \"../config/environment\";\nimport { logger } from \"../utils/logger\";\nimport { AppError } from \"../utils/errors\";\nimport crypto from \"crypto\";\n\n// Google Vision AI 客戶端\nlet visionClient: ImageAnnotatorClient;\n\n// 初始化 Vision AI 客戶端\ntry {\n  visionClient = new ImageAnnotatorClient({\n    keyFilename: config.google?.visionKeyPath,\n    projectId: config.google?.projectId,\n  });\n} catch (error) {\n  logger.warn(\"Google Vision AI 初始化失敗，將使用備用方案\", { error });\n}\n\n// 寵物品種映射表\nconst PET_BREEDS = {\n  dogs: [\n    \"拉布拉多\",\n    \"黃金獵犬\",\n    \"德國牧羊犬\",\n    \"法國鬥牛犬\",\n    \"貴賓犬\",\n    \"柴犬\",\n    \"哈士奇\",\n    \"邊境牧羊犬\",\n    \"比格犬\",\n    \"吉娃娃\",\n    \"博美犬\",\n    \"約克夏\",\n    \"馬爾濟斯\",\n    \"雪納瑞\",\n    \"柯基犬\",\n  ],\n  cats: [\n    \"英國短毛貓\",\n    \"美國短毛貓\",\n    \"波斯貓\",\n    \"暹羅貓\",\n    \"緬因貓\",\n    \"布偶貓\",\n    \"俄羅斯藍貓\",\n    \"蘇格蘭摺耳貓\",\n    \"阿比西尼亞貓\",\n    \"孟加拉貓\",\n    \"挪威森林貓\",\n    \"土耳其安哥拉貓\",\n    \"埃及貓\",\n    \"曼島貓\",\n    \"混種貓\",\n  ],\n};\n\n// 圖像特徵向量介面\ninterface ImageFeatures {\n  colorHistogram: number[];\n  textureFeatures: number[];\n  shapeFeatures: number[];\n  dominantColors: string[];\n}\n\n// AI 分析結果介面\ninterface AIAnalysisResult {\n  petType: \"dog\" | \"cat\" | \"other\" | \"unknown\";\n  breed: string;\n  confidence: number;\n  features: ImageFeatures;\n  labels: string[];\n  safeSearch: {\n    adult: string;\n    violence: string;\n    racy: string;\n  };\n}\n\nexport class AIService {\n  /**\n   * 圖像壓縮和優化\n   */\n  static async optimizeImage(\n    imageBuffer: Buffer,\n    options: {\n      maxWidth?: number;\n      maxHeight?: number;\n      quality?: number;\n      format?: \"jpeg\" | \"png\" | \"webp\";\n    } = {},\n  ): Promise<{ buffer: Buffer; metadata: any }> {\n    try {\n      const {\n        maxWidth = 1200,\n        maxHeight = 1200,\n        quality = 85,\n        format = \"jpeg\",\n      } = options;\n\n      let pipeline = sharp(imageBuffer)\n        .resize(maxWidth, maxHeight, {\n          fit: \"inside\",\n          withoutEnlargement: true,\n        })\n        .rotate(); // 自動旋轉\n\n      // 根據格式設置輸出選項\n      switch (format) {\n        case \"jpeg\":\n          pipeline = pipeline.jpeg({ quality, progressive: true });\n          break;\n        case \"png\":\n          pipeline = pipeline.png({ compressionLevel: 8 });\n          break;\n        case \"webp\":\n          pipeline = pipeline.webp({ quality });\n          break;\n      }\n\n      const optimizedBuffer = await pipeline.toBuffer();\n      const metadata = await sharp(optimizedBuffer).metadata();\n\n      logger.info(\"圖像優化完成\", {\n        originalSize: imageBuffer.length,\n        optimizedSize: optimizedBuffer.length,\n        compressionRatio:\n          (\n            ((imageBuffer.length - optimizedBuffer.length) /\n              imageBuffer.length) *\n            100\n          ).toFixed(2) + \"%\",\n        format,\n        dimensions: `${metadata.width}x${metadata.height}`,\n      });\n\n      return {\n        buffer: optimizedBuffer,\n        metadata,\n      };\n    } catch (error) {\n      logger.error(\"圖像優化失敗\", { error });\n      throw new AppError(\"圖像處理失敗\", 500);\n    }\n  }\n\n  /**\n   * 圖像裁剪\n   */\n  static async cropImage(\n    imageBuffer: Buffer,\n    cropOptions: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    },\n  ): Promise<Buffer> {\n    try {\n      const { x, y, width, height } = cropOptions;\n\n      const croppedBuffer = await sharp(imageBuffer)\n        .extract({ left: x, top: y, width, height })\n        .toBuffer();\n\n      logger.info(\"圖像裁剪完成\", { cropOptions });\n      return croppedBuffer;\n    } catch (error) {\n      logger.error(\"圖像裁剪失敗\", { error });\n      throw new AppError(\"圖像裁剪失敗\", 500);\n    }\n  }\n\n  /**\n   * 提取圖像特徵向量（簡化版）\n   */\n  static async extractImageFeatures(\n    imageBuffer: Buffer,\n  ): Promise<ImageFeatures> {\n    try {\n      // 使用 Sharp 獲取基本圖像信息\n      const metadata = await sharp(imageBuffer).metadata();\n\n      // 生成簡化的特徵向量\n      const colorHistogram = this.generateSimpleColorHistogram(metadata);\n      const textureFeatures = this.generateSimpleTextureFeatures(metadata);\n      const shapeFeatures = this.generateSimpleShapeFeatures(metadata);\n      const dominantColors = this.generateSimpleDominantColors();\n\n      return {\n        colorHistogram,\n        textureFeatures,\n        shapeFeatures,\n        dominantColors,\n      };\n    } catch (error) {\n      logger.error(\"特徵提取失敗\", { error });\n      throw new AppError(\"圖像特徵提取失敗\", 500);\n    }\n  }\n\n  /**\n   * 計算圖像相似度\n   */\n  static calculateImageSimilarity(\n    features1: ImageFeatures,\n    features2: ImageFeatures,\n  ): number {\n    try {\n      // 計算顏色直方圖相似度\n      const colorSimilarity = AIService.calculateHistogramSimilarity(\n        features1.colorHistogram,\n        features2.colorHistogram,\n      );\n\n      // 計算紋理相似度\n      const textureSimilarity = AIService.calculateVectorSimilarity(\n        features1.textureFeatures,\n        features2.textureFeatures,\n      );\n\n      // 計算形狀相似度\n      const shapeSimilarity = AIService.calculateVectorSimilarity(\n        features1.shapeFeatures,\n        features2.shapeFeatures,\n      );\n\n      // 加權平均\n      const similarity =\n        colorSimilarity * 0.4 + textureSimilarity * 0.3 + shapeSimilarity * 0.3;\n\n      return Math.max(0, Math.min(1, similarity));\n    } catch (error) {\n      logger.error(\"相似度計算失敗\", { error });\n      return 0;\n    }\n  }\n\n  /**\n   * Google Vision AI 圖像分析\n   */\n  static async analyzeImageWithVision(\n    imageBuffer: Buffer,\n  ): Promise<AIAnalysisResult> {\n    try {\n      if (!visionClient) {\n        throw new AppError(\"Google Vision AI 未初始化\", 500);\n      }\n\n      const [result] = await visionClient.annotateImage({\n        image: { content: imageBuffer.toString(\"base64\") },\n        features: [\n          { type: \"LABEL_DETECTION\", maxResults: 10 },\n          { type: \"SAFE_SEARCH_DETECTION\" },\n          { type: \"IMAGE_PROPERTIES\" },\n        ],\n      });\n\n      const labels =\n        result.labelAnnotations?.map((label) => label.description || \"\") || [];\n      const safeSearch = result.safeSearchAnnotation || {};\n\n      // 分析寵物類型和品種\n      const petAnalysis = AIService.analyzePetFromLabels(labels);\n\n      // 提取圖像特徵\n      const features = await AIService.extractImageFeatures(imageBuffer);\n\n      return {\n        petType: petAnalysis.type,\n        breed: petAnalysis.breed,\n        confidence: petAnalysis.confidence,\n        features,\n        labels,\n        safeSearch: {\n          adult: String(safeSearch.adult || \"UNKNOWN\"),\n          violence: String(safeSearch.violence || \"UNKNOWN\"),\n          racy: String(safeSearch.racy || \"UNKNOWN\"),\n        },\n      };\n    } catch (error) {\n      logger.error(\"Vision AI 分析失敗\", { error });\n\n      // 備用方案：使用本地分析\n      return AIService.analyzeImageLocally(imageBuffer);\n    }\n  }\n\n  /**\n   * 本地圖像分析（備用方案）\n   */\n  static async analyzeImageLocally(\n    imageBuffer: Buffer,\n  ): Promise<AIAnalysisResult> {\n    try {\n      const features = await AIService.extractImageFeatures(imageBuffer);\n\n      return {\n        petType: \"unknown\",\n        breed: \"未知品種\",\n        confidence: 0.5,\n        features,\n        labels: [\"寵物\", \"動物\"],\n        safeSearch: {\n          adult: \"VERY_UNLIKELY\",\n          violence: \"VERY_UNLIKELY\",\n          racy: \"VERY_UNLIKELY\",\n        },\n      };\n    } catch (error) {\n      logger.error(\"本地圖像分析失敗\", { error });\n      throw new AppError(\"圖像分析失敗\", 500);\n    }\n  }\n\n  /**\n   * 從標籤分析寵物類型和品種\n   */\n  private static analyzePetFromLabels(labels: string[]): {\n    type: \"dog\" | \"cat\" | \"other\" | \"unknown\";\n    breed: string;\n    confidence: number;\n  } {\n    const lowerLabels = labels.map((label) => label.toLowerCase());\n\n    // 檢測寵物類型\n    let petType: \"dog\" | \"cat\" | \"other\" | \"unknown\" = \"unknown\";\n    let confidence = 0;\n\n    if (\n      lowerLabels.some(\n        (label) => label.includes(\"dog\") || label.includes(\"puppy\"),\n      )\n    ) {\n      petType = \"dog\";\n      confidence = 0.8;\n    } else if (\n      lowerLabels.some(\n        (label) => label.includes(\"cat\") || label.includes(\"kitten\"),\n      )\n    ) {\n      petType = \"cat\";\n      confidence = 0.8;\n    } else if (\n      lowerLabels.some(\n        (label) => label.includes(\"pet\") || label.includes(\"animal\"),\n      )\n    ) {\n      petType = \"other\";\n      confidence = 0.6;\n    }\n\n    // 嘗試識別品種\n    let breed = \"混種\";\n    if (petType === \"dog\") {\n      for (const dogBreed of PET_BREEDS.dogs) {\n        if (\n          lowerLabels.some((label) => label.includes(dogBreed.toLowerCase()))\n        ) {\n          breed = dogBreed;\n          confidence = Math.min(confidence + 0.1, 0.9);\n          break;\n        }\n      }\n    } else if (petType === \"cat\") {\n      for (const catBreed of PET_BREEDS.cats) {\n        if (\n          lowerLabels.some((label) => label.includes(catBreed.toLowerCase()))\n        ) {\n          breed = catBreed;\n          confidence = Math.min(confidence + 0.1, 0.9);\n          break;\n        }\n      }\n    }\n\n    return { type: petType, breed, confidence };\n  }\n\n  // 輔助方法（簡化版）\n  private static generateSimpleColorHistogram(metadata: any): number[] {\n    // 基於圖像元數據生成簡化的顏色直方圖\n    const histogram = new Array(256).fill(0);\n    const seed = (metadata.width || 100) * (metadata.height || 100);\n\n    // 生成偽隨機但一致的直方圖\n    for (let i = 0; i < 256; i++) {\n      histogram[i] = Math.sin(seed + i) * 0.5 + 0.5;\n    }\n\n    // 正規化\n    const total = histogram.reduce((sum, val) => sum + val, 0);\n    return histogram.map((val) => val / total);\n  }\n\n  private static generateSimpleTextureFeatures(metadata: any): number[] {\n    // 基於圖像元數據生成簡化的紋理特徵\n    const width = metadata.width || 100;\n    const height = metadata.height || 100;\n    return [\n      width / 1000,\n      height / 1000,\n      (width * height) / 1000000,\n      metadata.channels || 3,\n    ];\n  }\n\n  private static generateSimpleShapeFeatures(metadata: any): number[] {\n    // 基於圖像元數據生成簡化的形狀特徵\n    const width = metadata.width || 100;\n    const height = metadata.height || 100;\n    const aspectRatio = width / height;\n    return [aspectRatio, width, height, width * height];\n  }\n\n  private static generateSimpleDominantColors(): string[] {\n    // 返回常見的寵物顏色\n    return [\"#8B4513\", \"#D2691E\", \"#000000\", \"#FFFFFF\", \"#808080\"];\n  }\n\n  private static calculateHistogramSimilarity(\n    hist1: number[],\n    hist2: number[],\n  ): number {\n    if (hist1.length !== hist2.length) return 0;\n\n    let similarity = 0;\n    for (let i = 0; i < hist1.length; i++) {\n      const val1 = hist1[i];\n      const val2 = hist2[i];\n      if (val1 !== undefined && val2 !== undefined) {\n        similarity += Math.min(val1, val2);\n      }\n    }\n    return similarity;\n  }\n\n  private static calculateVectorSimilarity(\n    vec1: number[],\n    vec2: number[],\n  ): number {\n    if (vec1.length !== vec2.length) return 0;\n\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n\n    for (let i = 0; i < vec1.length; i++) {\n      const val1 = vec1[i];\n      const val2 = vec2[i];\n      if (val1 !== undefined && val2 !== undefined) {\n        dotProduct += val1 * val2;\n        norm1 += val1 * val1;\n        norm2 += val2 * val2;\n      }\n    }\n\n    return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));\n  }\n\n  /**\n   * 分析圖像（主要入口方法）\n   */\n  static async analyzeImage(imageUrl: string): Promise<AIAnalysisResult> {\n    try {\n      // 從 URL 下載圖像\n      const response = await fetch(imageUrl);\n      if (!response.ok) {\n        throw new AppError(`無法下載圖像: ${response.statusText}`, 400);\n      }\n\n      const arrayBuffer = await response.arrayBuffer();\n      const imageBuffer = Buffer.from(arrayBuffer);\n\n      // 使用 Vision AI 分析圖像\n      return await this.analyzeImageWithVision(imageBuffer);\n    } catch (error) {\n      logger.error(\"圖像分析失敗\", { imageUrl, error });\n\n      // 如果分析失敗，返回基本結果\n      return {\n        petType: \"unknown\",\n        breed: \"未識別\",\n        confidence: 0.5,\n        features: {\n          colorHistogram: [],\n          textureFeatures: [],\n          shapeFeatures: [],\n          dominantColors: [],\n        },\n        labels: [\"寵物\"],\n        safeSearch: {\n          adult: \"VERY_UNLIKELY\",\n          violence: \"VERY_UNLIKELY\",\n          racy: \"VERY_UNLIKELY\",\n        },\n      };\n    }\n  }\n\n  /**\n   * 計算兩隻寵物的相似度\n   */\n  static calculateSimilarity(pet1: any, pet2: any): number {\n    try {\n      let similarity = 0;\n      let factors = 0;\n\n      // 品種相似度 (權重: 30%)\n      if (pet1.breed && pet2.breed) {\n        factors++;\n        if (pet1.breed === pet2.breed) {\n          similarity += 0.3;\n        } else if (pet1.breed.includes(\"混種\") || pet2.breed.includes(\"混種\")) {\n          similarity += 0.15;\n        }\n      }\n\n      // 顏色相似度 (權重: 25%)\n      if (pet1.color && pet2.color) {\n        factors++;\n        const color1 = pet1.color.toLowerCase();\n        const color2 = pet2.color.toLowerCase();\n        if (color1 === color2) {\n          similarity += 0.25;\n        } else if (color1.includes(color2) || color2.includes(color1)) {\n          similarity += 0.15;\n        }\n      }\n\n      // 大小相似度 (權重: 20%)\n      if (pet1.size && pet2.size) {\n        factors++;\n        if (pet1.size === pet2.size) {\n          similarity += 0.2;\n        } else {\n          const sizes = [\"小型\", \"中型\", \"大型\"];\n          const index1 = sizes.indexOf(pet1.size);\n          const index2 = sizes.indexOf(pet2.size);\n          if (index1 !== -1 && index2 !== -1) {\n            const diff = Math.abs(index1 - index2);\n            if (diff === 1) similarity += 0.1;\n          }\n        }\n      }\n\n      // 年齡相似度 (權重: 15%)\n      if (pet1.age && pet2.age) {\n        factors++;\n        const ageDiff = Math.abs(pet1.age - pet2.age);\n        if (ageDiff === 0) {\n          similarity += 0.15;\n        } else if (ageDiff <= 1) {\n          similarity += 0.1;\n        } else if (ageDiff <= 3) {\n          similarity += 0.05;\n        }\n      }\n\n      // 性別相似度 (權重: 10%)\n      if (pet1.gender && pet2.gender) {\n        factors++;\n        if (pet1.gender === pet2.gender) {\n          similarity += 0.1;\n        }\n      }\n\n      // 如果有圖像特徵，計算圖像相似度\n      if (pet1.imageFeatures && pet2.imageFeatures) {\n        const imageSimilarity = AIService.calculateImageSimilarity(\n          pet1.imageFeatures,\n          pet2.imageFeatures,\n        );\n        similarity += imageSimilarity * 0.3; // 圖像相似度權重 30%\n        factors++;\n      }\n\n      // 正規化相似度分數\n      return factors > 0 ? Math.min(similarity, 1) : 0;\n    } catch (error) {\n      logger.error(\"相似度計算失敗\", { error });\n      return 0;\n    }\n  }\n\n  /**\n   * 生成搜尋建議\n   */\n  static generateSearchSuggestions(analysisResult: AIAnalysisResult): string[] {\n    const suggestions: string[] = [];\n\n    // 基於寵物類型的建議\n    if (analysisResult.petType !== \"unknown\") {\n      suggestions.push(analysisResult.petType === \"dog\" ? \"狗\" : \"貓\");\n    }\n\n    // 基於品種的建議\n    if (\n      analysisResult.breed !== \"混種\" &&\n      analysisResult.breed !== \"未知品種\"\n    ) {\n      suggestions.push(analysisResult.breed);\n    }\n\n    // 基於標籤的建議\n    analysisResult.labels.forEach((label) => {\n      if (label.length > 1 && !suggestions.includes(label)) {\n        suggestions.push(label);\n      }\n    });\n\n    return suggestions.slice(0, 5); // 限制為 5 個建議\n  }\n}\n"],"version":3}