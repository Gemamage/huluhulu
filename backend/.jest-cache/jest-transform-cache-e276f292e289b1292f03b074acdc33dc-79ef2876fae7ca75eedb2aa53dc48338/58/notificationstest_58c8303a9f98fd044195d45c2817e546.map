{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\notifications.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\routes\\notifications.test.ts"],"sourcesContent":["import request from 'supertest';\nimport { app } from '../../src/server';\nimport { User, IUser } from '../../src/models/User';\nimport { Pet, IPet } from '../../src/models/Pet';\nimport { Match, IMatch } from '../../src/models/Match';\nimport { Notification, INotification } from '../../src/models/Notification';\nimport { validUserData, validPetData } from '../utils/testData';\nimport jwt from 'jsonwebtoken';\n\ndescribe('Notification Routes', () => {\n  let testUser1: IUser;\n  let testUser2: IUser;\n  let authToken1: string;\n  let authToken2: string;\n  let testPet: IPet;\n  let testMatch: IMatch;\n  let testNotification: INotification;\n\n  beforeEach(async () => {\n    await User.deleteMany({});\n    await Pet.deleteMany({});\n    await Match.deleteMany({});\n    await Notification.deleteMany({});\n    \n    testUser1 = await new User({\n      ...validUserData,\n      isEmailVerified: true\n    }).save();\n    \n    testUser2 = await new User({\n      ...validUserData,\n      email: 'user2@example.com',\n      isEmailVerified: true\n    }).save();\n    \n    authToken1 = jwt.sign(\n      { userId: testUser1._id },\n      process.env.JWT_SECRET || 'test-secret',\n      { expiresIn: '1h' }\n    );\n    \n    authToken2 = jwt.sign(\n      { userId: testUser2._id },\n      process.env.JWT_SECRET || 'test-secret',\n      { expiresIn: '1h' }\n    );\n    \n    testPet = await new Pet({\n      ...validPetData,\n      owner: testUser1._id\n    }).save();\n    \n    const foundPet = await new Pet({\n      ...validPetData,\n      name: 'Found Pet',\n      status: 'found',\n      owner: testUser2._id\n    }).save();\n    \n    testMatch = await new Match({\n      lostPet: testPet._id,\n      foundPet: foundPet._id,\n      similarity: 0.85,\n      confidence: 'high',\n      status: 'pending'\n    }).save();\n    \n    testNotification = await new Notification({\n      recipient: testUser1._id,\n      type: 'match_found',\n      title: '找到潛在配對',\n      message: '我們為您的寵物找到了一個潛在配對',\n      data: {\n        matchId: testMatch._id,\n        petId: testPet._id\n      }\n    }).save();\n  });\n\n  afterEach(async () => {\n    await User.deleteMany({});\n    await Pet.deleteMany({});\n    await Match.deleteMany({});\n    await Notification.deleteMany({});\n  });\n\n  describe('GET /api/notifications', () => {\n    beforeEach(async () => {\n      // Create additional notifications\n      await new Notification({\n        recipient: testUser1._id,\n        type: 'match_confirmed',\n        title: '配對已確認',\n        message: '您的配對已被確認',\n        isRead: true,\n        data: {\n          matchId: testMatch._id\n        }\n      }).save();\n      \n      await new Notification({\n        recipient: testUser1._id,\n        type: 'pet_viewed',\n        title: '寵物被查看',\n        message: '有人查看了您的寵物資訊',\n        data: {\n          petId: testPet._id\n        }\n      }).save();\n    });\n\n    it('should get user notifications', async () => {\n      const response = await request(app)\n        .get('/api/notifications')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.notifications).toHaveLength(3);\n      expect(response.body.data.total).toBe(3);\n      expect(response.body.data.unreadCount).toBe(2);\n    });\n\n    it('should filter notifications by read status', async () => {\n      const response = await request(app)\n        .get('/api/notifications?isRead=false')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.data.notifications.length).toBe(2);\n      expect(response.body.data.notifications.every((notif: any) => !notif.isRead)).toBe(true);\n    });\n\n    it('should filter notifications by type', async () => {\n      const response = await request(app)\n        .get('/api/notifications?type=match_found')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.data.notifications.length).toBe(1);\n      expect(response.body.data.notifications[0].type).toBe('match_found');\n    });\n\n    it('should paginate notifications', async () => {\n      const response = await request(app)\n        .get('/api/notifications?page=1&limit=2')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.data.notifications).toHaveLength(2);\n      expect(response.body.data.totalPages).toBe(2);\n    });\n\n    it('should sort notifications by creation date', async () => {\n      const response = await request(app)\n        .get('/api/notifications?sortBy=createdAt&sortOrder=desc')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      const notifications = response.body.data.notifications;\n      \n      for (let i = 1; i < notifications.length; i++) {\n        expect(new Date(notifications[i-1].createdAt).getTime())\n          .toBeGreaterThanOrEqual(new Date(notifications[i].createdAt).getTime());\n      }\n    });\n\n    it('should require authentication', async () => {\n      const response = await request(app)\n        .get('/api/notifications');\n      \n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('GET /api/notifications/:id', () => {\n    it('should get notification by ID', async () => {\n      const response = await request(app)\n        .get(`/api/notifications/${testNotification._id}`)\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data._id).toBe(testNotification._id.toString());\n      expect(response.body.data.title).toBe(testNotification.title);\n      expect(response.body.data.message).toBe(testNotification.message);\n    });\n\n    it('should not allow access to other users notifications', async () => {\n      const response = await request(app)\n        .get(`/api/notifications/${testNotification._id}`)\n        .set('Authorization', `Bearer ${authToken2}`);\n      \n      expect(response.status).toBe(403);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should return 404 for non-existent notification', async () => {\n      const nonExistentId = '507f1f77bcf86cd799439011';\n      \n      const response = await request(app)\n        .get(`/api/notifications/${nonExistentId}`)\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(404);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should return 400 for invalid notification ID', async () => {\n      const response = await request(app)\n        .get('/api/notifications/invalid-id')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(400);\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('PUT /api/notifications/:id/read', () => {\n    it('should mark notification as read', async () => {\n      expect(testNotification.isRead).toBe(false);\n      \n      const response = await request(app)\n        .put(`/api/notifications/${testNotification._id}/read`)\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.isRead).toBe(true);\n      expect(response.body.data.readAt).toBeDefined();\n    });\n\n    it('should handle already read notification', async () => {\n      testNotification.isRead = true;\n      testNotification.readAt = new Date();\n      await testNotification.save();\n      \n      const response = await request(app)\n        .put(`/api/notifications/${testNotification._id}/read`)\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.isRead).toBe(true);\n    });\n\n    it('should not allow access to other users notifications', async () => {\n      const response = await request(app)\n        .put(`/api/notifications/${testNotification._id}/read`)\n        .set('Authorization', `Bearer ${authToken2}`);\n      \n      expect(response.status).toBe(403);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should return 404 for non-existent notification', async () => {\n      const nonExistentId = '507f1f77bcf86cd799439011';\n      \n      const response = await request(app)\n        .put(`/api/notifications/${nonExistentId}/read`)\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(404);\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('PUT /api/notifications/mark-all-read', () => {\n    beforeEach(async () => {\n      // Create additional unread notifications\n      await new Notification({\n        recipient: testUser1._id,\n        type: 'match_confirmed',\n        title: '配對已確認',\n        message: '您的配對已被確認'\n      }).save();\n      \n      await new Notification({\n        recipient: testUser1._id,\n        type: 'pet_viewed',\n        title: '寵物被查看',\n        message: '有人查看了您的寵物資訊'\n      }).save();\n    });\n\n    it('should mark all notifications as read', async () => {\n      const response = await request(app)\n        .put('/api/notifications/mark-all-read')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.modifiedCount).toBe(3); // 3 unread notifications\n      \n      // Verify all notifications are marked as read\n      const notifications = await Notification.find({ recipient: testUser1._id });\n      expect(notifications.every(notif => notif.isRead)).toBe(true);\n    });\n\n    it('should handle case with no unread notifications', async () => {\n      // Mark all notifications as read first\n      await Notification.updateMany(\n        { recipient: testUser1._id },\n        { isRead: true, readAt: new Date() }\n      );\n      \n      const response = await request(app)\n        .put('/api/notifications/mark-all-read')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.modifiedCount).toBe(0);\n    });\n\n    it('should require authentication', async () => {\n      const response = await request(app)\n        .put('/api/notifications/mark-all-read');\n      \n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('DELETE /api/notifications/:id', () => {\n    it('should delete notification successfully', async () => {\n      const response = await request(app)\n        .delete(`/api/notifications/${testNotification._id}`)\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      \n      // Verify notification is deleted\n      const deletedNotification = await Notification.findById(testNotification._id);\n      expect(deletedNotification).toBeNull();\n    });\n\n    it('should not allow deleting other users notifications', async () => {\n      const response = await request(app)\n        .delete(`/api/notifications/${testNotification._id}`)\n        .set('Authorization', `Bearer ${authToken2}`);\n      \n      expect(response.status).toBe(403);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should return 404 for non-existent notification', async () => {\n      const nonExistentId = '507f1f77bcf86cd799439011';\n      \n      const response = await request(app)\n        .delete(`/api/notifications/${nonExistentId}`)\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(404);\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('DELETE /api/notifications/clear-all', () => {\n    beforeEach(async () => {\n      // Create additional notifications\n      await new Notification({\n        recipient: testUser1._id,\n        type: 'match_confirmed',\n        title: '配對已確認',\n        message: '您的配對已被確認',\n        isRead: true\n      }).save();\n      \n      await new Notification({\n        recipient: testUser1._id,\n        type: 'pet_viewed',\n        title: '寵物被查看',\n        message: '有人查看了您的寵物資訊'\n      }).save();\n    });\n\n    it('should clear all user notifications', async () => {\n      const response = await request(app)\n        .delete('/api/notifications/clear-all')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.deletedCount).toBe(3);\n      \n      // Verify all notifications are deleted\n      const notifications = await Notification.find({ recipient: testUser1._id });\n      expect(notifications).toHaveLength(0);\n    });\n\n    it('should only clear read notifications when specified', async () => {\n      const response = await request(app)\n        .delete('/api/notifications/clear-all?readOnly=true')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.deletedCount).toBe(1); // Only 1 read notification\n      \n      // Verify unread notifications remain\n      const remainingNotifications = await Notification.find({ recipient: testUser1._id });\n      expect(remainingNotifications).toHaveLength(2);\n      expect(remainingNotifications.every(notif => !notif.isRead)).toBe(true);\n    });\n\n    it('should handle case with no notifications', async () => {\n      await Notification.deleteMany({ recipient: testUser1._id });\n      \n      const response = await request(app)\n        .delete('/api/notifications/clear-all')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.deletedCount).toBe(0);\n    });\n\n    it('should require authentication', async () => {\n      const response = await request(app)\n        .delete('/api/notifications/clear-all');\n      \n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('GET /api/notifications/unread-count', () => {\n    beforeEach(async () => {\n      // Create additional notifications with mixed read status\n      await new Notification({\n        recipient: testUser1._id,\n        type: 'match_confirmed',\n        title: '配對已確認',\n        message: '您的配對已被確認',\n        isRead: true\n      }).save();\n      \n      await new Notification({\n        recipient: testUser1._id,\n        type: 'pet_viewed',\n        title: '寵物被查看',\n        message: '有人查看了您的寵物資訊'\n      }).save();\n      \n      await new Notification({\n        recipient: testUser1._id,\n        type: 'system_update',\n        title: '系統更新',\n        message: '系統已更新到新版本'\n      }).save();\n    });\n\n    it('should get unread notification count', async () => {\n      const response = await request(app)\n        .get('/api/notifications/unread-count')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.count).toBe(3); // 3 unread notifications\n    });\n\n    it('should return 0 when all notifications are read', async () => {\n      await Notification.updateMany(\n        { recipient: testUser1._id },\n        { isRead: true, readAt: new Date() }\n      );\n      \n      const response = await request(app)\n        .get('/api/notifications/unread-count')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.data.count).toBe(0);\n    });\n\n    it('should require authentication', async () => {\n      const response = await request(app)\n        .get('/api/notifications/unread-count');\n      \n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('POST /api/notifications/preferences', () => {\n    it('should update notification preferences', async () => {\n      const preferences = {\n        emailNotifications: true,\n        pushNotifications: false,\n        matchNotifications: true,\n        messageNotifications: false,\n        systemNotifications: true\n      };\n      \n      const response = await request(app)\n        .post('/api/notifications/preferences')\n        .set('Authorization', `Bearer ${authToken1}`)\n        .send(preferences);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.emailNotifications).toBe(true);\n      expect(response.body.data.pushNotifications).toBe(false);\n    });\n\n    it('should validate preference values', async () => {\n      const response = await request(app)\n        .post('/api/notifications/preferences')\n        .set('Authorization', `Bearer ${authToken1}`)\n        .send({\n          emailNotifications: 'invalid-value'\n        });\n      \n      expect(response.status).toBe(400);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should require authentication', async () => {\n      const response = await request(app)\n        .post('/api/notifications/preferences')\n        .send({\n          emailNotifications: true\n        });\n      \n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('GET /api/notifications/preferences', () => {\n    it('should get notification preferences', async () => {\n      const response = await request(app)\n        .get('/api/notifications/preferences')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('emailNotifications');\n      expect(response.body.data).toHaveProperty('pushNotifications');\n      expect(response.body.data).toHaveProperty('matchNotifications');\n      expect(response.body.data).toHaveProperty('messageNotifications');\n      expect(response.body.data).toHaveProperty('systemNotifications');\n    });\n\n    it('should require authentication', async () => {\n      const response = await request(app)\n        .get('/api/notifications/preferences');\n      \n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle server errors gracefully', async () => {\n      // Mock a database error\n      jest.spyOn(Notification, 'find').mockRejectedValueOnce(new Error('Database error'));\n      \n      const response = await request(app)\n        .get('/api/notifications')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(500);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should validate request parameters', async () => {\n      const response = await request(app)\n        .get('/api/notifications?page=invalid')\n        .set('Authorization', `Bearer ${authToken1}`);\n      \n      expect(response.status).toBe(400);\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should apply rate limiting to notification endpoints', async () => {\n      // Make multiple rapid requests\n      const requests = Array(20).fill(null).map(() => \n        request(app)\n          .get('/api/notifications')\n          .set('Authorization', `Bearer ${authToken1}`)\n      );\n      \n      const responses = await Promise.all(requests);\n      \n      // Some requests should be rate limited\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Real-time Notifications', () => {\n    it('should handle WebSocket connections for real-time notifications', async () => {\n      // This would test WebSocket functionality if implemented\n      // For now, we'll test the REST endpoint that would trigger real-time updates\n      \n      const response = await request(app)\n        .post('/api/notifications/test-realtime')\n        .set('Authorization', `Bearer ${authToken1}`)\n        .send({\n          type: 'test_notification',\n          title: '測試通知',\n          message: '這是一個測試通知'\n        });\n      \n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n    });\n  });\n\n  describe('Notification Templates', () => {\n    it('should use correct templates for different notification types', async () => {\n      const matchNotification = await Notification.findOne({ type: 'match_found' });\n      expect(matchNotification?.title).toContain('配對');\n      expect(matchNotification?.message).toContain('潛在配對');\n    });\n\n    it('should support multiple languages in notifications', async () => {\n      // Test would depend on i18n implementation\n      const response = await request(app)\n        .post('/api/notifications/test-i18n')\n        .set('Authorization', `Bearer ${authToken1}`)\n        .set('Accept-Language', 'en')\n        .send({\n          type: 'match_found',\n          data: { petName: 'Buddy' }\n        });\n      \n      expect(response.status).toBe(200);\n      // Would check for English notification content\n    });\n  });\n});"],"version":3}