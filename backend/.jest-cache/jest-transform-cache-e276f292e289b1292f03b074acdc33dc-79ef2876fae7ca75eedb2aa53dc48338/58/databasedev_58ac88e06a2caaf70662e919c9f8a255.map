{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\config\\database-dev.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\config\\database-dev.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport { MongoMemoryServer } from 'mongodb-memory-server';\nimport { config } from './environment';\nimport { logger } from '../utils/logger';\n\nlet mongoServer: MongoMemoryServer | null = null;\n\n/**\n * 連接到 MongoDB 資料庫（開發環境使用內存資料庫）\n */\nexport const connectDatabase = async (): Promise<void> => {\n  try {\n    // 設置 Mongoose 選項\n    mongoose.set('strictQuery', true);\n    \n    let uri: string;\n    \n    // 如果是開發環境且沒有配置 MongoDB URI，使用內存資料庫\n    if (config.env === 'development' && config.database.uri.includes('localhost:27017')) {\n      logger.info('啟動 MongoDB Memory Server...');\n      mongoServer = await MongoMemoryServer.create({\n        instance: {\n          port: 27017,\n          dbName: 'pet-finder-dev'\n        }\n      });\n      uri = mongoServer.getUri();\n      logger.info('MongoDB Memory Server 已啟動');\n    } else {\n      uri = config.database.uri;\n    }\n    \n    // 連接資料庫\n    await mongoose.connect(uri, {\n      ...config.database.options,\n      dbName: getDatabaseName(),\n    });\n    \n    logger.info(`MongoDB 連接成功: ${getDatabaseName()}`);\n    \n    // 監聽連接事件\n    mongoose.connection.on('error', (error) => {\n      logger.error('MongoDB 連接錯誤:', error);\n    });\n    \n    mongoose.connection.on('disconnected', () => {\n      logger.warn('MongoDB 連接中斷');\n    });\n    \n    mongoose.connection.on('reconnected', () => {\n      logger.info('MongoDB 重新連接成功');\n    });\n    \n  } catch (error) {\n    logger.error('MongoDB 連接失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 斷開資料庫連接\n */\nexport const disconnectDatabase = async (): Promise<void> => {\n  try {\n    await mongoose.disconnect();\n    \n    if (mongoServer) {\n      await mongoServer.stop();\n      mongoServer = null;\n      logger.info('MongoDB Memory Server 已停止');\n    }\n    \n    logger.info('MongoDB 連接已關閉');\n  } catch (error) {\n    logger.error('關閉 MongoDB 連接時發生錯誤:', error);\n    throw error;\n  }\n};\n\n/**\n * 清空資料庫（僅用於測試環境）\n */\nexport const clearDatabase = async (): Promise<void> => {\n  if (config.env !== 'test') {\n    throw new Error('清空資料庫操作僅允許在測試環境中執行');\n  }\n  \n  try {\n    if (!mongoose.connection.db) {\n      throw new Error('資料庫連接未建立');\n    }\n    \n    const collections = await mongoose.connection.db.collections();\n    \n    await Promise.all(\n      collections.map(collection => collection.deleteMany({}))\n    );\n    \n    logger.info('測試資料庫已清空');\n  } catch (error) {\n    logger.error('清空資料庫時發生錯誤:', error);\n    throw error;\n  }\n};\n\n/**\n * 檢查資料庫連接狀態\n */\nexport const isDatabaseConnected = (): boolean => {\n  return mongoose.connection.readyState === 1;\n};\n\n/**\n * 獲取資料庫名稱\n */\nfunction getDatabaseName(): string {\n  const baseDbName = 'pet-finder';\n  \n  switch (config.env) {\n    case 'test':\n      return `${baseDbName}-test`;\n    case 'development':\n      return `${baseDbName}-dev`;\n    case 'production':\n      return baseDbName;\n    default:\n      return `${baseDbName}-dev`;\n  }\n}\n\n/**\n * 資料庫健康檢查\n */\nexport const checkDatabaseHealth = async (): Promise<{\n  status: 'healthy' | 'unhealthy';\n  details: {\n    connected: boolean;\n    readyState: number;\n    host?: string;\n    name?: string;\n    usingMemoryServer?: boolean;\n  };\n}> => {\n  try {\n    const isConnected = isDatabaseConnected();\n    \n    return {\n      status: isConnected ? 'healthy' : 'unhealthy',\n      details: {\n        connected: isConnected,\n        readyState: mongoose.connection.readyState,\n        host: mongoose.connection.host,\n        name: mongoose.connection.name,\n        usingMemoryServer: mongoServer !== null,\n      },\n    };\n  } catch (error) {\n    logger.error('資料庫健康檢查失敗:', error);\n    \n    return {\n      status: 'unhealthy',\n      details: {\n        connected: false,\n        readyState: mongoose.connection.readyState,\n        usingMemoryServer: mongoServer !== null,\n      },\n    };\n  }\n};\n\n// 導出 mongoose 實例\nexport { mongoose };"],"version":3}