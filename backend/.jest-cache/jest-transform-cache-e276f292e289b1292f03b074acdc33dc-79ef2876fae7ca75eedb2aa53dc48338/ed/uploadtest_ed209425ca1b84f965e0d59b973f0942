1bf672daf214dd95938c003304d4e668
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const upload_1 = require("../../src/schemas/upload");
describe('Upload Schemas', () => {
    describe('presignedUrlSchema', () => {
        it('should validate valid presigned URL request', () => {
            const validData = {
                fileName: 'test-image.jpg',
                mimeType: 'image/jpeg',
                type: 'pet'
            };
            const result = upload_1.presignedUrlSchema.safeParse(validData);
            expect(result.success).toBe(true);
            if (result.success) {
                expect(result.data).toEqual(validData);
            }
        });
        it('should apply default type value', () => {
            const dataWithoutType = {
                fileName: 'test-image.png',
                mimeType: 'image/png'
            };
            const result = upload_1.presignedUrlSchema.safeParse(dataWithoutType);
            expect(result.success).toBe(true);
            if (result.success) {
                expect(result.data.type).toBe('pet');
            }
        });
        it('should reject empty fileName', () => {
            const invalidData = {
                fileName: '',
                mimeType: 'image/jpeg',
                type: 'pet'
            };
            const result = upload_1.presignedUrlSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
        it('should reject invalid mimeType', () => {
            const invalidData = {
                fileName: 'test.pdf',
                mimeType: 'application/pdf',
                type: 'pet'
            };
            const result = upload_1.presignedUrlSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
        it('should accept all valid image mimeTypes', () => {
            const validMimeTypes = [
                'image/jpeg',
                'image/jpg',
                'image/png',
                'image/webp',
                'image/gif'
            ];
            validMimeTypes.forEach(mimeType => {
                const data = {
                    fileName: 'test-image',
                    mimeType,
                    type: 'avatar'
                };
                const result = upload_1.presignedUrlSchema.safeParse(data);
                expect(result.success).toBe(true);
            });
        });
        it('should reject invalid type values', () => {
            const invalidData = {
                fileName: 'test.jpg',
                mimeType: 'image/jpeg',
                type: 'invalid'
            };
            const result = upload_1.presignedUrlSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe('searchHistoryQuerySchema', () => {
        it('should validate valid search history query', () => {
            const validData = {
                limit: 20
            };
            const result = upload_1.searchHistoryQuerySchema.safeParse(validData);
            expect(result.success).toBe(true);
            if (result.success) {
                expect(result.data).toEqual(validData);
            }
        });
        it('should apply default limit value', () => {
            const result = upload_1.searchHistoryQuerySchema.safeParse({});
            expect(result.success).toBe(true);
            if (result.success) {
                expect(result.data.limit).toBe(10);
            }
        });
        it('should reject limit values below minimum', () => {
            const invalidData = {
                limit: 0
            };
            const result = upload_1.searchHistoryQuerySchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
        it('should reject limit values above maximum', () => {
            const invalidData = {
                limit: 100
            };
            const result = upload_1.searchHistoryQuerySchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
        it('should reject non-integer limit values', () => {
            const invalidData = {
                limit: 10.5
            };
            const result = upload_1.searchHistoryQuerySchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,