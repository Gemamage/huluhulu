{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\schemas\\upload.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\test\\schemas\\upload.test.ts"],"sourcesContent":["import { \n  presignedUrlSchema,\n  searchHistoryQuerySchema,\n  PresignedUrlRequest,\n  SearchHistoryQueryRequest\n} from '../../src/schemas/upload';\n\ndescribe('Upload Schemas', () => {\n  describe('presignedUrlSchema', () => {\n    it('should validate valid presigned URL request', () => {\n      const validData: PresignedUrlRequest = {\n        fileName: 'test-image.jpg',\n        mimeType: 'image/jpeg',\n        type: 'pet'\n      };\n\n      const result = presignedUrlSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual(validData);\n      }\n    });\n\n    it('should apply default type value', () => {\n      const dataWithoutType = {\n        fileName: 'test-image.png',\n        mimeType: 'image/png'\n      };\n\n      const result = presignedUrlSchema.safeParse(dataWithoutType);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.type).toBe('pet');\n      }\n    });\n\n    it('should reject empty fileName', () => {\n      const invalidData = {\n        fileName: '',\n        mimeType: 'image/jpeg',\n        type: 'pet'\n      };\n\n      const result = presignedUrlSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject invalid mimeType', () => {\n      const invalidData = {\n        fileName: 'test.pdf',\n        mimeType: 'application/pdf',\n        type: 'pet'\n      };\n\n      const result = presignedUrlSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should accept all valid image mimeTypes', () => {\n      const validMimeTypes = [\n        'image/jpeg',\n        'image/jpg',\n        'image/png',\n        'image/webp',\n        'image/gif'\n      ];\n\n      validMimeTypes.forEach(mimeType => {\n        const data = {\n          fileName: 'test-image',\n          mimeType,\n          type: 'avatar' as const\n        };\n\n        const result = presignedUrlSchema.safeParse(data);\n        expect(result.success).toBe(true);\n      });\n    });\n\n    it('should reject invalid type values', () => {\n      const invalidData = {\n        fileName: 'test.jpg',\n        mimeType: 'image/jpeg',\n        type: 'invalid'\n      };\n\n      const result = presignedUrlSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('searchHistoryQuerySchema', () => {\n    it('should validate valid search history query', () => {\n      const validData: SearchHistoryQueryRequest = {\n        limit: 20\n      };\n\n      const result = searchHistoryQuerySchema.safeParse(validData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual(validData);\n      }\n    });\n\n    it('should apply default limit value', () => {\n      const result = searchHistoryQuerySchema.safeParse({});\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.limit).toBe(10);\n      }\n    });\n\n    it('should reject limit values below minimum', () => {\n      const invalidData = {\n        limit: 0\n      };\n\n      const result = searchHistoryQuerySchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject limit values above maximum', () => {\n      const invalidData = {\n        limit: 100\n      };\n\n      const result = searchHistoryQuerySchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject non-integer limit values', () => {\n      const invalidData = {\n        limit: 10.5\n      };\n\n      const result = searchHistoryQuerySchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n});"],"version":3}