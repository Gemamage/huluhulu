{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\core.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\services\\search\\core.ts"],"sourcesContent":["import { elasticsearchService, SearchResponse } from \"../elasticsearchService\";\nimport { logger } from \"../../utils/logger\";\nimport { indexingService } from \"./indexing\";\n\n// 寵物搜尋查詢介面\nexport interface PetSearchQuery {\n  query?: string;\n  type?: string;\n  status?: string;\n  breed?: string;\n  location?: string;\n  size?: string;\n  gender?: string;\n  color?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  fuzzy?: boolean;\n  radius?: number;\n  coordinates?: {\n    lat: number;\n    lon: number;\n  };\n}\n\n/**\n * 搜尋核心服務\n * 負責處理寵物搜尋的主要邏輯，包括查詢建構、篩選條件、排序等\n */\nexport class SearchCoreService {\n  /**\n   * 搜尋寵物\n   */\n  public async searchPets(\n    searchQuery: PetSearchQuery,\n  ): Promise<SearchResponse> {\n    try {\n      const {\n        query = \"\",\n        type,\n        status,\n        breed,\n        location,\n        size,\n        gender,\n        color,\n        page = 1,\n        limit = 12,\n        sortBy = \"createdAt\",\n        sortOrder = \"desc\",\n        fuzzy = false,\n        radius = 10,\n        coordinates,\n      } = searchQuery;\n\n      // 建立查詢條件\n      const must: any[] = [];\n      const filter: any[] = [];\n      const should: any[] = [];\n\n      // 文字搜尋\n      if (query.trim()) {\n        if (fuzzy) {\n          // 模糊搜尋\n          should.push(\n            {\n              multi_match: {\n                query: query,\n                fields: [\n                  \"name^3\",\n                  \"breed^2\",\n                  \"description\",\n                  \"lastSeenLocation^2\",\n                ],\n                fuzziness: \"AUTO\",\n                operator: \"or\",\n              },\n            },\n            {\n              wildcard: {\n                \"name.keyword\": `*${query}*`,\n              },\n            },\n            {\n              wildcard: {\n                \"breed.keyword\": `*${query}*`,\n              },\n            },\n          );\n        } else {\n          // 精確搜尋\n          must.push({\n            multi_match: {\n              query: query,\n              fields: [\n                \"name^3\",\n                \"breed^2\",\n                \"description\",\n                \"lastSeenLocation^2\",\n              ],\n              operator: \"and\",\n            },\n          });\n        }\n      }\n\n      // 篩選條件\n      this.addFilters(filter, {\n        type,\n        status,\n        breed,\n        size,\n        gender,\n        color,\n        location,\n      });\n\n      // 地理位置搜尋\n      if (coordinates && radius) {\n        filter.push({\n          geo_distance: {\n            distance: `${radius}km`,\n            location: coordinates,\n          },\n        });\n      }\n\n      // 排序\n      const sort = this.buildSortCriteria(sortBy, sortOrder);\n\n      // 建立查詢體\n      const searchBody = this.buildSearchBody({\n        must,\n        filter,\n        should,\n        sort,\n        page,\n        limit,\n      });\n\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getPetIndexName(),\n        ...searchBody,\n      });\n\n      const hits = response.hits.hits.map((hit: any) => ({\n        id: hit._id,\n        score: hit._score,\n        source: hit._source,\n        highlights: hit.highlight,\n      }));\n\n      return {\n        hits,\n        total: response.hits.total.value,\n        maxScore: response.hits.max_score,\n        took: response.took,\n      };\n    } catch (error) {\n      logger.error(\"搜尋寵物失敗:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * 添加篩選條件\n   */\n  private addFilters(\n    filter: any[],\n    filters: {\n      type?: string;\n      status?: string;\n      breed?: string;\n      size?: string;\n      gender?: string;\n      color?: string;\n      location?: string;\n    },\n  ): void {\n    const { type, status, breed, size, gender, color, location } = filters;\n\n    if (type) filter.push({ term: { type } });\n    if (status) filter.push({ term: { status } });\n    if (breed) filter.push({ term: { \"breed.keyword\": breed } });\n    if (size) filter.push({ term: { size } });\n    if (gender) filter.push({ term: { gender } });\n    if (color) filter.push({ match: { color } });\n    if (location) {\n      filter.push({\n        match: {\n          lastSeenLocation: location,\n        },\n      });\n    }\n  }\n\n  /**\n   * 建立排序條件\n   */\n  private buildSortCriteria(sortBy: string, sortOrder: \"asc\" | \"desc\"): any[] {\n    const sort: any[] = [];\n\n    if (sortBy === \"relevance\") {\n      sort.push({ _score: { order: sortOrder } });\n    } else if (sortBy === \"createdAt\") {\n      sort.push({ isUrgent: { order: \"desc\" } });\n      sort.push({ createdAt: { order: sortOrder } });\n    } else {\n      sort.push({ [sortBy]: { order: sortOrder } });\n    }\n\n    return sort;\n  }\n\n  /**\n   * 建立搜尋查詢體\n   */\n  private buildSearchBody(params: {\n    must: any[];\n    filter: any[];\n    should: any[];\n    sort: any[];\n    page: number;\n    limit: number;\n  }): any {\n    const { must, filter, should, sort, page, limit } = params;\n\n    return {\n      query: {\n        bool: {\n          must: must.length > 0 ? must : [{ match_all: {} }],\n          filter,\n          should: should.length > 0 ? should : undefined,\n          minimum_should_match: should.length > 0 ? 1 : undefined,\n        },\n      },\n      sort,\n      from: (page - 1) * limit,\n      size: limit,\n      highlight: {\n        fields: {\n          name: {},\n          description: {},\n          breed: {},\n          lastSeenLocation: {},\n        },\n        pre_tags: [\"<mark>\"],\n        post_tags: [\"</mark>\"],\n      },\n    };\n  }\n\n  /**\n   * 高級搜尋 - 支援更複雜的查詢條件\n   */\n  public async advancedSearch(params: {\n    textQuery?: string;\n    filters?: Record<string, any>;\n    dateRange?: {\n      field: string;\n      from?: Date;\n      to?: Date;\n    };\n    geoSearch?: {\n      coordinates: { lat: number; lon: number };\n      radius: number;\n    };\n    aggregations?: Record<string, any>;\n    page?: number;\n    limit?: number;\n    sortBy?: string;\n    sortOrder?: \"asc\" | \"desc\";\n  }): Promise<SearchResponse & { aggregations?: any }> {\n    try {\n      const {\n        textQuery,\n        filters = {},\n        dateRange,\n        geoSearch,\n        aggregations,\n        page = 1,\n        limit = 12,\n        sortBy = \"createdAt\",\n        sortOrder = \"desc\",\n      } = params;\n\n      const must: any[] = [];\n      const filter: any[] = [];\n\n      // 文字查詢\n      if (textQuery) {\n        must.push({\n          multi_match: {\n            query: textQuery,\n            fields: [\"name^3\", \"breed^2\", \"description\", \"lastSeenLocation^2\"],\n            operator: \"and\",\n          },\n        });\n      }\n\n      // 篩選條件\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== \"\") {\n          if (Array.isArray(value)) {\n            filter.push({ terms: { [key]: value } });\n          } else {\n            filter.push({ term: { [key]: value } });\n          }\n        }\n      });\n\n      // 日期範圍\n      if (dateRange) {\n        const rangeQuery: any = {};\n        if (dateRange.from) rangeQuery.gte = dateRange.from.toISOString();\n        if (dateRange.to) rangeQuery.lte = dateRange.to.toISOString();\n\n        filter.push({\n          range: {\n            [dateRange.field]: rangeQuery,\n          },\n        });\n      }\n\n      // 地理搜尋\n      if (geoSearch) {\n        filter.push({\n          geo_distance: {\n            distance: `${geoSearch.radius}km`,\n            location: geoSearch.coordinates,\n          },\n        });\n      }\n\n      // 排序\n      const sort = this.buildSortCriteria(sortBy, sortOrder);\n\n      // 建立查詢體\n      const searchBody: any = {\n        query: {\n          bool: {\n            must: must.length > 0 ? must : [{ match_all: {} }],\n            filter,\n          },\n        },\n        sort,\n        from: (page - 1) * limit,\n        size: limit,\n        highlight: {\n          fields: {\n            name: {},\n            description: {},\n            breed: {},\n            lastSeenLocation: {},\n          },\n          pre_tags: [\"<mark>\"],\n          post_tags: [\"</mark>\"],\n        },\n      };\n\n      // 添加聚合查詢\n      if (aggregations) {\n        searchBody.aggs = aggregations;\n      }\n\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getPetIndexName(),\n        ...searchBody,\n      });\n\n      const hits = response.hits.hits.map((hit: any) => ({\n        id: hit._id,\n        score: hit._score,\n        source: hit._source,\n        highlights: hit.highlight,\n      }));\n\n      const result: SearchResponse & { aggregations?: any } = {\n        hits,\n        total: response.hits.total.value,\n        maxScore: response.hits.max_score,\n        took: response.took,\n      };\n\n      if (response.aggregations) {\n        result.aggregations = response.aggregations;\n      }\n\n      return result;\n    } catch (error) {\n      logger.error(\"高級搜尋失敗:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * 相似寵物搜尋\n   */\n  public async findSimilarPets(\n    petId: string,\n    limit: number = 5,\n  ): Promise<SearchResponse> {\n    try {\n      const response = await elasticsearchService.getClient().search({\n        index: indexingService.getPetIndexName(),\n        query: {\n          more_like_this: {\n            fields: [\"name\", \"breed\", \"description\", \"type\", \"color\"],\n            like: [\n              {\n                _index: indexingService.getPetIndexName(),\n                _id: petId,\n              },\n            ],\n            min_term_freq: 1,\n            max_query_terms: 12,\n          },\n        },\n        size: limit,\n      });\n\n      const hits = response.hits.hits.map((hit: any) => ({\n        id: hit._id,\n        score: hit._score,\n        source: hit._source,\n        highlights: hit.highlight,\n      }));\n\n      return {\n        hits,\n        total: response.hits.total.value,\n        maxScore: response.hits.max_score,\n        took: response.took,\n      };\n    } catch (error) {\n      logger.error(\"相似寵物搜尋失敗:\", error);\n      throw error;\n    }\n  }\n}\n\n// 導出單例實例\nexport const searchCoreService = new SearchCoreService();\n"],"version":3}