{"file":"C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\models\\User.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Desktop\\traeproject\\test2\\pet-finder-app\\backend\\src\\models\\User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { config } from \"../config/environment\";\n\n// 隱私設定介面\nexport interface IPrivacySettings {\n  showEmail: boolean;\n  showPhone: boolean;\n  allowDirectContact: boolean;\n  showFullName: boolean;\n  profileVisibility: \"public\" | \"registered\" | \"private\";\n  emailNotifications: {\n    newMatches: boolean;\n    messages: boolean;\n    updates: boolean;\n    marketing: boolean;\n  };\n  smsNotifications: {\n    urgentAlerts: boolean;\n    matches: boolean;\n  };\n}\n\n// 用戶介面定義\nexport interface IUser extends Document {\n  _id: mongoose.Types.ObjectId;\n  email: string;\n  password: string;\n  name: string;\n  phone?: string;\n  avatar?: string;\n  googleId?: string;\n  isEmailVerified: boolean;\n  isActive: boolean;\n  role: \"user\" | \"moderator\" | \"admin\";\n  lastLoginAt?: Date;\n  passwordResetToken?: string | null;\n  passwordResetExpires?: Date | null;\n  emailVerificationToken?: string | null;\n  emailVerificationExpires?: Date | null;\n  authProvider?: \"local\" | \"google\";\n  privacySettings: IPrivacySettings;\n  createdAt: Date;\n  updatedAt: Date;\n\n  // 方法\n  comparePassword(candidatePassword: string): Promise<boolean>;\n  generateAuthToken(): string;\n  generatePasswordResetToken(): string;\n  generateEmailVerificationToken(): string;\n}\n\n// 用戶 Schema\nconst userSchema = new Schema<IUser>(\n  {\n    email: {\n      type: String,\n      required: [true, \"電子郵件為必填項目\"],\n      lowercase: true,\n      trim: true,\n      match: [/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"請提供有效的電子郵件地址\"],\n    },\n    password: {\n      type: String,\n      required: [true, \"密碼為必填項目\"],\n      minlength: [6, \"密碼長度至少需要 6 個字符\"],\n      select: false, // 預設不返回密碼\n    },\n    name: {\n      type: String,\n      required: [true, \"姓名為必填項目\"],\n      trim: true,\n      maxlength: [50, \"姓名長度不能超過 50 個字符\"],\n    },\n    phone: {\n      type: String,\n      trim: true,\n      match: [/^[+]?[0-9\\s\\-()]+$/, \"請提供有效的電話號碼\"],\n    },\n    avatar: {\n      type: String,\n      default: null,\n    },\n    googleId: {\n      type: String,\n      sparse: true, // 允許多個 null 值\n    },\n    isEmailVerified: {\n      type: Boolean,\n      default: false,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n    role: {\n      type: String,\n      enum: [\"user\", \"moderator\", \"admin\"],\n      default: \"user\",\n    },\n    lastLoginAt: {\n      type: Date,\n    },\n    passwordResetToken: {\n      type: String,\n      select: false,\n    },\n    passwordResetExpires: {\n      type: Date,\n      select: false,\n    },\n    emailVerificationToken: {\n      type: String,\n      select: false,\n    },\n    emailVerificationExpires: {\n      type: Date,\n      select: false,\n    },\n    authProvider: {\n      type: String,\n      enum: [\"local\", \"google\"],\n      default: \"local\",\n    },\n    privacySettings: {\n      showEmail: {\n        type: Boolean,\n        default: false,\n      },\n      showPhone: {\n        type: Boolean,\n        default: true,\n      },\n      allowDirectContact: {\n        type: Boolean,\n        default: true,\n      },\n      showFullName: {\n        type: Boolean,\n        default: false,\n      },\n      profileVisibility: {\n        type: String,\n        enum: [\"public\", \"registered\", \"private\"],\n        default: \"registered\",\n      },\n      emailNotifications: {\n        newMatches: {\n          type: Boolean,\n          default: true,\n        },\n        messages: {\n          type: Boolean,\n          default: true,\n        },\n        updates: {\n          type: Boolean,\n          default: false,\n        },\n        marketing: {\n          type: Boolean,\n          default: false,\n        },\n      },\n      smsNotifications: {\n        urgentAlerts: {\n          type: Boolean,\n          default: true,\n        },\n        matches: {\n          type: Boolean,\n          default: false,\n        },\n      },\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      transform: function (doc, ret) {\n        ret.id = ret._id;\n        delete (ret as any)._id;\n        delete (ret as any).__v;\n        delete (ret as any).password;\n        delete (ret as any).passwordResetToken;\n        delete (ret as any).passwordResetExpires;\n        delete (ret as any).emailVerificationToken;\n        delete (ret as any).emailVerificationExpires;\n        return ret;\n      },\n    },\n  },\n);\n\n// 密碼加密中介軟體\nuserSchema.pre(\"save\", async function (next) {\n  // 只有在密碼被修改時才進行加密\n  if (!this.isModified(\"password\")) return next();\n\n  try {\n    // 生成鹽值並加密密碼\n    const salt = await bcrypt.genSalt(12);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error as Error);\n  }\n});\n\n// 比較密碼方法\nuserSchema.methods.comparePassword = async function (\n  candidatePassword: string,\n): Promise<boolean> {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// 生成 JWT 認證令牌\nuserSchema.methods.generateAuthToken = function (): string {\n  const payload = {\n    id: this._id,\n    email: this.email,\n    role: this.role,\n  };\n\n  return jwt.sign(payload, config.jwt.secret, {\n    expiresIn: config.jwt.expiresIn,\n  } as jwt.SignOptions);\n};\n\n// 生成密碼重設令牌\nuserSchema.methods.generatePasswordResetToken = function (): string {\n  const resetToken = jwt.sign(\n    { id: this._id, type: \"password-reset\" },\n    config.jwt.secret,\n    { expiresIn: \"1h\" } as jwt.SignOptions,\n  );\n\n  this.passwordResetToken = resetToken;\n  this.passwordResetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 小時後過期\n\n  return resetToken;\n};\n\n// 生成電子郵件驗證令牌\nuserSchema.methods.generateEmailVerificationToken = function (): string {\n  const verificationToken = jwt.sign(\n    { id: this._id, type: \"email-verification\" },\n    config.jwt.secret,\n    { expiresIn: \"24h\" } as jwt.SignOptions,\n  );\n\n  this.emailVerificationToken = verificationToken;\n  this.emailVerificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 小時後過期\n\n  return verificationToken;\n};\n\n// 建立索引\nuserSchema.index({ email: 1 }, { unique: true });\nuserSchema.index({ isActive: 1 });\nuserSchema.index({ createdAt: -1 });\nuserSchema.index({ \"privacySettings.profileVisibility\": 1 });\n\n// 匯出用戶模型\nexport const User = mongoose.model<IUser>(\"User\", userSchema);\n"],"version":3}