2c7b844d4fb2af00c46afc29796a6a40
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const User_1 = require("../../src/models/User");
const auth_1 = require("../../src/routes/auth");
const error_handler_1 = require("../../src/middleware/error-handler");
const testData_1 = require("../utils/testData");
// 創建測試應用
const app = (0, express_1.default)();
app.use(express_1.default.json());
app.use('/api/auth', auth_1.authRoutes);
app.use(error_handler_1.errorHandler);
describe('Auth Routes', () => {
    beforeEach(async () => {
        await User_1.User.deleteMany({});
    });
    afterEach(async () => {
        await User_1.User.deleteMany({});
    });
    describe('POST /api/auth/register', () => {
        it('should register a new user', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send(testData_1.validUserData)
                .expect(201);
            expect(response.body.success).toBe(true);
            expect(response.body.data.user).toBeDefined();
            expect(response.body.data.user.email).toBe(testData_1.validUserData.email);
            expect(response.body.data.user.name).toBe(testData_1.validUserData.name);
            expect(response.body.data.user.password).toBeUndefined(); // 密碼不應該返回
        });
        it('should not register user with existing email', async () => {
            // 先註冊一個用戶
            await new User_1.User(testData_1.validUserData).save();
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send(testData_1.validUserData)
                .expect(400);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain(testData_1.ERROR_MESSAGES.EMAIL_ALREADY_EXISTS);
        });
        it('should not register user with invalid email', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send({
                ...testData_1.validUserData,
                email: 'invalid-email'
            })
                .expect(400);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('驗證失敗');
        });
        it('should not register user with missing required fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send({
                email: testData_1.validUserData.email
                // 缺少其他必需字段
            })
                .expect(400);
            expect(response.body.success).toBe(false);
        });
        it('should not register user with weak password', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send({
                ...testData_1.validUserData,
                password: '123' // 弱密碼
            })
                .expect(400);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('輸入資料驗證失敗');
        });
    });
    describe('POST /api/auth/login', () => {
        beforeEach(async () => {
            await new User_1.User(testData_1.validUserData).save();
        });
        it('should login with valid credentials', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testData_1.validUserData.email,
                password: testData_1.validUserData.password
            })
                .expect(200);
            expect(response.body.success).toBe(true);
            expect(response.body.data.user).toBeDefined();
            expect(response.body.data.user.email).toBe(testData_1.validUserData.email);
            expect(response.body.data.token).toBeDefined();
            expect(response.body.data.user.password).toBeUndefined();
        });
        it('should not login with invalid email', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'nonexistent@example.com',
                password: testData_1.validUserData.password
            })
                .expect(401);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain(testData_1.ERROR_MESSAGES.INVALID_CREDENTIALS);
        });
        it('should not login with invalid password', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testData_1.validUserData.email,
                password: 'wrongpassword'
            })
                .expect(401);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain(testData_1.ERROR_MESSAGES.INVALID_CREDENTIALS);
        });
        it('should not login with missing credentials', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({})
                .expect(400);
            expect(response.body.success).toBe(false);
        });
    });
    describe('POST /api/auth/forgot-password', () => {
        beforeEach(async () => {
            await new User_1.User(testData_1.validUserData).save();
        });
        it('should send password reset email for valid email', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/forgot-password')
                .send({ email: testData_1.validUserData.email })
                .expect(200);
            expect(response.body.success).toBe(true);
            expect(response.body.message).toContain(testData_1.ERROR_MESSAGES.PASSWORD_RESET_SUCCESS);
        });
        it('should return success message for non-existent email (security)', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/forgot-password')
                .send({ email: 'nonexistent@example.com' })
                .expect(200);
            expect(response.body.success).toBe(true);
            expect(response.body.message).toContain('電子郵件地址');
        });
        it('should not send reset email with invalid email format', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/forgot-password')
                .send({ email: 'invalid-email' })
                .expect(400);
            expect(response.body.success).toBe(false);
        });
    });
    describe('POST /api/auth/reset-password', () => {
        let user;
        let resetToken;
        beforeEach(async () => {
            user = await new User_1.User(testData_1.validUserData).save();
            user.generatePasswordResetToken();
            resetToken = user.passwordResetToken;
            await user.save();
        });
        it('should reset password with valid token', async () => {
            const newPassword = 'newpassword123';
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/reset-password')
                .send({
                token: resetToken,
                newPassword: newPassword
            })
                .expect(200);
            expect(response.body.success).toBe(true);
            expect(response.body.message).toContain('重設成功');
            // 驗證可以用新密碼登入
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testData_1.validUserData.email,
                password: newPassword
            })
                .expect(200);
            expect(loginResponse.body.success).toBe(true);
        });
        it('should not reset password with invalid token', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/reset-password')
                .send({
                token: 'invalid-token',
                newPassword: 'newpassword123'
            })
                .expect(400);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('密碼重設令牌無效或已過期');
        });
        it('should not reset password with weak password', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/reset-password')
                .send({
                token: resetToken,
                newPassword: '123' // 弱密碼
            })
                .expect(400);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('輸入資料驗證失敗');
        });
    });
    describe('POST /api/auth/verify-email', () => {
        let user;
        let verificationToken;
        beforeEach(async () => {
            user = await new User_1.User(testData_1.validUserData).save();
            user.generateEmailVerificationToken();
            verificationToken = user.emailVerificationToken;
            await user.save();
        });
        it('should verify email with valid token', async () => {
            const response = await (0, supertest_1.default)(app)
                .get(`/api/auth/verify-email/${verificationToken}`)
                .expect(200);
            expect(response.body.success).toBe(true);
            expect(response.body.message).toContain('驗證成功');
            // 驗證用戶的郵件已被驗證
            const updatedUser = await User_1.User.findById(user._id);
            expect(updatedUser?.isEmailVerified).toBe(true);
        });
        it('should not verify email with invalid token', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/auth/verify-email/invalid-token')
                .expect(400);
            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('無效');
        });
    });
    describe('GET /api/auth/me', () => {
        let user;
        let authToken;
        beforeEach(async () => {
            user = await new User_1.User(testData_1.validUserData).save();
            authToken = user.generateAuthToken();
        });
        it('should get current user with valid token', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/auth/me')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            expect(response.body.success).toBe(true);
            expect(response.body.data.user).toBeDefined();
            expect(response.body.data.user.email).toBe(testData_1.validUserData.email);
            expect(response.body.data.user.password).toBeUndefined();
        });
        it('should not get user without token', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/auth/me')
                .expect(401);
            expect(response.body.success).toBe(false);
            expect(response.body.error.message).toContain('認證令牌');
        });
        it('should not get user with invalid token', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/auth/me')
                .set('Authorization', 'Bearer invalid-token')
                .expect(401);
            expect(response.body.success).toBe(false);
            expect(response.body.error.message).toContain('無效');
        });
    });
    describe('POST /api/auth/logout', () => {
        let user;
        let authToken;
        beforeEach(async () => {
            user = await new User_1.User(testData_1.validUserData).save();
            authToken = user.generateAuthToken();
        });
        it('should logout successfully', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            expect(response.body.success).toBe(true);
            expect(response.body.message).toContain('登出成功');
        });
        it('should not logout without token', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .expect(401);
            expect(response.body.success).toBe(false);
            expect(response.body.error.message).toContain('認證令牌');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,