name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22.x'
  MONGODB_VERSION: '6.0'

jobs:
  # 程式碼品質檢查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies (Frontend)
      working-directory: ./frontend
      run: npm ci
      
    - name: Install dependencies (Backend)
      working-directory: ./backend
      run: npm ci
      
    - name: TypeScript check (Frontend)
      working-directory: ./frontend
      run: npm run type-check
      
    - name: TypeScript check (Backend)
      working-directory: ./backend
      run: npx tsc --noEmit
      
    - name: ESLint check (Frontend)
      working-directory: ./frontend
      run: npm run lint
      
    - name: ESLint check (Backend)
      working-directory: ./backend
      run: npm run lint
      
    - name: Prettier check (Frontend)
      working-directory: ./frontend
      run: npx prettier --check "src/**/*.{ts,tsx}"
      
    - name: Prettier check (Backend)
      working-directory: ./backend
      run: npx prettier --check "src/**/*.ts"

  # 前端測試
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Build application
      working-directory: ./frontend
      run: npm run build

  # 後端測試
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://test:test@localhost:27017/pet-finder-test?authSource=admin
        JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
        CLOUDINARY_CLOUD_NAME: test
        CLOUDINARY_API_KEY: test
        CLOUDINARY_API_SECRET: test
        EMAIL_USER: test@example.com
        EMAIL_PASS: test
        
    - name: Run integration tests
      working-directory: ./backend
      run: npm run test:e2e
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://test:test@localhost:27017/pet-finder-test?authSource=admin
        JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
        CLOUDINARY_CLOUD_NAME: test
        CLOUDINARY_API_KEY: test
        CLOUDINARY_API_SECRET: test
        EMAIL_USER: test@example.com
        EMAIL_PASS: test
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        
    - name: Build application
      working-directory: ./backend
      run: npm run build

  # 安全性掃描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run npm audit (Frontend)
      working-directory: ./frontend
      run: npm audit --audit-level moderate
      
    - name: Run npm audit (Backend)
      working-directory: ./backend
      run: npm audit --audit-level moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=medium

  # 部署到 Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.pet-finder.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install and build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
        
    - name: Deploy frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        alias-domains: staging.pet-finder.com
        
    - name: Build and deploy backend
      working-directory: ./backend
      run: |
        npm ci
        npm run build
        
    - name: Deploy backend to AWS
      run: |
        echo "部署後端到 AWS (待實作)"
        # 這裡會加入 AWS 部署腳本

  # 部署到 Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://pet-finder.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install and build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        
    - name: Deploy frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'
        
    - name: Build and deploy backend
      working-directory: ./backend
      run: |
        npm ci
        npm run build
        
    - name: Deploy backend to AWS
      run: |
        echo "部署後端到 AWS (待實作)"
        # 這裡會加入 AWS 部署腳本
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          自動發布版本 v${{ github.run_number }}
          
          變更內容:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  # 通知
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "部署成功通知 (待實作)"
        # 這裡可以加入 Slack 或其他通知服務
        
    - name: Notify on failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "部署失敗通知 (待實作)"
        # 這裡可以加入 Slack 或其他通知服務